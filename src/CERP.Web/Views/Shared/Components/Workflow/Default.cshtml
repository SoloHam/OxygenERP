@using Syncfusion.EJ2.Diagrams;
@using Syncfusion.EJ2.Navigations;
@model CERP.Web.Pages.Shared.Components.WorkFlowVCModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@addTagHelper *, Syncfusion.EJ2
@{
    var alertanimation = new Syncfusion.EJ2.Popups.DialogAnimationSettings { Effect = Syncfusion.EJ2.Popups.DialogEffect.None };

    var initialToolBar = new List<object>() { new { text = "Show Actions", tooltipText = "Actions", prefixIcon = "e-custom-show-actions", id = "showActions" }, "Search", "ColumnChooser" };
    var fullToolBar = new List<object>() { new { text = "Hide Actions", tooltipText = "Actions", prefixIcon = "e-custom-hide-actions", id = "hideActions" }, new { text = "Toggle Grouping", tooltipText = "Grouping", prefixIcon = "zmdi-chevron-up", id = "toggleGrouping" }, new { text = "Toggle Detailed", tooltipText = "Toggle Detailed", prefixIcon = "e-toggledetailed", id = "toggleDetailed" }, new { text = "ExcelExport", tooltipText = "Excel Export", prefixIcon = "e-excelexport", id = "excelexport", align = "Right" }, "CsvExport", "Print", "Search", new { text = "Copy", tooltipText = "Copy", prefixIcon = "e-copy", id = "copy" }, new { text = "Copy With Header", tooltipText = "Copy With Header", prefixIcon = "e-copy", id = "copyHeader" }, "ColumnChooser" };

    double[] intervals = { 1, 9, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75 };
    DiagramGridlines gridLines = new DiagramGridlines()
    { LineColor = "#e0e0e0", LineIntervals = intervals, SnapIntervals = intervals };

    List<DiagramNode> SymbolPaletee = new List<DiagramNode>();
    SymbolPaletee.Add(new DiagramNode() { Id = "Approval Route", Tooltip = new DiagramDiagramTooltip() { Content = "Approval Route" }, Shape = new { type = "Flow", shape = "Terminator" }, Style = new NodeStyleNodes() { Fill = "Lightblue" } }); ; ;
    SymbolPaletee.Add(new DiagramNode() { Id = "Task", Shape = new { type = "Flow", shape = "Card" }, Style = new NodeStyleNodes() { Fill = "Darkcyan" } });
    SymbolPaletee.Add(new DiagramNode() { Id = "Delay", Shape = new { type = "Flow", shape = "Delay" }, Style = new NodeStyleNodes() { Fill = "Black" } });
    SymbolPaletee.Add(new DiagramNode() { Id = "Conditional", Shape = new { type = "Flow", shape = "Decision" }, Style = new NodeStyleNodes() { Fill = "White" } });

    List<DiagramConnector> SymbolPaletteConnectors = new List<DiagramConnector>();
    SymbolPaletteConnectors.Add(new DiagramConnector()
    {
        Id = "Link1",
        Type = Segments.Orthogonal,
        SourcePoint = new DiagramPoint() { X = 0, Y = 0 },
        TargetPoint = new DiagramPoint() { X = 40, Y = 40 },
        TargetDecorator = new ConnectorTargetDecoratorConnectors() { Shape = DecoratorShapes.Arrow },
        Style = new DiagramStrokeStyle() { StrokeWidth = 2 }
    });
    SymbolPaletteConnectors.Add(new DiagramConnector()
    {
        Id = "Link2",
        Type = Segments.Orthogonal,
        SourcePoint = new DiagramPoint() { X = 0, Y = 0 },
        TargetPoint = new DiagramPoint() { X = 40, Y = 40 },
        TargetDecorator = new ConnectorTargetDecoratorConnectors() { Shape = DecoratorShapes.None },
        Style = new DiagramStrokeStyle() { StrokeWidth = 2 }
    });
    SymbolPaletteConnectors.Add(new DiagramConnector()
    {
        Id = "Link3",
        Type = Segments.Straight,
        SourcePoint = new DiagramPoint() { X = 0, Y = 0 },
        TargetPoint = new DiagramPoint() { X = 40, Y = 40 },
        TargetDecorator = new ConnectorTargetDecoratorConnectors() { Shape = DecoratorShapes.Arrow },
        Style = new DiagramStrokeStyle() { StrokeWidth = 2 }
    });
    SymbolPaletteConnectors.Add(new DiagramConnector()
    {
        Id = "Link4",
        Type = Segments.Straight,
        SourcePoint = new DiagramPoint() { X = 0, Y = 0 },
        TargetPoint = new DiagramPoint() { X = 40, Y = 40 },
        TargetDecorator = new ConnectorTargetDecoratorConnectors() { Shape = DecoratorShapes.None },
        Style = new DiagramStrokeStyle() { StrokeWidth = 2 }
    });
    SymbolPaletteConnectors.Add(new DiagramConnector()
    {
        Id = "Link5",
        Type = Segments.Bezier,
        SourcePoint = new DiagramPoint() { X = 0, Y = 0 },
        TargetPoint = new DiagramPoint() { X = 40, Y = 40 },
        TargetDecorator = new ConnectorTargetDecoratorConnectors() { Shape = DecoratorShapes.None },
        Style = new DiagramStrokeStyle() { StrokeWidth = 2 }
    });

    List<SymbolPalettePalette> Palette = new List<SymbolPalettePalette>
{
        new SymbolPalettePalette() { Id = "flow", Expanded = true, Symbols = SymbolPaletee, IconCss = "e-ddb-icons e-flow", Title = "Nodes" },
        new SymbolPalettePalette() { Id = "connectors", Expanded = true, Symbols = SymbolPaletteConnectors, IconCss = "e-ddb-icons e-connector", Title = "Connectors" },
        new SymbolPalettePalette() { Id = "favourites", Expanded = true, Symbols = new List<DiagramConnector>(), IconCss = "e-ddb-icons e-favourites", Title = "Favourite" }
    };

    var Multiple = ExpandMode.Multiple;
    var getSymbolNode = $"{Model.Id}_getSymbolNodes";
    var getNodeDefaults = $"{Model.Id}_getNodeDefaults";
    var getConnectorDefaults = $"{Model.Id}_getConnectorDefaults";
    var getSymbolInfo = $"{Model.Id}_getSymbolInfo";
}

<div class="areaHeader" style="display:flex;">
    <div id="lrLoader" class="pull-left loader-inline" style="display:none"></div>
    <div class="areaHeaderTitle">
        <span id="areHeadertitle" class="areaHeaderTitleNode menu-text">Define Workflow</span>
    </div>
</div>
<div>
    <ejs-accordion id="@(Model.Id)_workflow-properties-accordion">
        <e-accordion-accordionitems>
            <e-accordion-accordionitem header="Custom Fields" content="#@(Model.Id)_customFieldsInfo"></e-accordion-accordionitem>
        </e-accordion-accordionitems>
    </ejs-accordion>

    <div id="@(Model.Id)_customFieldsInfo" role="form" data-toggle="validator" style="display:none">

        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-6 col-12">
                <div class="form-group">
                    <label class="control-label m-b-5 ">Field Type:</label>
                    <select id="@(Model.Id)_viewCustomFormFieldTypesList" name="CustomViewFormFields" class="form-control" required>
                        <option>Text Box</option>
                        <option>Dropdown</option>
                        <option>Checkbox</option>
                        <option>Date</option>
                        <option>Date Range</option>
                    </select>
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-6 col-12">
                <div class="form-group">
                    <label class="control-label m-b-5 ">Name:</label>
                    <input type="text" id="@(Model.Id)_customFieldName" name="CFFName" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" required>
                </div>
            </div>
        </div>
        <div id="@(Model.Id)_customTextBoxFieldSec" class="row">
            <div class="col-lg-4 col-md-4 col-sm-4 col-12">
                <div class="form-group">
                    <label class="control-label m-b-5 ">Type:</label>
                    <select id="@(Model.Id)_viewCustomTBFormFieldTypesList" name="CustomViewFormFields" class="form-control">
                        <option>Text</option>
                        <option>Integer</option>
                        <option>Decimal</option>
                    </select>
                </div>
            </div>
            <div class="col-lg-4 col-md-4 col-sm-4 col-12">
                <div class="form-group">
                    <label class="control-label m-b-5 ">Min Length:</label>
                    <input type="number" value="1" id="@(Model.Id)_customTBFieldMinLenght" name="C_TB_FF_MinLength" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" required>
                </div>
            </div>
            <div class="col-lg-4 col-md-4 col-sm-4 col-12">
                <div class="form-group">
                    <label class="control-label m-b-5 ">Max Length:</label>
                    <input type="number" value="5" id="@(Model.Id)_customTBFieldMaxLenght" name="C_TB_FF_MaxLength" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" required>
                </div>
            </div>
        </div>
        <div class="row">
            <button type="button" id="@(Model.Id)_addCustomFieldBtn" onclick="@(Model.Id)_addNewCustomFormField()" class="btn btn-success btn-block">
                CREATE CUSTOM FIELD
            </button>
        </div>
        <br />
        <ejs-grid id="@(Model.Id)_workshiftsCustomFormFieldsGrid" enableAutoFill="true" columns="@Model.GetCustomFormFieldsGridColumns()"
                  dataBound="dataBoundResponsive" actionComplete="@(Model.Id)_customFormFields_actionComplete"
                  allowExcelExport="true" height="60%" allowPdfExport="true"
                  hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true" showColumnChooser="false"
                  allowSorting="true" allowMultiSorting="true" gridLines="Horizontal"
                  toolbar='new List<object>() { "Delete", "Search" }'
                  allowPaging="true" allowResizing="true">

            <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
            <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowEditing="true" allowDeleting="true" newRowPosition="Bottom"></e-grid-editSettings>
            <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
            <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10", "20", "All" })"></e-grid-pagesettings>
        </ejs-grid>
       
    </div>
</div>
<div class="control-section">
    <div style="width:100%; display:inline-block;">
        <div class="sb-mobile-palette-bar">
            <div id="palette-icon" style="float: right;" role="button" class="e-ddb-icons1 e-toggle-palette"></div>
        </div>
        <div id="palette-space" class="sb-mobile-palette">
            <ejs-symbolpalette id="symbolPalette" getNodeDefaults="getSymbolNode" symbolHeight="60" symbolWidth="60" expandMode="Multiple" width="100%" height="450px" palettes="Palette" symbolMargin="new SymbolPaletteMargin() { Left = 15, Right = 15, Top = 15, Bottom = 15 }" getSymbolInfo="getSymbolInfo">
            </ejs-symbolpalette>
        </div>
        <div id="diagram-space" class="sb-mobile-diagram">
            <div id="@(Model.Id)_diagramArea" class="col-lg-12 control-section">
                <ejs-diagram id="@(Model.Id)_container" width="100%" height="450px" selectionChange="@(Model.Id)_workflowSelectionChanged" created="@(Model.Id)_diagramCreated" getNodeDefaults="getNodeDefaults" getConnectorDefaults="getConnectorDefaults">
                    <e-diagram-snapsettings horizontalGridlines="gridLines" verticalGridlines="gridLines"></e-diagram-snapsettings>
                </ejs-diagram>
            </div>
            <div id="@(Model.Id)_propertySection" class="col-lg-6" style="display:none">
                <div class="property-section">
                    <div class="property-panel-header">
                        <span class="mainTitle" style="align-self:flex-start">Properties</span>
                        <span class="e-ddb-icons e-expand e-icons" style="align-self:flex-end; font-size: large; margin-top: -40px; margin-bottom: 10px"></span>
                    </div>
                    <hr style="margin: 10px 0 10px 0;" />
                    <div id="@(Model.Id)_propertyPanel" class="e-remove-selection property-panel-content">
                        <div id="@(Model.Id)_approval-route-panel" role="form" data-toggle="validator">
                            <ejs-accordion id="@(Model.Id)_approval-route-panel-accordion">
                                <e-accordion-accordionitems>
                                    <e-accordion-accordionitem expanded="true" header="Priority" content="#@(Model.Id)_priorityInfo"></e-accordion-accordionitem>
                                    <e-accordion-accordionitem expanded="true" header="Start" content="#@(Model.Id)_startInfo"></e-accordion-accordionitem>
                                    <e-accordion-accordionitem expanded="true" header="Selection" content="#@(Model.Id)_generalInfo"></e-accordion-accordionitem>
                                    <e-accordion-accordionitem expanded="true" header="View" content="#@(Model.Id)_viewInfo"></e-accordion-accordionitem>
                                    <e-accordion-accordionitem expanded="true" header="Notifications" content="#@(Model.Id)_notificationsInfo"></e-accordion-accordionitem>
                                    <e-accordion-accordionitem expanded="true" header="Action" content="#@(Model.Id)_apActionsInfo"></e-accordion-accordionitem>
                                    <e-accordion-accordionitem expanded="true" header="Reporting" content=""></e-accordion-accordionitem>
                                </e-accordion-accordionitems>
                            </ejs-accordion>

                            <div id="@(Model.Id)_generalInfo">
                                <div class="row">
                                    <div class="col-lg-6 col-md-6 col-sm-6 col-12">
                                        <div class="form-group">
                                            <label class="control-label m-b-5 ">Department:</label>
                                            <select id="@(Model.Id)_apDepartmentIds" name="DepartmentIds" multiple="multiple" class="form-control" onchange="SelectDepartmentPositions('@(Model.Id)_apDepartmentIds', '@(Model.Id)_apPositionIds', @(Model.Id)_curDepartments, @(Model.Id)_curPositions, @(Model.Id)_isEditingAP, @(Model.Id)_isEditingPosLoadedAP, @(Model.Id)_apSelectPositions);" required>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="col-lg-6 col-md-6 col-sm-6 col-12">
                                        <div class="form-group">
                                            <label class="margin-bottom-5 control-label">Position:</label>
                                            <select id="@(Model.Id)_apPositionIds" name="PositionIds" class="form-control" multiple="multiple" onchange="SelectPositionEmployees('@(Model.Id)_apPositionIds', '@(Model.Id)_apEmployeeIds',@(Model.Id)_curPositions, @(Model.Id)_curEmployees, @(Model.Id)_isEditingAP, @(Model.Id)_isEditingEmpLoadedAP, @(Model.Id)_apSelectEmployees);" required>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="row m-md-t-5 m-md-b-10">
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group">
                                            <label class="margin-bottom-5 control-label">Employee:</label>
                                            <select id="@(Model.Id)_apEmployeeIds" onchange="if ($('#@(Model.Id)_apEmployeeIds').val().length > 1) $('#@(Model.Id)_APAllowAnySec').show(); else $('#@(Model.Id)_APAllowAnySec').hide();" name="Employee" multiple="multiple" class="form-control" required>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="row m-md-t-5 m-md-b-10">
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group">
                                            <label class="control-label m-b-5 ">Additional Information:</label>

                                            <div class="btn-group" data-toggle="buttons">
                                                <label class="btn btn-default active">
                                                    <input type="checkbox" id="@(Model.Id)_APIsActive" autocomplete="off"> Active
                                                </label>
                                                <label class="btn btn-default active">
                                                    <input type="checkbox" id="@(Model.Id)_APNotify" autocomplete="off"> Notify Employee
                                                </label>
                                                <label class="btn btn-default">
                                                    <input type="checkbox" id="@(Model.Id)_APIsPoster" autocomplete="off"> Allow Posting
                                                </label>
                                                <label class="btn btn-default" id="@(Model.Id)_APAllowAnySec" style="display:none">
                                                    <input type="checkbox" id="@(Model.Id)_APAllowAny" autocomplete="off"> Allow Any
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div id="@(Model.Id)_viewInfo">
                                <div class="row">
                                    <div class="col-lg-6 col-md-6 col-sm-6 col-12">
                                        <div class="form-group">
                                            <label class="control-label m-b-5 ">Form Fields:</label>
                                            <select id="@(Model.Id)_viewFormFieldsList" name="ViewFormFields" multiple="multiple" class="form-control">
                                            </select>
                                        </div>
                                    </div>
                                    <div class="col-lg-6 col-md-6 col-sm-6 col-12">
                                        <label class="control-label m-b-5 "></label>
                                        <button type="button" id="@(Model.Id)_savePropertiesBtn" onclick="@(Model.Id)_addViewFormField()" class="btn btn-success btn-block">
                                            ADD FIELD(S)
                                        </button>
                                    </div>
                                </div>
                                <ejs-grid id="@(Model.Id)_viewFormFieldsGrid" dataSource="@Model.GetFormFieldsAsDS()" enableAutoFill="true" columns="@Model.GetFormFieldsGridColumns()"
                                          dataBound="dataBoundResponsive" commandClick="@(Model.Id)_approvalRoute_viewInfo_commandClick" actionBegin="@(Model.Id)_approvalRoute_viewInfo_actionBegin"
                                          allowExcelExport="true" height="100%" allowPdfExport="true" actionComplete="@(Model.Id)_approvalRoute_viewInfo_actionComplete"
                                          hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true" showColumnChooser="false"
                                          allowSorting="true" allowMultiSorting="true" gridLines="Horizontal"
                                          toolbarClick="@(Model.Id)_approvalRoute_viewInfo_toolbarClick" toolbar='new List<object>() { new { text = "Show Actions", tooltipText = "Actions", prefixIcon = "e-custom-show-actions", id = "showActions" } }'
                                          allowPaging="true" allowResizing="true">

                                    <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                    <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowEditing="true" allowDeleting="true" newRowPosition="Bottom"></e-grid-editSettings>
                                    <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                    <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10", "20", "All" })"></e-grid-pagesettings>
                                </ejs-grid>

                                <script>
                                    let viewFormFields = @(Json.Serialize(Model.Form.FormFields.Where(x => x.IsVisible).ToList()));
                                    console.log(viewFormFields);
                                    let notificationsSettings = @(Json.Serialize(Model.Notifications.ActionNotificationSettings));
                                    console.log(notificationsSettings);
                                    let _apActions = @(Json.Serialize(Model.GetAPActions()));
                                    console.log(_apActions);

                                    var formFieldsGroups = ["System", "Custom"];
                                    var formFields = [];
                                    for (var i = 0; i < viewFormFields.length; i++) {
                                        if (!viewFormFields[i].isVisible) continue;
                                        if (!formFieldsGroups.includes(viewFormFields[i].fieldTypeDescription)) {
                                            formFieldsGroups.push(viewFormFields[i].fieldTypeDescription);
                                        }

                                        viewFormFields[i].id = i;
                                        formFields.push({ label: viewFormFields[i].name, value: viewFormFields[i].id, fieldType: viewFormFields[i].fieldTypeDescription, isExternal: viewFormFields[i].isExternal });
                                    }

                                    function @(Model.Id)_populateFormFieldsSelection() {
                                        let viewFormFieldsGrid = $('#@(Model.Id)_viewFormFieldsGrid')[0].ej2_instances[0];
                                        let dataMS = [];
                                        //console.log(viewFormFields);
                                        //console.log(formFields);
                                        //console.log(viewFormFieldsGrid.dataSource);
                                        for (var i = 0; i < formFieldsGroups.length; i++) {
                                            let children = formFields.filter(x => x.fieldType == formFieldsGroups[i] && viewFormFieldsGrid.dataSource.filter(function (y) { let state = y.id == x.value; return state; }).length == 0)
                                            dataMS.push({ label: formFieldsGroups[i], value: '', children: children });
                                        }
                                        $('#@(Model.Id)_viewFormFieldsList').multiselect('dataprovider', dataMS);
                                        console.log(dataMS);
                                    }

                                    function @(Model.Id)_customFormFields_actionComplete(args)
                                    {
                                        if (args.requestType == "delete")
                                        {
                                            console.log(args);
                                            viewFormFields = viewFormFields.filter(function (x) { return args.data.filter(function (y) { return y.fieldName == x.name }).length == 0 });

                                            formFields = [];
                                            for (var i = 0; i < viewFormFields.length; i++) {
                                                if (!viewFormFields[i].isVisible) continue;
                                                if (!formFieldsGroups.includes(viewFormFields[i].fieldTypeDescription)) {
                                                    formFieldsGroups.push(viewFormFields[i].fieldTypeDescription);
                                                }

                                                viewFormFields[i].id = i;
                                                formFields.push({ label: viewFormFields[i].name, value: viewFormFields[i].id, fieldType: viewFormFields[i].fieldTypeDescription, isExternal: viewFormFields[i].isExternal });
                                            }

                                            var diagram = $('#@(Model.Id)_container')[0].ej2_instances[0];
                                            for (var i = 0; i < diagram.nodes.length; i++) {
                                                let node = diagram.nodes[i];
                                                if (node.addInfo != null && typeof node.addInfo !== 'undefined') {
                                                    let info = node.addInfo;
                                                    if (info.formFields != null && typeof info.formFields !== 'undefined') {
                                                        node.addInfo.formFields = info.formFields.filter(function (x) { return args.data.filter(function (y) { return y.fieldName == x.name }).length == 0 });
                                                    }
                                                }
                                            }

                                            if (diagram.selectedItems.properties.nodes.length > 0) {
                                                if (typeof diagram.selectedItems.properties.nodes[0].addInfo !== 'undefined') {
                                                    $('#@(Model.Id)_viewFormFieldsGrid')[0].ej2_instances[0].dataSource = diagram.selectedItems.properties.nodes[0].addInfo.formFields;
                                                    $('#@(Model.Id)_viewFormFieldsGrid')[0].ej2_instances[0].refresh();
                                                }
                                            }

                                            @(Model.Id)_populateFormFieldsSelection();
                                        }
                                    }

                                    function @(Model.Id)_addViewFormField()
                                    {
                                        var selectedFieldsIds = $('#@(Model.Id)_viewFormFieldsList').val();

                                        console.log(formFields);
                                        console.log(selectedFieldsIds);
                                        if (selectedFieldsIds.length <= 0) return;

                                        let selectedFields = formFields.filter(function (x) { let val = x.value.toString(); console.log(x); return selectedFieldsIds.includes(val); });
                                        //let nonSelectedFields = formFields.filter(function (x) { return !selectedFieldsIds.includes(x.value.toString()); });
                                        console.log(selectedFields);
                                        //console.log(nonSelectedFields);

                                        let grid = $('#@(Model.Id)_viewFormFieldsGrid')[0].ej2_instances[0];
                                        for (var i = 0; i < selectedFields.length; i++) {
                                            console.log(selectedFields[i]);
                                            let row = { id: selectedFields[i].value, name: selectedFields[i].label, fieldTypeDescription: selectedFields[i].fieldType, isExternal: selectedFields[i].isExternal };
                                            console.log(row);
                                            grid.dataSource.push(rfdc()(row));
                                        }
                                        grid.refresh();

                                        //for (var i = 0; i < nonSelectedFields.length; i++) {
                                        //    //if (nonSelectedFields[i].fieldTypeDescription != null && !formFieldsGroups.includes(nonSelectedFields[i].fieldTypeDescription)) {
                                        //    //    formFieldsGroups.push(nonSelectedFields[i].fieldTypeDescription);
                                        //    //}
                                        //    formFields.push(rfdc()(nonSelectedFields[i]));
                                        //}

                                        @(Model.Id)_populateFormFieldsSelection();
                                    }
                                    function @(Model.Id)_approvalRoute_viewInfo_commandClick(args)
                                    {
                                        if (args.commandColumn.type == "MoveUp") {
                                            var grid = $('#@(Model.Id)_viewFormFieldsGrid')[0].ej2_instances[0];
                                            var vI = args.rowData.viewIndex - 1;
                                            if (vI < 1) return;
                                            array_move(grid.dataSource, vI, vI - 1);
                                            for (var i = 0; i < grid.dataSource.length; i++) {
                                                grid.dataSource[i].routeIndex = i + 1;
                                            }
                                            grid.refresh();
                                        }
                                        if (args.commandColumn.type == "MoveDown") {
                                            var grid = $('#@(Model.Id)_viewFormFieldsGrid')[0].ej2_instances[0];
                                            var vI = args.rowData.viewIndex - 1;
                                            if (vI == grid.dataSource.length) return;
                                            array_move(grid.dataSource, vI, vI + 1);
                                            for (var i = 0; i < grid.dataSource.length; i++) {
                                                grid.dataSource[i].viewIndex = i + 1;
                                            }
                                            grid.refresh();
                                        }
                                    }
                                    function @(Model.Id)_approvalRoute_viewInfo_actionBegin(args)
                                    {
                                        if (args.requestType == "save") {

                                        }
                                        else if (args.requestType == "delete") {
                                            var data = args.data;
                                        }
                                    }
                                    function @(Model.Id)_approvalRoute_viewInfo_actionComplete(args)
                                    {
                                        if (args.requestType == "delete")
                                        {
                                            @(Model.Id)_populateFormFieldsSelection();
                                        }
                                    }
                                    function @(Model.Id)_approvalRoute_viewInfo_toolbarClick(args)
                                    {
                                        var gridObj = document.getElementById("@(Model.Id)_viewFormFieldsGrid").ej2_instances[0];

                                        if (args.item.id === 'showActions') {
                                            gridObj.toolbar = [{ text: "Hide Actions", tooltipText: "Actions", prefixIcon: "e-custom-hide-actions", id: "hideActions" }, { text: "Toggle Grouping", tooltipText: "Grouping", prefixIcon: "e-custom-group-toggle", id: "toggleGrouping" }, { text: "Move Up", tooltipText: "Move Up", prefixIcon: "e-c-moveup", id: "moveUp" }, { text: "Move Down", tooltipText: "Move Down", prefixIcon: "e-c-movedown", id: "moveDown" }, "Add", "Cancel", "Delete" ];
                                            gridObj.refresh();
                                        }
                                        if (args.item.id === 'hideActions') {
                                            gridObj.toolbar = [{ text: "Show Actions", tooltipText: "Actions", prefixIcon: "e-custom-show-actions", id: "showActions" }, "Search", "ColumnChooser"];
                                            gridObj.showColumnChooser = true;
                                            gridObj.refresh();
                                        }

                                        if (args.item.id === 'toggleGrouping') {
                                            gridObj.allowGrouping = !gridObj.allowGrouping;
                                            gridObj.refresh();
                                        }

                                        if (args.item.id === 'moveUp')
                                        {
                                            var selectedIndexes = [];
                                            var selected = gridObj.getSelectedRecords();
                                            for (var i = 0; i < selected.length; i++) {
                                                var cur = selected[i];
                                                let vI = cur.viewIndex - 1;
                                                if (vI - 1 < 0)
                                                    break;
                                                selectedIndexes.push(vI - 1);
                                                array_move(gridObj.dataSource, vI, vI - 1);
                                            }
                                            for (var i = 0; i < gridObj.dataSource.length; i++) {
                                                if (typeof (gridObj.dataSource[i]) !== 'undefined') {
                                                    gridObj.dataSource[i].viewIndex = i + 1;
                                                }
                                            }
                                            gridObj.refresh();
                                            setTimeout(function () { gridObj.selectionModule.selectRows(selectedIndexes) }, 100);
                                        }
                                        if (args.item.id === 'moveDown')
                                        {
                                            var selectedIndexes = [];
                                            var selected = gridObj.getSelectedRecords()
                                            for (var i = selected.length - 1; i > -1; i--) {
                                                var cur = selected[i];
                                                let vI = cur.viewIndex - 1;
                                                if (vI + 1 > gridObj.dataSource.length - 1)
                                                    break;
                                                selectedIndexes.push(vI + 1);
                                                array_move(gridObj.dataSource, vI, vI + 1);
                                            }
                                            for (var i = 0; i < gridObj.dataSource.length; i++) {
                                                if (typeof (gridObj.dataSource[i]) !== 'undefined') {
                                                    gridObj.dataSource[i].viewIndex = i + 1;
                                                }
                                            }
                                            gridObj.refresh();
                                            setTimeout(function () { gridObj.selectionModule.selectRows(selectedIndexes) }, 100);
                                        }
                                    }


                                </script>
                            </div>
                            <div id="@(Model.Id)_priorityInfo">
                                <div class="row">
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group">
                                            <label class="control-label m-b-5 ">Type:</label>
                                            <select id="@(Model.Id)_priorityTypesList" onchange="@(Model.Id)_apPriorityChanged()" name="PriorityType" class="form-control">
                                                <option selected="selected">Default</option>
                                                <option>Conditional</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div id="@(Model.Id)_priorityType_default">
                                        <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                            <div class="form-group">
                                                <label class="control-label m-b-5 ">Level:</label>
                                                <select id="@(Model.Id)_defaultPriorityLevelsList" name="DefaultPriorityLevels" class="form-control">
                                                    <option>High</option>
                                                    <option>Medium</option>
                                                    <option>Low</option>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                    <div id="@(Model.Id)_priorityType_conditional" style="display:none">
                                        @*<div class="col-lg-12 col-md-12 col-sm-12 col-12">
                        <div class="form-group">
                            <label class="control-label m-b-5 ">Level:</label>
                            <select id="@(Model.Id)_defaultPriorityLevelsList" name="DefaultPriorityLevels" class="form-control">
                                <option>High</option>
                                <option>Medium</option>
                                <option>Low</option>
                            </select>
                        </div>
                    </div>*@
                                    </div>
                                </div>
                            </div>
                            <div id="@(Model.Id)_startInfo">
                                <div class="row">
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group">
                                            <label class="control-label m-b-5 ">Type:</label>
                                            <select id="@(Model.Id)_startTypesList" onchange="@(Model.Id)_apStartScheduledChanged()" name="StartType" class="form-control">
                                                <option selected="selected">Imediate Initiation</option>
                                                <option>Scheduled</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div id="@(Model.Id)_startType_default">

                                    </div>
                                    <div id="@(Model.Id)_startType_scheduled" style="display:none">
                                        <div id="@(Model.Id)_startType_scheduled_typeSec" class="col-lg-6 col-md-6 col-sm-6 col-12">
                                            <div class="form-group">
                                                <label class="control-label m-b-5 ">Type:</label>
                                                <select id="@(Model.Id)_scheduledStartTypesList" onchange="@(Model.Id)_apScheduledStartTypeChanged()" name="ScheduledStartType" class="form-control">
                                                    <option>Hours</option>
                                                    <option>Days</option>
                                                    <option>Fixed</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div id="@(Model.Id)_defaultStartTypeSec" class="col-lg-6 col-md-6 col-sm-6 col-12">
                                            <div class="form-group">
                                                <label class="control-label m-b-5 ">Value:</label>
                                                <input type="number" value="1" min="0" id="@(Model.Id)_scheduledStartValue" name="ScheduledStartValue" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" required>
                                            </div>
                                        </div>
                                        <div id="@(Model.Id)_fixedStartTypeSec" class="" style="display:none">
                                            <div class="col-lg-6 col-md-6 col-sm-6 col-12">
                                                <div class="form-group">
                                                    <label class="control-label m-b-5 ">Period:</label>
                                                    <select id="@(Model.Id)_scheduledStartPeriod" name="ScheduledStartType" class="form-control">
                                                        <option>None</option>
                                                        <option>Weekly</option>
                                                        <option>Monthly</option>
                                                        <option>Yearly</option>
                                                    </select>
                                                </div>
                                            </div>
                                            <div class="col-lg-6 col-md-6 col-sm-6 col-12">
                                                <div class="form-group">
                                                    <label class="control-label m-b-5 ">Date:</label>
                                                    <input type="text" id="@(Model.Id)_scheduledStartDate" name="ScheduledStartDate" style="width: 100% !important; cursor: default;" class="text-left form-control inline pull-left DatePicker is-calendarsPicker" autocomplete="off">
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div id="@(Model.Id)_notificationsInfo">
                                <ejs-grid id="@(Model.Id)_notificationsGrid" dataSource="@Model.GetNotificationsAsDS()" enableAutoFill="true" columns="@Model.GetNotificationsGridColumns()"
                                          dataBound="dataBoundResponsive" allowExcelExport="true" height="100%" allowPdfExport="true"
                                          hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true" showColumnChooser="false"
                                          allowSorting="true" allowMultiSorting="true" gridLines="Horizontal"
                                          allowPaging="true" allowResizing="true">

                                    <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                    <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="false" allowEditing="true" allowDeleting="false"></e-grid-editSettings>
                                    <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                    <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10", "20", "All" })"></e-grid-pagesettings>
                                </ejs-grid>
                            </div>
                            <div id="@(Model.Id)_apActionsInfo">
                                <ejs-grid id="@(Model.Id)_apActionsGrid" dataSource="@Model.GetAPActionsAsDS()" enableAutoFill="true" columns="@Model.GetAPActionsGridColumns()"
                                          dataBound="dataBoundResponsive" allowExcelExport="true" height="100%" allowPdfExport="true"
                                          hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true" showColumnChooser="false"
                                          allowSorting="true" allowMultiSorting="true" gridLines="Horizontal"
                                          allowPaging="true" allowResizing="true">

                                    <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                    <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="false" allowEditing="true" allowDeleting="false"></e-grid-editSettings>
                                    <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                    <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10", "20", "All" })"></e-grid-pagesettings>
                                </ejs-grid>
                            </div>
                        </div>
                        <div id="@(Model.Id)_task-property-panel" style="height: 100%; display:none">
                            <div class="row">
                                <div class="col-lg-6 col-md-6 col-sm-6 col-12">
                                    <div class="form-group">
                                        <label class="control-label m-b-5 ">Department:</label>
                                        <select id="@(Model.Id)_taskDepartmentIds" name="DepartmentIds" multiple="multiple" class="form-control" onchange="SelectDepartmentPositions('@(Model.Id)_taskDepartmentIds', '@(Model.Id)_taskPositionIds', @(Model.Id)_curDepartments, @(Model.Id)_curPositions);">
                                        </select>
                                    </div>
                                </div>
                                <div class="col-lg-6 col-md-6 col-sm-6 col-12">
                                    <div class="form-group">
                                        <label class="margin-bottom-5 control-label">Position:</label>
                                        <select id="@(Model.Id)_taskPositionIds" name="PositionIds" class="form-control" multiple="multiple" onchange="SelectPositionEmployees('@(Model.Id)_taskPositionIds', '@(Model.Id)_taskEmployeeIds',@(Model.Id)_curPositions, @(Model.Id)_curEmployees);">
                                        </select>
                                    </div>
                                </div>
                            </div>
                            <div class="row m-md-t-5 m-md-b-10">
                                <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div class="form-group">
                                        <label class="margin-bottom-5 control-label">Employee:</label>
                                        <select id="@(Model.Id)_taskEmployeeIds" onchange="if ($('#@(Model.Id)_taskEmployeeIds').val().length > 1) $('#@(Model.Id)_taskAllowAnySec').show(); else $('#@(Model.Id)_taskAllowAnySec').hide();" name="Employee" multiple="multiple" class="form-control">
                                        </select>
                                    </div>
                                </div>
                            </div>
                            <div class="row m-md-t-5 m-md-b-10">
                                <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div class="form-group">
                                        <label class="control-label m-b-5 ">Additional Information:</label>

                                        <div class="btn-group" data-toggle="buttons">
                                            <label class="btn btn-default active">
                                                <input type="checkbox" id="@(Model.Id)_taskIsActive" autocomplete="off"> Active
                                            </label>
                                            <label class="btn btn-default active">
                                                <input type="checkbox" id="@(Model.Id)_taskNotify" autocomplete="off"> Notify Employee
                                            </label>
                                            <label class="btn btn-default">
                                                <input type="checkbox" id="@(Model.Id)_taskIsPoster" autocomplete="off"> Allow Posting
                                            </label>
                                            <label class="btn btn-default" id="@(Model.Id)_taskAllowAnySec" style="display:none">
                                                <input type="checkbox" id="@(Model.Id)_taskAllowAny" autocomplete="off"> Allow Any
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-12">
                                    <button type="button" id="@(Model.Id)_task_savePropertiesBtn" onclick="@(Model.Id)_task_saveProperties()" class="btn btn-success btn-block">
                                        SAVE PROPERTIES
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="property-panel-footer">
                        <div class="row">
                            <div class="col-md-12">
                                <button type="button" id="@(Model.Id)_savePropertiesBtn" onclick="@(Model.Id)_saveProperties()" class="btn btn-success btn-block">
                                    SAVE PROPERTIES
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    #control-container {
        padding: 0px !important;
    }

    .sb-child-row {
        margin-top: 8px;
    }

    .property-section .e-remove-selection {
        cursor: not-allowed;
    }

    .e-remove-selection .property-section-content {
        pointer-events: none;
    }

    .property-section .e-remove-selection {
        cursor: not-allowed;
    }

    .row-header {
        font-size: 13px;
        font-weight: 500;
        padding-left: 10px
    }

    .e-remove-selection .propertypanel-content {
        pointer-events: none;
    }
</style>
<style>
    @@font-face {
        font-family: 'e-ddb-icons';
        src: url(data:application/x-font-ttf;charset=utf-8;base64,) format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    .e-ddb-icons {
        font-family: 'e-ddb-icons';
        speak: none;
        font-size: 16px;
        font-style: normal;
        font-weight: normal;
        font-variant: normal;
        text-transform: none;
        line-height: 1;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }

    .e-basic::before {
        content: "\e726";
    }

    .e-flow::before {
        content: "\e724";
    }

    .e-connector::before {
        content: "\e725";
    }

    .e-favourites::before {
        content: "\e710";
    }

    #container {
        display: block;
    }

    #symbolPalette {
        display: block;
    }
</style>
<style>

    @@font-face {
        font-family: 'e-ddb-icons1';
        src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMj1tSfIAAAEoAAAAVmNtYXDnEOdVAAABiAAAADZnbHlmdC1P4gAAAcgAAAAwaGVhZBJhohMAAADQAAAANmhoZWEIVQQDAAAArAAAACRobXR4CAAAAAAAAYAAAAAIbG9jYQAYAAAAAAHAAAAABm1heHABDgAUAAABCAAAACBuYW1lm+wy9gAAAfgAAAK1cG9zdLnsYngAAASwAAAAMAABAAAEAAAAAFwEAAAAAAAD+AABAAAAAAAAAAAAAAAAAAAAAgABAAAAAQAAgNcenF8PPPUACwQAAAAAANelrs4AAAAA16WuzgAAAAAD+AN6AAAACAACAAAAAAAAAAEAAAACAAgAAgAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQQAAZAABQAAAokCzAAAAI8CiQLMAAAB6wAyAQgAAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA5wDnAAQAAAAAXAQAAAAAAAABAAAAAAAABAAAAAQAAAAAAAACAAAAAwAAABQAAwABAAAAFAAEACIAAAAEAAQAAQAA5wD//wAA5wD//wAAAAEABAAAAAEAAAAAAAAAGAAAAAIAAAAAA/gDegACAAcAACUhCQEhATUhAQQC9P6G/YoBMQFF/YqGAjf+hgH0QwAAAAAAEgDeAAEAAAAAAAAAAQAAAAEAAAAAAAEAEwABAAEAAAAAAAIABwAUAAEAAAAAAAMAEwAbAAEAAAAAAAQAEwAuAAEAAAAAAAUACwBBAAEAAAAAAAYAEwBMAAEAAAAAAAoALABfAAEAAAAAAAsAEgCLAAMAAQQJAAAAAgCdAAMAAQQJAAEAJgCfAAMAAQQJAAIADgDFAAMAAQQJAAMAJgDTAAMAAQQJAAQAJgD5AAMAAQQJAAUAFgEfAAMAAQQJAAYAJgE1AAMAAQQJAAoAWAFbAAMAAQQJAAsAJAGzIERpYWdyYW1fU2hhcGVzX0ZPTlRSZWd1bGFyRGlhZ3JhbV9TaGFwZXNfRk9OVERpYWdyYW1fU2hhcGVzX0ZPTlRWZXJzaW9uIDEuMERpYWdyYW1fU2hhcGVzX0ZPTlRGb250IGdlbmVyYXRlZCB1c2luZyBTeW5jZnVzaW9uIE1ldHJvIFN0dWRpb3d3dy5zeW5jZnVzaW9uLmNvbQAgAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAUgBlAGcAdQBsAGEAcgBEAGkAYQBnAHIAYQBtAF8AUwBoAGEAcABlAHMAXwBGAE8ATgBUAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAVgBlAHIAcwBpAG8AbgAgADEALgAwAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQARgBvAG4AdAAgAGcAZQBuAGUAcgBhAHQAZQBkACAAdQBzAGkAbgBnACAAUwB5AG4AYwBmAHUAcwBpAG8AbgAgAE0AZQB0AHIAbwAgAFMAdAB1AGQAaQBvAHcAdwB3AC4AcwB5AG4AYwBmAHUAcwBpAG8AbgAuAGMAbwBtAAAAAAIAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgECAQMABlNoYXBlcwAA) format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    .e-ddb-icons1 {
        font-family: 'e-ddb-icons1';
        speak: none;
        font-size: 16px;
        font-style: normal;
        font-weight: normal;
        font-variant: normal;
        text-transform: none;
        line-height: 1;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }

    .sb-mobile-palette {
        width: 240px;
        height: 100%;
        float: left;
    }

    .sb-mobile-palette-bar {
        display: none;
    }

    .sb-mobile-diagram {
        width: calc(100% - 242px);
        height: 100%;
        float: left;
    }

    @@media (max-width: 550px) {

        .sb-mobile-palette {
            z-index: 19;
            position: absolute;
            display: none;
            transition: transform 300ms linear, visibility 0s linear 300ms;
            width: 39%;
            height: 100%;
        }

        .sb-mobile-palette-bar {
            display: block;
            width: 100%;
            background: #fafafa;
            padding: 10px 10px;
            border: 0.5px solid #e0e0e0;
            min-height: 40px;
        }

        .sb-mobile-diagram {
            width: 100%;
            height: 100%;
            float: left;
            left: 0px;
        }

        #palette-icon {
            font-size: 20px;
        }
    }

    .sb-mobile-palette-open {
        position: absolute;
        display: block;
        right: 15px;
    }

    .e-toggle-palette::before {
        content: "\e700"
    }
</style>

<script>
    var @(Model.Id)_curDepartments = [];
    var @(Model.Id)_curPositions = [];
    var @(Model.Id)_curEmployees = [];

    $(document).ready(function () {
        var options = {
            buttonWidth: '100%',
            includeSelectAllOption: true,
            enableFiltering: false,
            enableClickableOptGroups: true,
            includeResetOption: true,
            includeResetDivider: true,
            enableCollapsibleOptGroups: true
        };
        $('#@(Model.Id)_apDepartmentIds').multiselect({
            buttonWidth: '100%',
            includeSelectAllOption: true,
            enableFiltering: false,
            enableClickableOptGroups: true,
            includeResetOption: true,
            includeResetDivider: true,
            enableCollapsibleOptGroups: true,
            onDeselectAll: function (e) {
            },
            onChange: function (option, checked, select) {
                //SelectDepartmentPositions('@(Model.Id)_apDepartmentIds', '@(Model.Id)_apPositionIds', @(Model.Id)_curDepartments, @(Model.Id)_curPositions);
            }
            //onSelectAll: SelectAPDepartmentPositions()
        });
        $('#@(Model.Id)_apPositionIds').multiselect(options);
        $('#@(Model.Id)_viewFormFieldsList').multiselect(options);
        $('#@(Model.Id)_apPositionIds').multiselect({
            onChange: function (option, checked, select) {
                @*SelectPositionEmployees('@(Model.Id)_apPositionIds', '@(Model.Id)_apEmployeeIds',@(Model.Id)_curPositions, @(Model.Id)_curEmployees);*@
            }
        });
        $('#@(Model.Id)_apEmployeeIds').multiselect(options);

        $('#@(Model.Id)_viewCustomFormFieldTypesList').multiselect(options);
        $('#@(Model.Id)_viewCustomTBFormFieldTypesList').multiselect(options);

        $("#@(Model.Id)_addToApprovalRouteBtn").on('click', function (args) {
            var apGrid = $("#@(Model.Id)_ApprovalRouteGrid")[0].ej2_instances[0];
            var depIds = $("#@(Model.Id)_apDepartmentIds").val();
            var posIds = $("#@(Model.Id)_apPositionIds").val();
            var selectedEmpIds = $("#@(Model.Id)_apEmployeeIds").val();
            var emps = curAPEmployees;

            var employees = [];
            for (var i = 0; i < selectedEmpIds.length; i++) {
                var emp = emps.find(x => x.id == selectedEmpIds[i]);
                employees.push(
                    {
                        employeeId: emp.id,
                        name: emp.name,
                        department: { id: emp.departmentId, name: emp.depName },
                        position: { id: emp.positionId, title: emp.posName }
                    }
                );
            }

            var curEmps = apGrid.dataSource.filter(function (e) { return e.employees === employees; });

            if (depIds.length == 0 || posIds.length == 0 || employees.length == 0 || curEmps.length > 0)
                return;

            var isActive = $("#@(Model.Id)_APIsActive").parent().hasClass('active');
            var notifyEmployee = $("#@(Model.Id)_APNotify").parent().hasClass('active');
            var isPoster = $("#@(Model.Id)_APIsPoster").parent().hasClass('active');
            var isAny = $("#@(Model.Id)_APAllowAny").parent().hasClass('active');

            var getAllEmployeeNames = '';
            var getAllPositionTitles = '';
            var getAllDepartmentNames = '';
            for (var i = 0; i < employees.length; i++) {
                getAllEmployeeNames += employees[i].name + ((i == employees.length-1)? '' : ', ');
                getAllPositionTitles += employees[i].position.title + ((i == employees.length-1) ? '' : ', ');
                getAllDepartmentNames += employees[i].department.name + ((i == employees.length-1) ? '' : ', ');
            }

            var tasks = $('#@(Model.Id)_LRTasksGrid')[0].ej2_instances[0].dataSource;

            for (var i = 0; i < tasks.length; i++) {
                tasks[i].apId = getAllEmployeeNames;
                apGrid.childGrid.dataSource.push(tasks[i]);
            }
            var taskTemplate = { taskTemplateItems: tasks };
            var apRoute =  {
                id: '',
                active: isActive,
                isAny: isAny,
                notifyEmployee: notifyEmployee,
                isPoster: isPoster,
                approvalRouteItemEmployees: employees,
                taskTemplate: taskTemplate,
                getAllEmployeeNames: getAllEmployeeNames,
                getAllPositionTitles: getAllPositionTitles,
                getAllDepartmentNames: getAllDepartmentNames
            }

            apRoute.id = apRoute.getAllEmployeeNames;
            apRoute.apId = apRoute.getAllEmployeeNames;

            apGrid.dataSource.push(apRoute);
            apGrid.refresh();
        })

        $('#@(Model.Id)_addLRTaskBtn').on('click', function () {
            var isCollapsed = $('#@(Model.Id)_addTaskForm').css('display') == 'none';

            if (isCollapsed) {
                $('#@(Model.Id)_addLRTaskBtnSection').slideUp(200);
                $('#@(Model.Id)_addTaskForm').slideDown(200);
                setTimeout(function () { $('#@(Model.Id)_addLRTaskBtn', '#@(Model.Id)_addLRTaskBtnSection').html('<i class="fa fa-arrow-up p-r-5"></i> Cancel Add') }, 200)
                $('#@(Model.Id)_addLRTaskBtnSection').slideDown(200);

            } else {
                $('#@(Model.Id)_addLRTaskBtnSection').slideUp(200);
                $('#@(Model.Id)_addTaskForm').slideUp(200);
                setTimeout(function () { $('#@(Model.Id)_addLRTaskBtn', '#@(Model.Id)_addLRTaskBtnSection').html('<i class="fa fa-plus p-r-5"></i> Add Task') }, 200)
                $('#@(Model.Id)_addLRTaskBtnSection').slideDown(200);
            }
        });
        $("#@(Model.Id)_addTaskBtn").on('click', function (args) {
            var taskGrid = $("#@(Model.Id)_LRTasksGrid")[0].ej2_instances[0];

            var depIds = $("#@(Model.Id)_taskDepartmentIds").val();
            var posIds = $("#@(Model.Id)_taskPositionIds").val();
            var empIds = $("#@(Model.Id)_taskEmployeeIds").val();
            var emps = curTaskEmployees;

            var employees = [];
            for (var i = 0; i < empIds.length; i++) {
                var emp = emps.find(x => x.id == empIds[i]);
                employees.push(
                    {
                        id: emp.id,
                        name: emp.name,
                        department: { id: emp.departmentId, name: emp.depName },
                        position: { id: emp.positionId, title: emp.posName }
                    }
                );
            }

            var getAllEmployeeNames = '';
            var getAllPositionTitles = '';
            var getAllDepartmentNames = '';
            for (var i = 0; i < employees.length; i++) {
                getAllEmployeeNames += employees[i].name + ((i == employees.length - 1) ? '' : ', ');
                getAllPositionTitles += employees[i].position.title + ((i == employees.length - 1) ? '' : ', ');
                getAllDepartmentNames += employees[i].department.name + ((i == employees.length - 1) ? '' : ', ');
            }

            var curEmps = taskGrid.dataSource.filter(function (e) { return e.getAllEmployeeNames === getAllEmployeeNames && e.getAllPositionTitles === getAllPositionTitles && e.getAllDepartmentNames === getAllDepartmentNames; });

            if (depIds.length == 0 || posIds.length == 0 || employees.length == 0 || curEmps.length > 0)
                return;

            var isActive = $("#@(Model.Id)_taskIsActive").parent().hasClass('active');
            var notifyEmployee = $("#@(Model.Id)_taskNotify").parent().hasClass('active');
            var isAny = $("#@(Model.Id)_taskAllowAny").parent().hasClass('active');
            var taskDescription = $("#@(Model.Id)_lrTaskDescription").val();

            var task = {
                id: '',
                active: isActive,
                isAny: isAny,
                taskDescription: taskDescription,
                notifyEmployee: notifyEmployee,
                employees: employees,
                getAllEmployeeNames: getAllEmployeeNames,
                getAllPositionTitles: getAllPositionTitles,
                getAllDepartmentNames: getAllDepartmentNames
            }
            task.id = task.getAllEmployeeNames;
            taskGrid.dataSource.push(task);
            taskGrid.refresh();
        });

        $('#@(Model.Id)_viewCustomFormFieldTypesList').on('change', function (e)
        {
            let type = $(this).val();
            switch (type) {
                case "Text Box":
                    $('#@(Model.Id)_customTextBoxFieldSec').show();
                    $('#@(Model.Id)_customDateFieldSec').hide();
                    $('#@(Model.Id)_customDateRangeFieldSec').hide();
                    $('#@(Model.Id)_customDropDownFieldSec').hide();
                    break;
                case "Dropdown":
                    $('#@(Model.Id)_customDropDownFieldSec').show();
                    $('#@(Model.Id)_customTextBoxFieldSec').hide();
                    $('#@(Model.Id)_customDateFieldSec').hide();
                    $('#@(Model.Id)_customDateRangeFieldSec').hide();
                    break;
                case "Checkbox":
                    //$('@(Model.Id)_customCheckboxFieldSec').show();
                    break;
                case "Date":
                    $('#@(Model.Id)_customDateFieldSec').show();
                    $('#@(Model.Id)_customTextBoxFieldSec').hide();
                    $('#@(Model.Id)_customDropDownFieldSec').hide();
                    $('#@(Model.Id)_customDateRangeFieldSec').hide();
                    break;
                case "Date Range":
                    $('#@(Model.Id)_customDateRangeFieldSec').show();
                    $('#@(Model.Id)_customDateFieldSec').show();
                    $('#@(Model.Id)_customTextBoxFieldSec').hide();
                    $('#@(Model.Id)_customDropDownFieldSec').hide();
                    break;
            }
        });
    });
</script>

<script>
    let curNodeType = '';
    let @(Model.Id)_isEditingAP = false;
    let @(Model.Id)_isEditingPosLoadedAP = false;
    let @(Model.Id)_isEditingEmpLoadedAP = false;
    let @(Model.Id)_apSelectPositions;
    let @(Model.Id)_apSelectEmployees;

    function @(Model.Id)_workflowSelectionChanged(args) {
        //console.log(args);
        if (typeof (args.newValue) !== 'undefined' && args.newValue.length > 0) {
            let selectedNode = args.newValue[0];
            if (selectedNode.properties.id.includes("Approval Route")) {
                curNodeType = 'approval-route';

                $('#@(Model.Id)_task-property-panel').hide();
                $('#@(Model.Id)_approval-route-panel').show();
                cERP.appServices.setup.departmentSetup.department.getDepartments().done(function (data) {
                    departments = [];
                    $.each(data, function (i, d) {
                        departments.push({ label: d.name, value: d.id });
                    });

                    $("#@(Model.Id)_apDepartmentIds").multiselect('dataprovider', departments);
                    $("#@(Model.Id)_apDepartmentIds").change();
                    var viewFormFieldsGrid = $('#@(Model.Id)_viewFormFieldsGrid')[0].ej2_instances[0];
                    var notificationsGrid = $('#@(Model.Id)_notificationsGrid')[0].ej2_instances[0];
                    var actionsGrid = $('#@(Model.Id)_apActionsGrid')[0].ej2_instances[0];

                    if (typeof selectedNode.addInfo !== 'undefined')
                    {
                        @(Model.Id)_isEditingAP = true;
                        @(Model.Id)_isEditingPosLoadedAP = false;
                        @(Model.Id)_isEditingEmpLoadedAP = false;

                        console.log(selectedNode.addInfo);

                        let priorityType = selectedNode.addInfo.priority.type;
                        let defaultLevel = selectedNode.addInfo.priority.default.level;

                        $('#@(Model.Id)_priorityTypesList').val(priorityType);
                        $('#@(Model.Id)_priorityTypesList').change();
                        $('#@(Model.Id)_defaultPriorityLevelsList').val(defaultLevel);

                        let startType = selectedNode.addInfo.start.type;
                        let defaultStartValue = selectedNode.addInfo.start.default.value;
                        let scheduledStartType = selectedNode.addInfo.start.scheduled.type;
                        let scheduledStartDate = selectedNode.addInfo.start.scheduled.date;

                        $('#@(Model.Id)_startTypesList').val(startType);
                        $('#@(Model.Id)_startTypesList').change();
                        $('#@(Model.Id)_scheduledStartValue').val(defaultStartValue);
                        $('#@(Model.Id)_scheduledStartTypesList').val(scheduledStartType);
                        $('#@(Model.Id)_scheduledStartTypesList').change();
                        $('#@(Model.Id)_scheduledStartDate').val(scheduledStartDate);

                        var departmentIds = selectedNode.addInfo.selection.departmentIds;
                        var employeeIds = selectedNode.addInfo.selection.employeeIds;
                        var positionIds = selectedNode.addInfo.selection.positionIds;

                        var isActive = selectedNode.addInfo.selection.isActive;

                        var notifyEmployee = selectedNode.addInfo.selection.notifyEmployee;
                        var isPoster = selectedNode.addInfo.selection.isPoster;
                        var allowAny = selectedNode.addInfo.selection.allowAny;

                        if (isActive)
                            $('#@(Model.Id)_APIsActive').parent().addClass('active');
                        else
                            $('#@(Model.Id)_APIsActive').parent().removeClass('active');

                        if (notifyEmployee)
                            $('#@(Model.Id)_APNotify').parent().addClass('active');
                        else
                            $('#@(Model.Id)_APNotify').parent().removeClass('active');

                        if (isPoster)
                            $('#@(Model.Id)_APIsPoster').parent().addClass('active');
                        else
                            $('#@(Model.Id)_APIsPoster').parent().removeClass('active');

                        if (allowAny)
                            $('#@(Model.Id)_APAllowAny').parent().addClass('active');
                        else
                            $('#@(Model.Id)_APAllowAny').parent().removeClass('active');

                        var formFields = args.newValue[0].addInfo.view.formFields;
                        @(Model.Id)_apSelectPositions = positionIds;
                        @(Model.Id)_apSelectEmployees = employeeIds;
                        $('#@(Model.Id)_apDepartmentIds').multiselect('select', departmentIds);
                        $("#@(Model.Id)_apDepartmentIds").change();

                        viewFormFieldsGrid.dataSource = formFields;
                        viewFormFieldsGrid.refresh();

                        @(Model.Id)_populateFormFieldsSelection();

                        var notificationSettings = args.newValue[0].addInfo.notifications.dataSource;

                        notificationsGrid.dataSource = notificationSettings;
                        notificationsGrid.refresh();

                        var apActions = args.newValue[0].addInfo.actions.dataSource;

                        actionsGrid.dataSource = apActions;
                        actionsGrid.refresh();
                    }
                    else {
                        $('#@(Model.Id)_apDepartmentIds').multiselect('deselectAll', true);
                        $('#@(Model.Id)_apPositionIds').multiselect('deselectAll', true);
                        $('#@(Model.Id)_apEmployeeIds').multiselect('deselectAll', true);

                        $('#@(Model.Id)_APIsActive').parent().removeClass('active');
                        $('#@(Model.Id)_APNotify').parent().removeClass('active');
                        $('#@(Model.Id)_APIsPoster').parent().removeClass('active');
                        $('#@(Model.Id)_APAllowAny').parent().removeClass('active');

                        viewFormFieldsGrid.dataSource = rfdc()(viewFormFields);
                        viewFormFieldsGrid.refresh();

                        notificationsGrid.dataSource = rfdc()(notificationsSettings);
                        notificationsGrid.refresh();

                        actionsGrid.dataSource = rfdc()(_apActions);
                        actionsGrid.refresh();
                    }
                });
                $(`#@(Model.Id)_diagramArea`).removeClass('col-lg-12');
                $(`#@(Model.Id)_diagramArea`).addClass('col-lg-6');
                setTimeout(function () {
                    $(`#@(Model.Id)_propertySection`).show();
                    $(`#@(Model.Id)_container`)[0].ej2_instances[0].refresh();

                }, 500);
            }
            else if (args.newValue[0].properties.id.includes("Task"))
            {
                curNodeType = 'task';

                $('#@(Model.Id)_approval-route-panel').hide();
                $('#@(Model.Id)_task-property-panel').show();
                cERP.appServices.setup.departmentSetup.department.getDepartments().done(function (data) {
                    departments = [];
                    $.each(data, function (i, d) {
                        departments.push({ label: d.name, value: d.id });
                    });

                    $("#@(Model.Id)_taskDepartmentIds").multiselect('dataprovider', departments);
                    $("#@(Model.Id)_taskDepartmentIds").change();
                });

                $(`#@(Model.Id)_diagramArea`).removeClass('col-lg-12');
                $(`#@(Model.Id)_diagramArea`).addClass('col-lg-6');
                setTimeout(function () {
                    $(`#@(Model.Id)_propertySection`).show();
                    $(`#@(Model.Id)_container`)[0].ej2_instances[0].refresh();

                    console.log(args.newValue[0].properties);
                    console.log(args.newValue[0].properties.addInfo);
                }, 500);
            }
            else {
                curNodeType = '';
                if ($(`#@(Model.Id)_diagramArea`).hasClass('col-lg-6')) {
                    $(`#@(Model.Id)_diagramArea`).removeClass('col-lg-6');
                    $(`#@(Model.Id)_diagramArea`).addClass('col-lg-12');

                    $(`#@(Model.Id)_propertySection`).hide();
                    setTimeout(function () {
                        $(`#@(Model.Id)_container`)[0].ej2_instances[0].refresh();
                    }, 500);
                }
            }
        }
        else {
            $(`#@(Model.Id)_diagramArea`).removeClass('col-lg-6');
            $(`#@(Model.Id)_diagramArea`).addClass('col-lg-12');

            $(`#@(Model.Id)_propertySection`).hide();
            setTimeout(function () {
                $(`#@(Model.Id)_container`)[0].ej2_instances[0].refresh();
            }, 500);
        }
    }
    function @(Model.Id)_apPriorityChanged() {
        let priority = $('#@(Model.Id)_priorityTypesList').val();
        if (priority == 'Default') {
            $('#@(Model.Id)_priorityType_default').show();
            $('#@(Model.Id)_priorityType_conditional').hide();
        }
        else if (priority == 'Conditional') {
            $('#@(Model.Id)_priorityType_conditional').show();
            $('#@(Model.Id)_priorityType_default').hide();
        }
    }
    function @(Model.Id)_saveProperties() {
        //var state = objectifyForm($('#@(Model.Id)_approval-route-panel').find("select, textarea, input").serializeArray());
        console.log($('#@(Model.Id)_notificationsGrid')[0].ej2_instances[0].dataSource);
        switch (curNodeType) {
            case 'approval-route':
                if (ValidateForm('@(Model.Id)_approval-route-panel')) {
                    var state = {
                        priority: {
                            type: $('#@(Model.Id)_priorityTypesList').val(),
                            default: { level: $('#@(Model.Id)_defaultPriorityLevelsList').val() },
                            conditional: {  },
                        },
                        start: {
                            type: $('#@(Model.Id)_startTypesList').val(),
                            default: { value: $('#@(Model.Id)_scheduledStartValue').val() },
                            scheduled: {
                                type: $('#@(Model.Id)_scheduledStartTypesList').val(),
                                date: $('#@(Model.Id)_scheduledStartDate').val(),
                            }
                        },
                        selection: {
                            employeeIds: $('#@(Model.Id)_apEmployeeIds').val(),
                            positionIds: $('#@(Model.Id)_apPositionIds').val(),
                            departmentIds: $('#@(Model.Id)_apDepartmentIds').val(),

                            isActive: $('#@(Model.Id)_APIsActive').parent().hasClass('active'),
                            notifyEmployee: $('#@(Model.Id)_APNotify').parent().hasClass('active'),
                            isPoster: $('#@(Model.Id)_APIsPoster').parent().hasClass('active'),
                            allowAny: $('#@(Model.Id)_APAllowAny').parent().hasClass('active'),
                        },
                        view: {
                            formFields: rfdc()($('#@(Model.Id)_viewFormFieldsGrid')[0].ej2_instances[0].dataSource)
                        },
                        notifications: {
                            dataSource: rfdc()($('#@(Model.Id)_notificationsGrid')[0].ej2_instances[0].dataSource)
                        },
                        actions: {
                            dataSource: rfdc()($('#@(Model.Id)_apActionsGrid')[0].ej2_instances[0].dataSource)
                        }
                    };

                    if (state.selection.employeeIds.length == 0 || state.selection.positionIds.length == 0 || state.selection.departmentIds.length == 0)
                        return;

                    var curItem = $(`#@(Model.Id)_container`)[0].ej2_instances[0].selectedItems.properties.nodes[0].addInfo = state;
                    console.log(curItem);
                }
                break;
            case 'task':
                break;
        }
    }

    function @(Model.Id)_apStartScheduledChanged() {
        let type = $('#@(Model.Id)_startTypesList').val();
        if (type == 'Imediate Initiation') {
            $('#@(Model.Id)_startType_default').show();
            $('#@(Model.Id)_startType_scheduled').hide();
        }
        else if (type == 'Scheduled') {
            $('#@(Model.Id)_startType_scheduled').show();
            $('#@(Model.Id)_startType_default').hide();
        }
    }
    function @(Model.Id)_apScheduledStartTypeChanged() {
        let type = $('#@(Model.Id)_scheduledStartTypesList').val();
        if (type == 'Hours' || type == 'Days') {
            $('#@(Model.Id)_startType_scheduled_typeSec').addClass('col-lg-6 col-md-6 col-sm-6 col-12');
            $('#@(Model.Id)_startType_scheduled_typeSec').removeClass('col-lg-12 col-md-12 col-sm-12 col-12');

            $('#@(Model.Id)_defaultStartTypeSec').show();
            $('#@(Model.Id)_fixedStartTypeSec').hide();
        }
        else if (type == 'Fixed') {
            $('#@(Model.Id)_startType_scheduled_typeSec').addClass('col-lg-12 col-md-12 col-sm-12 col-12');
            $('#@(Model.Id)_startType_scheduled_typeSec').removeClass('col-lg-6 col-md-6 col-sm-6 col-12');

            $('#@(Model.Id)_fixedStartTypeSec').show();
            $('#@(Model.Id)_defaultStartTypeSec').hide();
        }
    }

    function @(Model.Id)_addNewCustomFormField()
    {
        if (ValidateForm('@(Model.Id)_customFieldsInfo')) {
            let grid = $('#@(Model.Id)_workshiftsCustomFormFieldsGrid')[0].ej2_instances[0];

            let type = $('#@(Model.Id)_viewCustomTBFormFieldTypesList').val();
            let fieldName = $('#@(Model.Id)_customFieldName').val();

            let customField = { type: type, fieldName: fieldName };
            if (grid.dataSource.filter(function (x) { return x.fieldName == customField.fieldName }).length > 0)
                return;

            switch (type) {
                case "Text Box":
                    customField.tbType = $('#@(Model.Id)_viewCustomTBFormFieldTypesList').val();
                    customField.minLength = $('#@(Model.Id)_customTBFieldMinLenght').val();
                    customField.maxLength = $('#@(Model.Id)_customTBFieldMaxLenght').val();
                    break;
                case "Dropdown":
                    break;
                case "Checkbox":
                    break;
                case "Date":
                    break;
                case "Date Range":
                    break;
            }

            let field = { id: viewFormFields.length, viewIndex: viewFormFields.length, name: customField.fieldName, mappingName: customField.fieldName, fieldTypeDescription: "Custom", fieldType: 1, isReadonly: true, isExternal: false };
            viewFormFields.push(field);
            formFields.push({ label: field.name, value: field.id, fieldType: field.fieldTypeDescription, isExternal: field.isExternal });

            grid.dataSource.push(customField);
            grid.refresh();

            @(Model.Id)_populateFormFieldsSelection();
        }
    }

    function @(Model.Id)_getNodeDefaults(obj, diagram) {
        if (obj.width === undefined) {
            obj.width = 145;
        } else {
            //var ratio = 100 / obj.width;
            obj.width = 100;
        }
        obj.style = { fill: '#357BD2', strokeColor: 'white' };

        //Set ports
        obj.ports = getPorts(obj);
        return obj;
    }

    function @(Model.Id)_getSymbolInfo(symbol) {
        return { fit: true };
    }

    function @(Model.Id)_getConnectorDefaults(obj, diagram) {

        if (obj.id === 'connector9') {
            obj.segments = [{ direction: 'Top', length: 120, type: 'Orthogonal' }];
        }
        if (obj.id === 'connector10') {
            obj.segments = [{ direction: 'Right', length: 100, type: 'Orthogonal' }];
        }
        if (obj.id.indexOf('connector') !== -1) {
            obj.type = 'Orthogonal';
            obj.targetDecorator = { shape: 'Arrow', width: 10, height: 10 };
        }
    }

    function getPorts(obj) {
        var ports = [
            { id: 'port1', shape: 'Circle', offset: { x: 0, y: 0.5 } },
            { id: 'port2', shape: 'Circle', offset: { x: 0.5, y: 1 } },
            { id: 'port3', shape: 'Circle', offset: { x: 1, y: .5 } },
            { id: 'port4', shape: 'Circle', offset: { x: .5, y: 0 } }
        ];
        return ports;

    }

    function @(Model.Id)_getSymbolNodes(symbol, diagram) {
        if (symbol.id === 'Terminator' || symbol.id === 'Process') {
            symbol.width = 80;
            symbol.height = 40;
        }
        else if (symbol.id === 'Decision' || symbol.id === 'Document' || symbol.id === 'PreDefinedProcess' ||
            symbol.id === 'PaperTap' || symbol.id === 'DirectData' || symbol.id === 'MultiDocument' || symbol.id === 'Data') {
            symbol.width = 50;
            symbol.height = 40;
        }
        else {
            symbol.width = 50;
            symbol.height = 50;
        }
        symbol.style.strokeWidth = 2;
    }

    function @(Model.Id)_diagramCreated() {
        @(Model.Id)_addEvents();
        setTimeout(function () {
            $(`#@(Model.Id)_container`)[0].ej2_instances[0].refresh();
        }, 5000)
    }

    function @(Model.Id)_addEvents() {
        var isMobile = window.matchMedia('(max-width:550px)').matches;
        if (isMobile) {
            var paletteIcon = document.getElementById('palette-icon');
            if (paletteIcon) {
                paletteIcon.addEventListener('click', openPalette, false);
            }
        }
    }

</script>

<script>
    function @(Model.Id)_ApprovalRouteActionBegin(args) {
        if (args.requestType == "save") {

        }
        else if (args.requestType == "delete") {
            var data = args.data;
            for (var i = 0; i < data.length; i++) {
                var apId = data[i].apId;
                this.childGrid.dataSource.removeIf(function (x) { return x.apId == apId; });
            }
        }
    }
    function @(Model.Id)_ApprovalRouteCommandClick(args) {
        if (args.commandColumn.type == "MoveUp") {
            var grid = $('#@(Model.Id)_ApprovalRoute')[0].ej2_instances[0];
            var rI = args.rowData.routeIndex - 1;
            if (rI < 1) return;
            array_move(grid.dataSource, rI, rI - 1);
            for (var i = 0; i < grid.dataSource.length; i++) {
                grid.dataSource[i].routeIndex = i + 1;
            }
            grid.refresh();
        }
        if (args.commandColumn.type == "MoveDown") {
            var grid = $('#@(Model.Id)_ApprovalRoute')[0].ej2_instances[0];
            var rI = args.rowData.routeIndex - 1;
            if (rI == grid.dataSource.length) return;
            array_move(grid.dataSource, rI, rI + 1);
            for (var i = 0; i < grid.dataSource.length; i++) {
                grid.dataSource[i].routeIndex = i + 1;
            }
            grid.refresh();

        }
        if (args.commandColumn.type == "Edit") {

        }
        else if (args.commandColumn.type == "Copy") {
            this.copy(false);
        }
    }
    function @(Model.Id)_ApprovalRouteToolbarClick(args) {
        var gridObj = document.getElementById("@(Model.Id)_ApprovalRouteGrid").ej2_instances[0];
        if (args.item.id === '@(Model.Id)_ApprovalRouteGrid_pdfexport') {
            gridObj.pdfExport();
        }
        if (args.item.id === '@(Model.Id)_ApprovalRouteGrid_excelexport') {
            gridObj.excelExport();
        }
        if (args.item.id === '@(Model.Id)_ApprovalRouteGrid_csvexport') {
            gridObj.csvExport();
        }
        if (this.getSelectedRecords().length > 0) {
            var withHeader = false;
            if (args.item.id === 'copyHeader') {
                withHeader = true;
            }
            this.copy(withHeader);
        }
        else {
            if (args.item.id === 'copyHeader') {
                var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                dialogObj.show();
            }
            else if (args.item.id === 'copy') {
                var dialogObj = document.getElementById('alert_dialog_1').ej2_instances[0];
                dialogObj.show();
            }
        }
        if (args.item.id === 'showActions') {
            gridObj.toolbar = [{ text: "Hide Actions", tooltipText: "Actions", prefixIcon: "e-custom-hide-actions", id: "hideActions" }, { text: "Toggle Grouping", tooltipText: "Grouping", prefixIcon: "e-custom-group-toggle", id: "toggleGrouping" }, { text: "Move Up", tooltipText: "Move Up", prefixIcon: "e-c-moveup", id: "moveUp" }, { text: "Move Down", tooltipText: "Move Down", prefixIcon: "e-c-movedown", id: "moveDown" }, { text: "Toggle Detailed", tooltipText: "Toggle Detailed", prefixIcon: "e-toggledetailed", id: "toggleDetailed" }, { text: "ExcelExport", tooltipText: "Excel Export", prefixIcon: "e-excelexport", id: "excelexport", align: 'Right' }, "CsvExport", "Print", "Search", "Delete", { text: "Copy", tooltipText: "Copy", prefixIcon: "e-copy", id: "copy" }, "Search", { text: "Copy With Header", tooltipText: "Copy With Header", prefixIcon: "e-copy", id: "copyHeader" }, "ColumnChooser"];
            gridObj.refresh();
        }
        if (args.item.id === 'hideActions') {
            gridObj.toolbar = [{ text: "Show Actions", tooltipText: "Actions", prefixIcon: "e-custom-show-actions", id: "showActions" }, "Search", "ColumnChooser"];
            gridObj.showColumnChooser = true;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleGrouping') {
            gridObj.allowGrouping = !gridObj.allowGrouping;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleDetailed') {
            var visCount = 0;
            for (var i = 0; i < gridObj.columns.length; i++) {
                if (gridObj.columns[i].visible) visCount++;
            }
            if (visCount == gridObj.columns.length) {
                for (var i = 0; i < gridObj.columns.length; i++) {
                    var col = gridObj.columns[i];
                    if (typeof col.customAttributes != 'undefined' && typeof col.customAttributes.id != 'undefined' && col.customAttributes.id == 'detailed')
                        gridObj.showHider.hide(col.headerText, 'headerText');
                    else if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
            else {
                for (var i = 0; i < gridObj.columns.length; i++) {
                    var col = gridObj.columns[i];
                    if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
        }

        if (args.item.id === 'moveUp') {
            var selectedIndexes = gridObj.selectionModule.selectedRowIndexes;
            var selected = gridObj.getSelectedRecords();
            for (var i = 0; i < selected.length; i++) {
                var cur = selected[i];
                let rI = cur.routeIndex - 1;
                if (rI - 1 < 0)
                    break;
                selectedIndexes.push(rI - 1);
                array_move(gridObj.dataSource, rI, rI - 1);
            }
            for (var i = 0; i < gridObj.dataSource.length; i++) {
                if (typeof (gridObj.dataSource[i]) !== 'undefined') {
                    gridObj.dataSource[i].routeIndex = i + 1;
                }
            }
            gridObj.refresh();
            setTimeout(function () { gridObj.selectionModule.selectRows(selectedIndexes) }, 100);
        }
        if (args.item.id === 'moveDown') {
            var selectedIndexes;
            var selected = gridObj.getSelectedRecords()
            for (var i = selected.length - 1; i > -1; i--) {
                var cur = selected[i];
                let rI = cur.routeIndex - 1;
                if (rI + 1 > gridObj.dataSource.length - 1)
                    break;
                selectedIndexes.push(rI + 1);
                array_move(gridObj.dataSource, rI, rI + 1);
            }
            for (var i = 0; i < gridObj.dataSource.length; i++) {
                if (typeof (gridObj.dataSource[i]) !== 'undefined') {
                    gridObj.dataSource[i].routeIndex = i + 1;
                }
            }
            gridObj.refresh();
            setTimeout(function () { gridObj.selectionModule.selectRows(selectedIndexes) }, 100);
        }
        if (args.requestType == "beginEdit") {
            var Obj = $("#@(Model.Id)_ApprovalRoute")[0].ej2_instances[0];
            var ajax = new ej.base.Ajax('?handler=ApprovalRouteData', 'GET');
            ajax.send();
            ajax.onSuccess = function (data) {
                var ds = JSON.parse(data);
                ds.push(args.rowData.valueTypeForDescription);
                Obj.columns[4].edit.params.dataSource = ds;
                //ddldist.dataBind();
            };

            Obj.columns[4].allowEditing = false;
        }
    }
    function @(Model.Id)_ApprovalRouteRowDataBound(args) {
        if (args.data.isDepartmentHead || args.data.isReportingTo) {
            $(".e-" + "DeleteButton", args.row).addClass("e-hide");
        }
        else {
            $(".e-" + "DeleteButton", args.row).removeClass("e-hide");

        }
    }

    function @(Model.Id)_TaskActionBegin(args) {
        if (args.requestType == "save") {

        }
        else if (args.requestType == "delete") {
        }
    }
    function @(Model.Id)_TaskCommandClick(args) {
        if (args.commandColumn.type == "MoveUp") {
            var grid = $('#@(Model.Id)_TasksGrid')[0].ej2_instances[0];
            var rI = args.rowData.routeIndex - 1;
            if (rI < 1) return;
            array_move(grid.dataSource, rI, rI - 1);
            for (var i = 0; i < grid.dataSource.length; i++) {
                grid.dataSource[i].routeIndex = i + 1;
            }
            grid.refresh();
        }
        if (args.commandColumn.type == "MoveDown") {
            var grid = $('#@(Model.Id)_TasksGrid')[0].ej2_instances[0];
            var rI = args.rowData.routeIndex - 1;
            if (rI == grid.dataSource.length) return;
            array_move(grid.dataSource, rI, rI + 1);
            for (var i = 0; i < grid.dataSource.length; i++) {
                grid.dataSource[i].routeIndex = i + 1;
            }
            grid.refresh();

        }
        if (args.commandColumn.type == "Edit") {

        }
        else if (args.commandColumn.type == "Copy") {
            this.copy(false);
        }
    }
    function @(Model.Id)_TaskToolbarClick(args) {
        var gridObj = document.getElementById("@(Model.Id)_TasksGrid").ej2_instances[0];
        if (args.item.id === '@(Model.Id)_TasksGrid_pdfexport') {
            gridObj.pdfExport();
        }
        if (args.item.id === '@(Model.Id)_TasksGrid_excelexport') {
            gridObj.excelExport();
        }
        if (args.item.id === '@(Model.Id)_TasksGrid_csvexport') {
            gridObj.csvExport();
        }
        if (this.getSelectedRecords().length > 0) {
            var withHeader = false;
            if (args.item.id === 'copyHeader') {
                withHeader = true;
            }
            this.copy(withHeader);
        }
        else {
            if (args.item.id === 'copyHeader') {
                var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                dialogObj.show();
            }
            else if (args.item.id === 'copy') {
                var dialogObj = document.getElementById('alert_dialog_1').ej2_instances[0];
                dialogObj.show();
            }
        }
        if (args.item.id === 'showActions') {
            gridObj.toolbar = [{ text: "Hide Actions", tooltipText: "Actions", prefixIcon: "e-custom-hide-actions", id: "hideActions" }, { text: "Toggle Grouping", tooltipText: "Grouping", prefixIcon: "e-custom-group-toggle", id: "toggleGrouping" }, { text: "Toggle Detailed", tooltipText: "Toggle Detailed", prefixIcon: "e-toggledetailed", id: "toggleDetailed" }, { text: "Move Up", tooltipText: "Move Up", prefixIcon: "e-c-moveup", id: "moveUp" }, { text: "Move Down", tooltipText: "Move Down", prefixIcon: "e-c-movedown", id: "moveDown" }, { text: "ExcelExport", tooltipText: "Excel Export", prefixIcon: "e-excelexport", id: "excelexport", align: 'Right' }, "CsvExport", "Print", "Search", "Delete", { text: "Copy", tooltipText: "Copy", prefixIcon: "e-copy", id: "copy" }, "Search", { text: "Copy With Header", tooltipText: "Copy With Header", prefixIcon: "e-copy", id: "copyHeader" }, "ColumnChooser"];
            gridObj.refresh();
        }
        if (args.item.id === 'hideActions') {
            gridObj.toolbar = [{ text: "Show Actions", tooltipText: "Actions", prefixIcon: "e-custom-show-actions", id: "showActions" }, "Search", "ColumnChooser"];
            gridObj.showColumnChooser = true;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleGrouping') {
            gridObj.allowGrouping = !gridObj.allowGrouping;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleDetailed') {
            var visCount = 0;
            for (var i = 0; i < gridObj.columns.length; i++) {
                if (gridObj.columns[i].visible) visCount++;
            }
            if (visCount == gridObj.columns.length) {
                for (var i = 0; i < gridObj.columns.length; i++) {
                    var col = gridObj.columns[i];
                    if (typeof col.customAttributes != 'undefined' && typeof col.customAttributes.id != 'undefined' && col.customAttributes.id == 'detailed')
                        gridObj.showHider.hide(col.headerText, 'headerText');
                    else if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
            else {
                for (var i = 0; i < gridObj.columns.length; i++) {
                    var col = gridObj.columns[i];
                    if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
        }
        if (args.item.id === 'moveUp') {
            var selectedIndexes = [];
            var selected = gridObj.getSelectedRecords();
            for (var i = 0; i < selected.length; i++) {
                var cur = selected[i];
                let rI = cur.routeIndex - 1;
                if (rI - 1 < 0)
                    break;

                selectedIndexes.push(rI - 1);
                array_move(gridObj.dataSource, rI, rI - 1);
            }
            for (var i = 0; i < gridObj.dataSource.length; i++) {
                if (typeof (gridObj.dataSource[i]) !== 'undefined') {
                    gridObj.dataSource[i].routeIndex = i + 1;
                }
            }
            gridObj.refresh();
            setTimeout(function () { gridObj.selectionModule.selectRows(selectedIndexes) }, 100);
        }
        if (args.item.id === 'moveDown') {
            var selectedIndexes = [];
            var selected = gridObj.getSelectedRecords()
            for (var i = selected.length - 1; i > -1; i--) {
                var cur = selected[i];
                let rI = cur.routeIndex - 1;
                if (rI + 1 > gridObj.dataSource.length - 1)
                    break;
                selectedIndexes.push(rI + 1);
                array_move(gridObj.dataSource, rI, rI + 1);
            }
            for (var i = 0; i < gridObj.dataSource.length; i++) {
                if (typeof (gridObj.dataSource[i]) !== 'undefined') {
                    gridObj.dataSource[i].routeIndex = i + 1;
                }
            }
            gridObj.refresh();
            setTimeout(function () { gridObj.selectionModule.selectRows(selectedIndexes) }, 100);
        }
    }
    function @(Model.Id)_TaskRowDataBound(args) {
        //if (args.data.isDepartmentHead || args.data.isReportingTo) {
        //    $(".e-" + "DeleteButton", args.row).addClass("e-hide");
        //}
        //else {
        //    $(".e-" + "DeleteButton", args.row).removeClass("e-hide");

        //}
    }
</script>

@*@RenderSection("InterenalScripts", false)*@