@page "/Payroll/SocialInsurances"
@model CERP.Web.Areas.Payroll.Pages.SocialInsurance.ListModel
@{
    ViewData["Title"] = "Payroll Social Insurances";
    ViewData["IconClass"] = "fas fa-calendar-check";

    ViewData["HeaderTitle"] = "All Social Insurances";

    ViewData["IsList"] = true;
    ViewData["IsNew"] = false;
    ViewData["Area"] = "Payroll";

    var alertanimation = new Syncfusion.EJ2.Popups.DialogAnimationSettings { Effect = Syncfusion.EJ2.Popups.DialogEffect.None };

    var initialToolBar = new List<object>() { new { text = "Show Actions", tooltipText = "Actions", prefixIcon = "e-custom-show-actions", id = "showActions" }, "Search", "ColumnChooser" };
    var fullToolBar = new List<object>() { new { text = "Hide Actions", tooltipText = "Actions", prefixIcon = "e-custom-hide-actions", id = "hideActions" }, new { text = "Toggle Grouping", tooltipText = "Grouping", prefixIcon = "zmdi-chevron-up", id = "toggleGrouping" }, new { text = "Toggle Detailed", tooltipText = "Toggle Detailed", prefixIcon = "e-toggledetailed", id = "toggleDetailed" }, new { text = "ExcelExport", tooltipText = "Excel Export", prefixIcon = "e-excelexport", id = "excelexport", align = "Right" }, "CsvExport", "Print", "Search", new { text = "Copy", tooltipText = "Copy", prefixIcon = "e-copy", id = "copy" }, new { text = "Copy With Header", tooltipText = "Copy With Header", prefixIcon = "e-copy", id = "copyHeader" }, "ColumnChooser" };

    List<object> commands = new List<object>() {
        new { type = "View", buttonOption = new { iconCss = "zmdi zmdi-search", cssClass = "e-flat e-ViewButton" } }
    };
}

<script>
    $(document).ready(function () {
        var grid = $('#SocialInsurancesGrid')[0].ej2_instances[0];
        grid.showSpinner();
        cERP.appServices.payroll.payrunService.payrun.getList({}).done(function (data) {
            grid.hideSpinner();
            //var dataSource = [];
            //$.each(data, function (i, detail) {
            //    var row = detail.getPaymentSheet();
            //    dataSource.push(row);
            //});
            grid.dataSource = data.items;
        });
    });
</script>

<partial name="_DefaultPageHeader" />

<div class="site-content customContentArea">
    <div class="col-md-12 h-fill-available" style="">
        <div id="paymentSheetsSection" class="col-md-12 p-l-0" style="height: 100%">
            <div class="areaHeader" style="display:flex; text-align:center">
                <div class="areaHeaderTitle">
                    <span id="areHeadertitle" class="areaHeaderTitleNode menu-text">Social Insurances</span>
                    @*<span id="subTitle" class="menu-text" style="padding-left:15px; font-size: 28px; font-family:Roboto; font-weight:200;">@ViewData["SubTitle"]</span>*@
                </div>
            </div>
            <div class="control-section">
                <ejs-grid id="SocialInsurancesGrid"
                          enableAutoFill="true" rowDataBound="rowDataBound"
                          dataBound="dataBoundResponsive" commandClick="commandClick"
                          allowExcelExport="true" height="100%" allowPdfExport="true"
                          hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true"
                          allowSorting="true" allowMultiSorting="true" gridLines="Horizontal"
                          toolbarClick="toolbarClick" showColumnChooser="true" toolbar="@initialToolBar"
                          allowPaging="true" allowResizing="true">

                    <e-grid-columns>
                        <e-grid-column field="year" headerText="Year" textAlign="@Syncfusion.EJ2.Grids.TextAlign.Center"></e-grid-column>
                        <e-grid-column field="getMonth" headerText="Month" textAlign="@Syncfusion.EJ2.Grids.TextAlign.Center"></e-grid-column>
                        @*<e-grid-column field="totalEmployees" headerText="Total Employees" textAlign="@Syncfusion.EJ2.Grids.TextAlign.Center"></e-grid-column>*@
                        <e-grid-column field="" headerText="Actions" textAlign="@Syncfusion.EJ2.Grids.TextAlign.Center" commands="@commands"></e-grid-column>
                    </e-grid-columns>

                    <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                    <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="false"></e-grid-editSettings>
                    <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                    <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                </ejs-grid>
            </div>
        </div>
    </div>
</div>

<ejs-dialog id="alert_dialog" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy with Header" content="Atleast one row should be selected to copy with header">
    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
    </e-dialog-buttons>
</ejs-dialog>
<ejs-dialog id="alert_dialog_1" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy" content="Atleast one row should be selected to copy">
    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
    </e-dialog-buttons>
</ejs-dialog>

<script>
    function commandClick(args)
    {
        if (args.commandColumn.type == "View Payrun")
        {
            var params = args.rowData;  // display row data

            window.open(`@Url.Content("~")/Payroll/Payrun/Run?foryear=${params.year}&formonth=${params.month}`, '_blank');
        }
        if (args.commandColumn.type == "Copy") {
            this.copy(false);
        }
        if (args.commandColumn.type == "View") {
            window.open(`@Url.Content("~")/Payroll/Payrun/SocialInsurance/${args.rowData.id}`, '_blank');
        }
    }
    function toolbarClick(args) {
        var gridObj = document.getElementById("SocialInsurancesGrid").ej2_instances[0];
        if (args.item.id === 'SocialInsurancesGrid_pdfexport') {
            gridObj.pdfExport({}, true);
        }
        if (args.item.id === 'SocialInsurancesGrid_excelexport') {
            gridObj.excelExport();
        }
        if (args.item.id === 'SocialInsurancesGrid_csvexport') {
            gridObj.csvExport();
        }
        if (this.getSelectedRecords().length > 0) {
            var withHeader = false;
            if (args.item.id === 'copyHeader') {
                withHeader = true;
            }
            this.copy(withHeader);
        } else {
            if (args.item.id === 'copyHeader') {
                var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                dialogObj.show();
            }
            else if (args.item.id === 'copy') {
                var dialogObj = document.getElementById('alert_dialog_1').ej2_instances[0];
                dialogObj.show();
            }
        }
        if (args.item.id === 'showActions') {
            gridObj.toolbar = [{ text: "Hide Actions", tooltipText: "Actions", prefixIcon: "e-custom-hide-actions", id: "hideActions" }, { text: "Toggle Grouping", tooltipText: "Grouping", prefixIcon: "e-custom-group-toggle", id: "toggleGrouping" }, { text: "Toggle Detailed", tooltipText: "Toggle Detailed", prefixIcon: "e-toggledetailed", id: "toggleDetailed" }, { text: "ExcelExport", tooltipText: "Excel Export", prefixIcon: "e-excelexport", id: "excelexport", align: 'Right' }, "CsvExport", "Print", "Search", { text: "Copy", tooltipText: "Copy", prefixIcon: "e-copy", id: "copy" }, "Search", { text: "Copy With Header", tooltipText: "Copy With Header", prefixIcon: "e-copy", id: "copyHeader" }, "ColumnChooser"];
            gridObj.refresh();
        }
        if (args.item.id === 'hideActions') {
            gridObj.toolbar = [{ text: "Show Actions", tooltipText: "Actions", prefixIcon: "e-custom-show-actions", id: "showActions" }, "Search", "ColumnChooser"];
            gridObj.showColumnChooser = true;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleGrouping') {
            gridObj.allowGrouping = !gridObj.allowGrouping;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleDetailed') {
            var visCount = 0;
            for (var i = 0; i < gridObj.columns.length; i++) {
                if (gridObj.columns[i].visible) visCount++;
            }
            if (visCount == gridObj.columns.length) {
                for (var i = 0; i < gridObj.columns.length; i++) {
                    var col = gridObj.columns[i];
                    if (typeof col.customAttributes != 'undefined' && typeof col.customAttributes.id != 'undefined' && col.customAttributes.id == 'detailed')
                        gridObj.showHider.hide(col.headerText, 'headerText');
                    else if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
            else {
                for (var i = 0; i < gridObj.columns.length; i++) {
                    var col = gridObj.columns[i];
                    if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
        }
    }

    function alertBtnClick() {
        var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
        var dialogObj1 = document.getElementById('alert_dialog_1').ej2_instances[0];
        dialogObj.hide();
        dialogObj1.hide();
    }

    function rowDataBound(args)
    {

    }
</script>