@page "/Payroll/LR"
@using CERP.Setup.DTOs;
@model CERP.Web.Areas.Payroll.Pages.LR.ListModel
@{
    ViewData["Title"] = "Leave Request";
    ViewData["IconClass"] = "fas fa-calendar-check";
    ViewData["HeaderTitle"] = "LEAVE REQUEST";
    ViewData["SubTitle"] = "Request Leaves";
    ViewData["Area"] = "Payroll";

    ViewData["IsList"] = false;
    ViewData["IsCreate"] = false;
    ViewData["CreateNewText"] = "New Reconciliation";
    ViewData["CreateNewLink"] = "/Reconciliation/New";

    bool isReconDS = ViewData["Payruns_DS"] != null;

    var alertanimation = new Syncfusion.EJ2.Popups.DialogAnimationSettings { Effect = Syncfusion.EJ2.Popups.DialogEffect.None };

    var initialToolBar = new List<object>() { new { text = "Show Actions", tooltipText = "Actions", prefixIcon = "e-custom-show-actions", id = "showActions" }, "Search", "ColumnChooser" };
    var fullToolBar = new List<object>() { new { text = "Hide Actions", tooltipText = "Actions", prefixIcon = "e-custom-hide-actions", id = "hideActions" }, new { text = "Toggle Grouping", tooltipText = "Grouping", prefixIcon = "zmdi-chevron-up", id = "toggleGrouping" }, new { text = "Toggle Detailed", tooltipText = "Toggle Detailed", prefixIcon = "e-toggledetailed", id = "toggleDetailed" }, "ExcelExport", "CsvExport", "Print", "Search",new { text = "Copy", tooltipText = "Copy", prefixIcon = "e-copy", id = "copy" }, new { text = "Copy With Header", tooltipText = "Copy With Header", prefixIcon = "e-copy", id = "copyHeader" }, "ColumnChooser" };
}
@section styles {
    

    <style>

    </style>
}
@section scripts {
    <!-- Syncfusion Essential JS 2 Scripts -->
    
    <script>
        $(document).ready(function () {
            if ('@isReconDS' == 'True')
            {
                 $('#reconSection').slideDown(200);

                setTimeout(function () {
                    var grid = $('#reconGrid')[0].ej2_instances[0];
                    //console.log(grid.dataSource);
                    ////grid.refresh();
                    //$("#p1Year").val();
                    //$("#p1Month").val();
                    //$("#p2Year").val();
                    //$("#pMonth").val();
                }, 200);
            }
            $("#submitPeriod").on('click', function (e) {
                swal.showLoading();
                //var xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
                var p1Year = $('option:selected', '#p1Year').val();
                var p1Month = $('option:selected', '#p1Month').val();
                var p2Year = $('option:selected', '#p2Year').val();
                var p2Month = $('option:selected', '#p2Month').val();
                var params = "P1Year=" + p1Year + "&P1Month=" + p1Month + "&P2Year=" + p2Year + "&P2Month=" + p2Month + "&isAjax=true";
                $.ajax({
                url: '@Url.Content("~")/Payroll/Reconciliation',
                    async: true,
                    type: "GET",
                    data: params,
                    success: function (data) {
                        swal.hideLoading();
                        console.log(data);
                        swal.fire('Success', 'Reconiliation successfully generated', 'success')

                        $('#reconSection').slideDown(200);

                        setTimeout(function () {
                            var grid = $('#reconGrid')[0].ej2_instances[0];
                            grid.dataSource = data;
                            grid.refresh();
                        }, 200);
                    },
                    error: function (data) {
                        swal.hideLoading();
                        $('#reconSection').slideUp(200);
                        console.log(data)
                        if (data.responseJSON.type != null) {
                            if (data.responseJSON.type == 'period')
                                swal.fire('Failed', `Invalid Period Provided.<br/>Reconiliation couldn't be generated`, 'error');
                            if (data.responseJSON.type == 'reconciliation')
                                swal.fire('Failed', `An error occured while generating reconciliation.<br/>Please confirm that the payruns exists for this period`, 'error');
                            if (data.responseJSON.type == 'exception')
                                swal.fire('Failed', `An error occured. Please try again later`, 'error');
                            }
                        else {
                                if (data.responseJSON.type == 'exception')
                                    swal.fire('Failed', `An error occured. Please try again later`, 'error');
                                }
                    }
                        });
                    });
                });

    </script>
    

}
<partial name="_DefaultPageHeader" />
<div class="site-content customContentArea">
    <div class="well">
        <h3 class="m-t-0 p-t-0">
            Provide Period
        </h3>
        <hr class="margin-top-0 margin-bottom-5">

        <div id="periodSection" class="row">
            <div id="divSearchPeriod1" class="col-md-6" style="padding-right:0; padding-bottom:15px; border-bottom: 1px solid #eaeaea;">
                <div style="background-color: whitesmoke; height: 32px; margin-bottom:15px">
                    <h4 class="text-center" style="padding-top: 7px; margin:0; font-weight:300">FROM</h4>
                </div>

                <div class="col-md-6">
                    <h4>Year</h4>
                    <select id="p1Year" name="P1Year" class="form-control">
                        @for (int i = DateTime.Now.Year; i >= DateTime.Now.Year - 5; i--)
                        {
                            <option value="@i">@i</option>
                        }
                    </select>
                </div>
                <div class="col-md-6">
                    <h4>Month</h4>
                    <select id="p1Month" name="P1Month" class="form-control">
                        @for (int i = 1; i <= 12; i++)
                        {
                             <option value="@i" )>
                                   @(Convert.ToDateTime(i.ToString() + "/1/1990").ToString("MMMM"))
                             </option>
                        }
                    </select>
                </div>
            </div>
            <div id="divSearchPeriod2" class="col-md-6" style="padding-left:0; padding-bottom:15px; border-bottom: 1px solid #eaeaea; border-left: 1px solid #eaeaea">
                <div style="background-color: #f7f7f7; height: 32px; margin-bottom:15px;">
                    <h4 class="text-center" style="padding-top: 7px; margin:0;  font-weight:300">TO</h4>
                </div>

                <div class="col-md-6">
                    <h4>Year</h4>
                    <select id="p2Year" name="P2Year" class="form-control">
                        @for (int i = DateTime.Now.Year; i >= DateTime.Now.Year - 5; i--)
                        {
                             <option value="@i">@i</option>
                        }
                    </select>
                </div>
                <div class="col-md-6">
                    <h4>Month</h4>
                    <select id="p2Month" name="P2Month" class="form-control">
                        @for (int i = 1; i <= 12; i++)
                        {
                             <option value="@i" )>
                                    @(Convert.ToDateTime(i.ToString() + "/1/1990").ToString("MMMM"))
                             </option>
                        }
                    </select>
                </div>
            </div>
            <div class="col-md-12 m-t-15">
                <button id="submitPeriod" type="button" class="btn btn-primary btn-block" style="font-weight:400">CALCULATE RECON</button>
            </div>
        
        </div>
    </div>

    <div id="reconSection" class="well" style="display:none">
        <div class="control-section">
            <ejs-grid id="reconGrid" dataSource="@ViewData["Payruns_DS"]" queryCellInfo="QueryCellInfo" childGrid="@Model.SecondaryDetailsGrid"
                  enableAutoFill="true" columns="@Model.GetPrimaryGridColumns()" rowDataBound="rowDataBound"
                  dataBound="dataBoundResponsive"commandClick="commandClick" dataBound="dataBoundResponsive" actionComplete="actionComplete"
                  allowExcelExport="true" height="100%"allowPdfExport="true"
                  hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true"
                  allowSorting="true" allowMultiSorting="true" gridLines="Both"
                  toolbarClick="toolbarClick" toolbar="@initialToolBar"
                  
                  allowPaging="true" allowResizing="true">

            <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
            <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="false"></e-grid-editSettings>
            <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
            <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
        </ejs-grid>
        </div>
    </div>
</div>

<ejs-dialog id="alert_dialog" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy with Header" content="Atleast one row should be selected to copy with header">
    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
    </e-dialog-buttons>
</ejs-dialog>
<ejs-dialog id="alert_dialog_1" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy" content="Atleast one row should be selected to copy">
    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
    </e-dialog-buttons>
</ejs-dialog>

<script>
    
    function DeletePayrun(month, year) {
        var xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();

        $.ajax({
            url: '@Url.Content("~")/Payroll/Payrun?handler=Payrun',
            async: true,
            type: "DELETE",
            data: { year: year, month: month, __RequestVerificationToken: xhrToken },
            success: function (data) {
                swal.fire('Success', 'Payrun successfully posted', 'success')
            },
            error: function (data) {
                swal.fire('Failed', `Payrun couldn't be deleted`, 'error');
                location.reload(true);
            }
        });
        //swal.fire('Are you sure?', 'Are your sure you want to delete this payrun', 'warning')
        //    .then(function () {
                
        //    });
    }

    function rowDataBound(args) {
        if (args.data.isPosted) {
            $(".e-" + "View" + "Button", args.row).removeClass("e-hide");
            $(".e-" + "Edit" + "Button", args.row).addClass("e-hide");
            $(".e-" + "Delete" + "Button", args.row).addClass("e-hide");
        }
        else {
            $(".e-" + "View" + "Button", args.row).addClass("e-hide");
            $(".e-" + "Edit" + "Button", args.row).removeClass("e-hide");
            $(".e-" + "Delete" + "Button", args.row).removeClass("e-hide");
        }
    }

    function QueryCellInfo(args) {
        if (args.cell.innerText == '') {
            if(typeof args.column.field != 'undefined')
                args.cell.innerText = '—';
        }
        else {
            if (args.column.field.includes("Value") || args.column.field.includes("BasicSalar") || args.column.field == 'totalEarnings' || args.column.field == 'totalDeductions' || args.column.field == 'netTotal') {
                const options = {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                };
                //var value = parseFloat(args.cell.innerText);
                //const formatted = Number(value).toLocaleString('en', options);
                args.cell.innerText = '' + args.cell.innerText // change decimal ; 
            }
        }
    }

    function actionComplete(args) {
        if (args.requestType == "save") {

        }
        else if (args.requestType == "delete")
        {
            DeletePayrun(args.data[0].year, args.data[0].month);
        }
    }
    function actionBegin(args) {
        if (args.requestType == "save") {

        }
        else if (args.requestType == "delete")
        {
            //DeletePayrun(args.data[0].year, args.data[0].month);
        }
    }
    function commandClick(args)
    {
        console.log(args);
        if (args.commandColumn.type == "Edit")
        {
            var params = args.rowData;  // display row data
            console.log(params);

            window.location = `@Url.Content("~")/Payroll/Payrun/Run?foryear=${params.year}&formonth=${params.month}`;
        }
        else if (args.commandColumn.type == "View")
        {
            var params = args.rowData;  // display row data
            console.log(params);

            window.location = `@Url.Content("~")/Payroll/Payrun/Run?foryear=${params.year}&formonth=${params.month}`;
        }
        else if (args.commandColumn.type == "Copy") {
            this.copy(false);
        }
        else if (args.commandColumn.type == "Delete") {
            
        }
    }

    function onLoad() {
        this.parentDetails.parentKeyFieldValue = this.parentDetails.parentRowData['Id'];
    }
    function toolbarClick(args) {
        var gridObj = document.getElementById("reconGrid").ej2_instances[0];
        if (args.item.id === 'reconGrid_pdfexport') {
            gridObj.pdfExport();
        }
        if (args.item.id === 'reconGrid_excelexport') {
            gridObj.excelExport();
        }
        if (args.item.id === 'reconGrid_csvexport') {
            gridObj.csvExport();
        }
        if (this.getSelectedRecords().length > 0) {
            var withHeader = false;
            if (args.item.id === 'copyHeader') {
                withHeader = true;
            }
            this.copy(withHeader);
        } else {
            if (args.item.id === 'copyHeader') {
                var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                dialogObj.show();
            }
            else if (args.item.id === 'copy') {
                var dialogObj = document.getElementById('alert_dialog_1').ej2_instances[0];
                dialogObj.show();
            }
        }
        if (args.item.id === 'showActions') {
            gridObj.toolbar = [{ text: "Hide Actions", tooltipText: "Actions", prefixIcon: "e-custom-hide-actions", id: "hideActions" }, { text: "Toggle Grouping", tooltipText: "Grouping", prefixIcon: "e-custom-group-toggle", id: "toggleGrouping" }, { text: "Toggle Detailed", tooltipText: "Toggle Detailed", prefixIcon: "e-toggledetailed", id: "toggleDetailed" }, "ExcelExport", "CsvExport", "Print", "Search",{ text: "Copy", tooltipText: "Copy", prefixIcon: "e-copy", id: "copy" }, { text: "Copy With Header", tooltipText: "Copy With Header", prefixIcon: "e-copy", id: "copyHeader" }, "ColumnChooser"];
    gridObj.refresh();
        }
        if (args.item.id === 'hideActions') {
            gridObj.toolbar = [{ text: "Show Actions", tooltipText: "Actions", prefixIcon: "e-custom-show-actions", id: "showActions" }, "Search", "ColumnChooser"];
            console.log(gridObj.showColumnChooser); 
            gridObj.showColumnChooser = true; 
            gridObj.refresh();
        }
        if (args.item.id === 'toggleGrouping') {
            gridObj.allowGrouping = !gridObj.allowGrouping;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleDetailed') {
            var visCount = 0;
            for (var i = 0; i < gridObj.columns.length; i++) {
                if (gridObj.columns[i].visible) visCount++;
            }
            if (visCount == gridObj.columns.length) {
                for (var i = 0; i < gridObj.columns.length; i++) {
                    var col = gridObj.columns[i];
                    if (typeof col.customAttributes != 'undefined' && typeof col.customAttributes.id != 'undefined' && col.customAttributes.id == 'detailed')
                        gridObj.showHider.hide(col.headerText, 'headerText');
                    else if(col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
            else {
                for (var i = 0; i < gridObj.columns.length; i++) {
                    var col = gridObj.columns[i];
	    if(col.showInColumnChooser)
                         gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
        }
}
    function alertBtnClick() {
        var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
        var dialogObj1 = document.getElementById('alert_dialog_1').ej2_instances[0];
        dialogObj.hide();
        dialogObj1.hide();
    }
    var initial = true;
    function dataBound(args) {
        //this.autoFitColumns();
        //if (initial == true) {
        //    this.groupModule.collapseAll();
        //    initial = false;
        //}
        //console.log(args);
    }
</script>