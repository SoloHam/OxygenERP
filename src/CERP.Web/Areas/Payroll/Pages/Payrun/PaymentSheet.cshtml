@page "/Payroll/Payrun/PaymentSheet/{payrunId}"
@using CERP;
@using CERP.App;
@using CERP.HR.EMPLOYEE.DTOs;
@using Volo.Abp.Domain.Repositories;
@using Syncfusion.EJ2.Grids;
@using CERP.Setup.DTOs;
@model CERP.Web.Areas.Payroll.Pages.PayrunPage.PaymentSheetModel
@{
    ViewData["Title"] = "Payment Sheet";
    ViewData["IconClass"] = "fas fa-calendar-check";
    ViewData["HeaderTitle"] = "PAYMENT SHEET";
    ViewData["SubTitle"] = "";
    ViewData["Area"] = "Payroll";

    ViewData["IsList"] = false;
    ViewData["IsCreate"] = false;

    List<GridColumn> primaryGridColumns = new List<GridColumn>()
{
        new GridColumn { Field = "sNo", HeaderText = "#", TextAlign=TextAlign.Center,  MinWidth="10", CustomAttributes=new {id="detailed"}  },
        new GridColumn { Field = "getEmpRefCode", HeaderText = "Id", TextAlign=TextAlign.Center,  MinWidth="10", CustomAttributes=new {id="detailed"}  },
        new GridColumn { Field = "getEmpName", HeaderText = "Employee Name", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "getBankName", HeaderText = "Bank Name", TextAlign=TextAlign.Center,  MinWidth="10", CustomAttributes=new {id="detailed"}  },
        new GridColumn { Field = "getBankIBAN", HeaderText = "IBAN", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "getBasicSalary", HeaderText = "Basic Salary", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "getAllowanceHousing", HeaderText = "Housing Allowance", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "getOtherIncome", HeaderText = "Other Income", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "getDeductions", HeaderText = "Deductions", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "getPayment", HeaderText = "Payment", TextAlign=TextAlign.Center,  MinWidth="10"  },

    };
    var DS = Model.dynamicDSS;

    var alertanimation = new Syncfusion.EJ2.Popups.DialogAnimationSettings { Effect = Syncfusion.EJ2.Popups.DialogEffect.None };

    var initialToolBar = new List<object>() { new { text = "Show Actions", tooltipText = "Actions", prefixIcon = "e-custom-show-actions", id = "showActions" }, "Search", "ColumnChooser" };
    var fullToolBar = new List<object>() { new { text = "Hide Actions", tooltipText = "Actions", prefixIcon = "e-custom-hide-actions", id = "hideActions" }, new { text = "Toggle Grouping", tooltipText = "Grouping", prefixIcon = "e-custom-group-toggle", id = "toggleGrouping" }, "ExcelExport", "CsvExport", "Print", "Search", new { text = "Copy", tooltipText = "Copy", prefixIcon = "e-copy", id = "copy" }, new { text = "Copy With Header", tooltipText = "Copy With Header", prefixIcon = "e-copy", id = "copyHeader" }, "ColumnChooser" };

    var months = new string[] {"January", "February", "March", "April", "May", "June",
        "July", "August", "September", "October", "November", "December" };

    string psDate = Model.dynamicDS.Count > 0 ? months[Model.dynamicDS[0].month - 1] + ", " + Model.dynamicDS[0].year : "";
}
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@addTagHelper *, Syncfusion.EJ2

@section styles {
    

    <style>

        @@media screen and (max-width:780px) {
            #paymentsSheetSection {
                margin-top: 20px;
            }
        }

        @@media screen and (max-width:1000px) {
            #paymentsSheetSection {
                margin-top: 20px;
                margin-left: 0 !important;
                padding-left: 0px;
            }

            .dividePayrun {
                position: unset;
                padding-right: 0px;
            }
            /*.customContentArea{
                position: unset;
            }*/
        }

        .areaLeft {
            background-color: #00b2f0;
            display: flex;
            align-items: center;
            padding: 0 20px 0 20px;
        }

        .areaRight {
            background-color: #00b2f0;
            display: flex;
            align-items: center;
            padding: 0 20px 0 20px;
        }
    </style>
}
@section scripts {
    <!-- Syncfusion Essential JS 2 Scripts -->
    
    

}
<partial name="_DefaultPageHeader" />

<div class="site-content customContentArea" style="padding-bottom: 120px">
    <div class="control-section">
        <div class="areaHeader m-b-5 font-roboto" style="display:flex;">
            <div class="areaLeft">
                <h4 id="psHeaderDate" class="control-label" style="margin:0; margin-top:2px;">@psDate</h4>
            </div>
            <h3 class="control-label" style="flex-grow: 1; margin:0">Payment Sheet</h3>
            @if (Model.payrun.IsPosted)
            {
                <div class="areaRight" style="padding: 0!important">
                    @if (Model.payrun.IsPosted)
                    {
                        <h4 id="psHeaderPosted" class="control-label" style="padding: 0 20px 0 20px; margin:0; margin-top:2px">POSTED</h4>
                    }
                    else
                    {
                        <button id="psHeaderPostBtn" onclick="return postPS()" class="btn btn-outline-default" style="margin:0; color: white; height: 100%; width: 100%;">POST</button>
                    }
                </div>
            }
            </div>
        <ejs-grid id="PaymentSheetGrid"
                  enableAutoFill="true" columns="@primaryGridColumns" dataSource="@DS"
                  dataBound="dataBoundResponsive"
                  allowExcelExport="true" height="100%" allowPdfExport="true"
                  hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true"
                  allowSorting="true" allowMultiSorting="true" gridLines="Both"
                  toolbarClick="PStoolbarClick" toolbar="@initialToolBar"
                  contextMenuItems="@(new List<object>() { "AutoFit", "AutoFitAll", "SortAscending", "SortDescending","Copy", "Edit", "PdfExport", "ExcelExport", "CsvExport", "FirstPage", "PrevPage","LastPage", "NextPage"})"
                  allowPaging="true" allowResizing="true">

            <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
            <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="false"></e-grid-editSettings>
            <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
            <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
        </ejs-grid>

        <form>
        </form>
    </div>
</div>
<ejs-dialog id="alert_dialog" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy with Header" content="Atleast one row should be selected to copy with header">
    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
    </e-dialog-buttons>
</ejs-dialog>
<ejs-dialog id="alert_dialog_1" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy" content="Atleast one row should be selected to copy">
    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
    </e-dialog-buttons>
</ejs-dialog>
<script>
    function PStoolbarClick(args) {
        var gridObj = document.getElementById("PaymentSheetGrid").ej2_instances[0];
        if (args.item.id === 'PaymentSheetGrid_pdfexport') {
            gridObj.pdfExport();
        }
        if (args.item.id === 'PaymentSheetGrid_excelexport') {
            gridObj.excelExport();
        }
        if (args.item.id === 'PaymentSheetGrid_csvexport') {
            gridObj.csvExport();
        }
        if (this.getSelectedRecords().length > 0) {
            var withHeader = false;
            if (args.item.id === 'copyHeader') {
                withHeader = true;
            }
            this.copy(withHeader);
        } else {
            if (args.item.id === 'copyHeader') {
                var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                dialogObj.show();
            }
            else if (args.item.id === 'copy') {
                var dialogObj = document.getElementById('alert_dialog_1').ej2_instances[0];
                dialogObj.show();
            }
        }
        if (args.item.id === 'showActions') {
            gridObj.toolbar = [{ text: "Hide Actions", tooltipText: "Actions", prefixIcon: "e-custom-hide-actions", id: "hideActions" }, { text: "Toggle Grouping", tooltipText: "Grouping", prefixIcon: "e-custom-group-toggle", id: "toggleGrouping" }, { text: "Toggle Detailed", tooltipText: "Toggle Detailed", prefixIcon: "e-toggledetailed", id: "toggleDetailed" }, "ExcelExport", "CsvExport", "Print", "Search", { text: "Copy", tooltipText: "Copy", prefixIcon: "e-copy", id: "copy" }, { text: "Copy With Header", tooltipText: "Copy With Header", prefixIcon: "e-copy", id: "copyHeader" }, "ColumnChooser"];
            gridObj.refresh();
        }
        if (args.item.id === 'hideActions') {
            gridObj.toolbar = [{ text: "Show Actions", tooltipText: "Actions", prefixIcon: "e-custom-show-actions", id: "showActions" }, "Search", "ColumnChooser"];
            gridObj.showColumnChooser = true;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleGrouping') {
            gridObj.allowGrouping = !gridObj.allowGrouping;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleDetailed') {
            var visCount = 0;
            for (var i = 0; i < gridObj.columns.length; i++) {
                if (gridObj.columns[i].visible) visCount++;
            }
            if (visCount == gridObj.columns.length) {
                for (var i = 0; i < gridObj.columns.length; i++) {
                    var col = gridObj.columns[i];
                    if (typeof col.customAttributes != 'undefined' && typeof col.customAttributes.id != 'undefined' && col.customAttributes.id == 'detailed')
                        gridObj.showHider.hide(col.headerText, 'headerText');
                    else if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
            else {
                for (var i = 0; i < gridObj.columns.length; i++) {
                    var col = gridObj.columns[i];
                    if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
        }
    }
    function alertBtnClick() {
        var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
        var dialogObj1 = document.getElementById('alert_dialog_1').ej2_instances[0];
        dialogObj.hide();
        dialogObj1.hide();
    }

    var curPSId = @Model.payrunId;
    function postPS() {
        var xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();

        $.ajax({
            url: '/handler=PaymentSheet',
            async: true,
            type: "POST",
            data: { id: curPSId, __RequestVerificationToken: xhrToken },
            success: function (data) {
                swal.fire('Success', 'Payment sheet successfully posted', 'success')
                $('#psHeaderPostBtn').hide();
                $('#psHeaderPosted').show();
            },
            error: function (data) {
                swal.fire('Failed', `Payment sheet couldn't be posted`, 'error');
                $('#psHeaderPostBtn').show();
                $('#psHeaderPosted').hide();
            }
        });
    }
</script>
