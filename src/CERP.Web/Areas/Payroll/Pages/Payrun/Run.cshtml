@page "/Payroll/Payrun/Run"
@using CERP.Setup.DTOs;
@model CERP.Web.Areas.Payroll.Pages.Run.ListModel
@{
    ViewData["Title"] = "Payrun";
    ViewData["IconClass"] = "fas fa-calendar-check";
    ViewData["HeaderTitle"] = "PAYRUN";
    ViewData["SubTitle"] = "Detailed Payruns";
    ViewData["Area"] = "Payroll";

    ViewData["IsList"] = false;
    ViewData["IsCreate"] = false;
    ViewData["CreateNewText"] = "New Payrun";
    ViewData["CreateNewLink"] = "/Payrun/New";

    var alertanimation = new Syncfusion.EJ2.Popups.DialogAnimationSettings { Effect = Syncfusion.EJ2.Popups.DialogEffect.None };
    var initialToolBar = new List<object>() { new { text = "Show Actions", tooltipText = "Actions", prefixIcon = "e-custom-show-actions", id = "showActions" }, "Search", "ColumnChooser" };
    var fullToolBar = new List<object>() { new { text = "Hide Actions", tooltipText = "Actions", prefixIcon = "e-custom-hide-actions", id = "hideActions" }, new { text = "Toggle Grouping", tooltipText = "Grouping", prefixIcon = "zmdi-chevron-up", id = "toggleGrouping" }, new { text = "Toggle Detailed", tooltipText = "Toggle Detailed", prefixIcon = "e-toggledetailed", id = "toggleDetailed" }, "ExcelExport", "CsvExport", "Print", "Search", new { text = "Copy", tooltipText = "Copy", prefixIcon = "e-copy", id = "copy" }, new { text = "Copy With Header", tooltipText = "Copy With Header", prefixIcon = "e-copy", id = "copyHeader" }, "ColumnChooser" };
}
@section styles {
    <link href="~/libs/syncfusion/ej2-grid/styles/fabric.css" rel="stylesheet" />

    <style>
        .e-grid .e-headercell {
            background-color: #f5f5f5;
            /*font-size: 18px;*/
        }

        .e-detailcell .e-headercell {
            background-color: #6691b1 !important;
            color: rgb(253,253,253);
            /*font-size: 18px;*/
        }
    </style>
}
@section scripts {
    <!-- Syncfusion Essential JS 2 Scripts -->
    <script src="~/libs/syncfusion/ej2-grid/scripts/ej2.min.js"></script>
    <script>
        $(document).ready(function () {

        });

    </script>
    <ejs-scripts></ejs-scripts>

}
<partial name="_DefaultPageHeader" />
<div class="site-content customContentArea">

    <form id="actionForm" class="">
        <input type="hidden" name="Year" id="TheYear" />
        <input type="hidden" name="Month" id="Month" />
    </form>

    <div class="well">

        <div id="divSearch" class="">
            <div class="row">
                <div class="col-md-3">
                    <div class="form-inline">
                        <div class="form-group">
                            <label class="p-r-20 m-5 text-uppercase">Month:</label>
                            <select id="PERIOD" name="Period" class="form-control" required>
                                @if (Model.ForMonth > 0)
                                {
                                    <option data-year="@Model.ForYear" data-month="@Model.ForMonth" value="@Model.ForMonth" selected>
                                        @(Convert.ToDateTime(Model.ForMonth + "/1/" + Model.ForYear).ToString("MMMM yyyy"))
                                    </option>
                                }
                                else
                                {
                                    <option hidden selected></option>

                                    for (int y = DateTime.Now.Year - 5; y <= DateTime.Now.Year; y++)
                                    {
                                        for (int m = 1; m <= 12; m++)
                                        {
                                            if (!(y == DateTime.Now.Year && m > DateTime.Now.Month))
                                            {
                                                @: <option data-year="@y" data-month="@m" value="@m" @(y == DateTime.Now.Year && m == DateTime.Now.Month ? "selected" : "")>
                                                    @:     @(Convert.ToDateTime(m + "/1/" + y).ToString("MMMM yyyy"))
                                                @: </option>
                                            }
                                        }
                                    }
                                }
                            </select>
                        </div>
                    </div>
                </div>

                <div class="col-md-5 text-right pull-right">
                    <div id="postSection" class="col-md-12" style="display: none">
                        <form id="postPayrunForm">
                            <div class="col-md-4">
                                <input id="postNote" class="form-control" type="text" placeholder="Note" />
                            </div>
                            <div class="col-md-5">
                                <input id="postAttachment" class="form-control" type="file" placeholder="" />
                            </div>
                            <div class="col-md-3">
                                <input id="submitPostPayrun" type="submit" class="btn btn-primary btn-block" value="POST" />
                            </div>
                        </form>
                    </div>
                    <div id="posted" class="pull-right font-roboto" style="display:none; width: 160px">
                        <div class="alert alert-outline-success alert-icon-bg alert-dismissable" style="margin-bottom:0" role="alert">
                            <div class="alert-icon">
                                <i class="zmdi zmdi-check"></i>
                            </div>
                            <div class="" style="padding: 5px 25px 5px 0; font-size:15px; font-weight:400">
                                @*<button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                    <span aria-hidden="true">
                                        <i class="zmdi zmdi-close"></i>
                                    </span>
                                </button>*@
                                Posted
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            @*<div class="clearfix"></div>*@
            @*<hr class="m-t-10 m-b-20">*@
        </div>
    </div>

    <div class="well" style="">
        <div class="control-section">
            <ejs-grid id="PayrunsHistoryGrid" dataSource="@ViewData["PayrunsDetails_DS"]" queryCellInfo="QueryCellInfo"
                      enableAutoFill="true" columns="@Model.GetPrimaryGridColumns()"
                      dataBound="dataBoundResponsive"commandClick="commandClick" dataBound="dataBoundResponsive" actionComplete="actionComplete"
                      allowExcelExport="true" height="100%" allowPdfExport="true"
                      hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true"
                      allowSorting="true" allowMultiSorting="true" gridLines="Both"
                      toolbarClick="toolbarClick" toolbar="@initialToolBar"
                      allowPaging="true" allowResizing="true">

                <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="false"></e-grid-editSettings>
                <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
            </ejs-grid>
        </div>
        <div id="generateSection" class="col-md-12" style="display: none">
            <input id="submitGenPayrun" type="" class="btn btn-primary btn-block" value="GENERATE PAYRUN" />
        </div>
    </div>

</div>

<ejs-dialog id="alert_dialog" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy with Header" content="Atleast one row should be selected to copy with header">
    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
    </e-dialog-buttons>
</ejs-dialog>
<ejs-dialog id="alert_dialog_1" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy" content="Atleast one row should be selected to copy">
    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
    </e-dialog-buttons>
</ejs-dialog>

<script>
    function QueryCellInfo(args) {
        if (args.cell.innerText == '')
        {
            if(typeof args.column.field != 'undefined')
                args.cell.innerText = '—';
        }
        else{
            if (args.column.field.includes("Value") || args.column.field == 'basicSalary' || args.column.field == 'amountPaid' || args.column.field == 'differAmount' || args.column.field == 'grossEarnings' || args.column.field == 'grossDeductions' || args.column.field == 'netAmount') {
                const options = {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                };
                var value = parseFloat(args.cell.innerText);
                const formatted = Number(value).toLocaleString('en', options);
                args.cell.innerText = '' + formatted // change decimal ;
            }
        }
    }

    $(function () {
        $("#submitGenPayrun").on('click', function () {
            $('#actionForm').submit();
        });
        $('#PERIOD').change();
    });

    $('#actionForm').on('submit', function (e) {
        e.preventDefault();

        if (IsValidate()) {
            swal.showLoading();
            var params = $('#actionForm').serialize();
            var xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
            params += "&__RequestVerificationToken=" + xhrToken;
            $.ajax({
                url: "@Url.Content("~")/Payroll/Payrun/Run?handler=Generate",
                async: true,
                type: "POST",
                data: params,
                success: function (data) {
                    swal.hideLoading();
                    swal.fire('Generated', 'Payrun has been generated', 'success');

                    //var grid = $("#PayrunsHistoryGrid")[0].ej2_instances[0];

                    //grid.dataSource = data;
                    //grid.refresh();
                    $('#PERIOD').change();
                },
                error: function (data) {
                    $(".control-section").slideUp(200);
                    $("#postSection").slideUp(200);
                    $("#posted").slideUp(200);
                    $("#generateSection").slideDown(200);

                    console.log(data);
                    if (data.responseJSON != null) {
                        swal.fire('Failed', data.responseJSON.message, 'error')
                    }
                }
            })
        }
    });
    $('#postPayrunForm').on('submit', function (e) {
        e.preventDefault();

        var year = $('#PERIOD').find('option:selected').attr('data-year');
        var month = $('#PERIOD').find('option:selected').attr('data-month');
        var note = $('#postNote').val();
        var file = $('#postAttachment')[0].files[0];
        var xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();

        var formData = new FormData();
        formData.append('year', year);
        formData.append('month', month);
        formData.append('note', note);
        formData.append('file', file);
        formData.append('__RequestVerificationToken', xhrToken);

        swal.fire('Are you sure?', 'Are your sure you want to post this payrun', 'warning')
            .then(function ()
            {
                $.ajax({
                    url: '@Url.Content("~")/Payroll/Payrun/Run?handler=Payrun',
                    async: true,
                    type: "POST",
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: function (data) {
                        swal.fire('Success', 'Payrun successfully posted', 'success')
                        $("#postSection").slideUp(200);
                        setTimeout(function () {
                            $("#posted").slideDown(200);
                        }, 200);
                    },
                    error: function (data) {
                        $("#posted").slideUp(200);
                        setTimeout(function () {
                            $("#postSection").slideDown(200);
                        }, 200);
                        swal.fire('Failed', `Payrun couldn't be posted`, 'error')
                    }
                });
            })
    });
    function IsValidate() {
        var isValidated = true;

        return isValidated;
    };


    $('#PERIOD').change(function () {
        var year = $(this).find('option:selected').attr('data-year');
        var month = $(this).find('option:selected').attr('data-month');
        $('#TheYear').val(year);
        $('#Month').val(month);

        BindGrid_Data();
    });
    $('#submitPostPayrun').on('click', function () {

    });


    function BindGrid_Data() {
        //$('#divList').html('<h5 class="margin-0"><p><i class="fa fa-spinner fa-spin fa-fw"></i> Please wait while data is loading...</p></h5>');
        var params = $('#actionForm').serialize();

        $.ajax({
            url: '@Url.Content("~")/Payroll/Payrun/Run?handler=Payrun',
            async: true,
            type: "GET",
            data: params,
            success: function (data) {
                if (data != null) {
                    console.log(data);
                    $(".control-section").slideDown(200);
                    $("#generateSection").slideUp(200);
                    if (!data.isPosted) {
                        $("#posted").slideUp(200);
                        setTimeout(function () {
                            $("#postSection").slideDown(200);
                        }, 200);
                    }
                    else {
                        $("#postSection").slideUp(200);
                        setTimeout(function () {
                            $("#posted").slideDown(200);
                        }, 200);
                    }
                    //if (!data[0].payrun.isPosted)i
                    //els
                    //    $("#postSection").slideDown(200);
                    setTimeout(function () {
                        var grid = $("#PayrunsHistoryGrid")[0].ej2_instances[0];
                        grid.showSpinner();

                        grid.dataSource = data.dataSource;
                        grid.refresh();

                        grid.hideSpinner();
                    }, 200);
                }
                else {
                    $(".control-section").slideUp(200);
                    $("#postSection").slideUp(200);
                    $("#posted").slideUp(200);
                    $("#generateSection").slideDown(200);
                }
            },
            error: function (data) {
                $(".control-section").slideUp(200);
                $("#postSection").slideUp(200);
                $("#posted").slideUp(200);
                $("#generateSection").slideDown(200);

                console.log(data);
                if (data.responseJSON != null) {
                    swal.fire('Failed', data.responseJSON, 'error')
                }
            }
        })
    };

    function actionComplete(args) {
        if (args.requestType == "save") {

        }
        else if (args.requestType == "delete-not-possible")
        {

        }
    }
    function commandClick(args)
    {
        if (args.commandColumn.type == "View")
        {
            var params = args.rowData;  // display row data
            console.log(params);
        }
        else if (args.commandColumn.type == "ViewPayslip")
        {
            var year = $('#PERIOD').find('option:selected').attr('data-year');
            var month = $('#PERIOD').find('option:selected').attr('data-month');

            swal.showLoading();
            $.ajax({
                url: '@Url.Content("~")/Payroll/Payrun/Run?handler=Payslip',
                async: true,
                type: "GET",
                data: { month: month, year: year, employeeId: args.rowData.employeeId },
                success: function (data) {
                    swal.hideLoading();

                    swal.fire({
                        title: '<strong>Payslip</strong>',
                        html: data,
                        showCloseButton: true,
                        showCancelButton: true,
                        focusConfirm: false,
                        confirmButtonText:
                            '<i class="zmdi zmdi-print"></i> Print',
                        confirmButtonAriaLabel: 'Print Payslip',
                        cancelButtonText:
                            'Close',
                        cancelButtonAriaLabel: 'Close'
                    }).then(function (args) {
                        console.log(args);
                        if (args.value == true) {
                            var mywindow = window.open('', 'PRINT', 'height=400,width=600');

                            mywindow.document.write('<html><head><title>' + document.title + '</title>' + '<link href="~/styles/cerp/cosmos.min.css" rel="stylesheet" />' + '<link href="~/styles/cerp/application.min.css" rel="stylesheet" />');
                            mywindow.document.write('</head><body >');
                            mywindow.document.write('<h1>' + document.title + '</h1>');
                            mywindow.document.write(document.getElementById("payslipPreview").innerHTML);
                            mywindow.document.write('</body></html>');

                            mywindow.document.close(); // necessary for IE >= 10
                            mywindow.focus(); // necessary for IE >= 10*/

                            mywindow.print();
                            mywindow.close();
                        }
                    });
                }
            });
        }
        else if (args.commandColumn.type == "Copy") {
            this.copy(false);
        }
    }

    function onLoad() {
        this.parentDetails.parentKeyFieldValue = this.parentDetails.parentRowData['Id'];
    }
    function toolbarClick(args) {
        console.log(args);
        var gridObj = document.getElementById("PayrunsHistoryGrid").ej2_instances[0];
        if (args.item.id === 'PayrunsHistoryGrid_pdfexport') {
            gridObj.pdfExport();
        }
        if (args.item.id === 'PayrunsHistoryGrid_excelexport') {
            gridObj.excelExport();
        }
        if (args.item.id === 'PayrunsHistoryGrid_csvexport') {
            gridObj.csvExport();
        }
        if (this.getSelectedRecords().length > 0) {
            var withHeader = false;
            if (args.item.id === 'copyHeader') {
                withHeader = true;
            }
            this.copy(withHeader);
        } else {
            if (args.item.id === 'copyHeader') {
                var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                dialogObj.show();
            }
            else if (args.item.id === 'copy') {
                var dialogObj = document.getElementById('alert_dialog_1').ej2_instances[0];
                dialogObj.show();
            }
        }
        if (args.item.id === 'showActions') {
            gridObj.toolbar = [{ text: "Hide Actions", tooltipText: "Actions", prefixIcon: "e-custom-hide-actions", id: "hideActions" }, { text: "Toggle Grouping", tooltipText: "Grouping", prefixIcon: "e-custom-group-toggle", id: "toggleGrouping" }, { text: "Toggle Detailed", tooltipText: "Toggle Detailed", prefixIcon: "e-toggledetailed", id: "toggleDetailed" }, "ExcelExport", "CsvExport", "Print", "Search",{ text: "Copy", tooltipText: "Copy", prefixIcon: "e-copy", id: "copy" }, { text: "Copy With Header", tooltipText: "Copy With Header", prefixIcon: "e-copy", id: "copyHeader" }, "ColumnChooser"];
    gridObj.refresh();
        }
        if (args.item.id === 'hideActions') {
            gridObj.toolbar = [{ text: "Show Actions", tooltipText: "Actions", prefixIcon: "e-custom-show-actions", id: "showActions" }, "Search", "ColumnChooser"];
            gridObj.showColumnChooser = true;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleGrouping') {
            gridObj.allowGrouping = !gridObj.allowGrouping;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleDetailed') {
            var visCount = 0;
            for (var i = 0; i < gridObj.columns.length; i++) {
                if (gridObj.columns[i].visible) visCount++;
            }
            if (visCount == gridObj.columns.length) {
                for (var i = 0; i < gridObj.columns.length; i++) {
                    var col = gridObj.columns[i];
                    if (typeof col.customAttributes != 'undefined' && typeof col.customAttributes.id != 'undefined' && col.customAttributes.id == 'detailed')
                        gridObj.showHider.hide(col.headerText, 'headerText');
                    else
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
            else {
                for (var i = 0; i < gridObj.columns.length; i++) {
                    var col = gridObj.columns[i];
                    gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
            gridObj.refresh();
        }
    }
    function alertBtnClick() {
        var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
        var dialogObj1 = document.getElementById('alert_dialog_1').ej2_instances[0];
        dialogObj.hide();
        dialogObj1.hide();
    }
    var initial = true;
    function dataBound(args) {
        //this.autoFitColumns();
        //if (initial == true) {
        //    this.groupModule.collapseAll();
        //    initial = false;
        //}
        //console.log(args);
    }
</script>