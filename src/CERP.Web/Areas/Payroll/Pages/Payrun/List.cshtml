@page "/Payroll/Payrun"
@using CERP.Setup.DTOs;
@model CERP.Web.Areas.Payroll.Pages.PayrunPage.ListModel
@{
    ViewData["Title"] = "Payrun";
    ViewData["IconClass"] = "fas fa-calendar-check";
    ViewData["HeaderTitle"] = "PAYRUNS";
    ViewData["SubTitle"] = "List of Payruns";
    ViewData["Area"] = "Payroll";

    ViewData["IsList"] = false;
    ViewData["IsCreate"] = true;
    ViewData["CreateNewText"] = "New Payrun";
    ViewData["CreateNewLink"] = "/Payrun/Run";

    var alertanimation = new Syncfusion.EJ2.Popups.DialogAnimationSettings { Effect = Syncfusion.EJ2.Popups.DialogEffect.None };
}
@section styles {
    <link href="~/libs/syncfusion/ej2-grid/styles/fabric.css" rel="stylesheet" />

    <style>
        .e-grid .e-headercell {
            background-color: #f5f5f5;
            /*font-size: 18px;*/
        }

        .e-detailcell .e-headercell {
            background-color: #6691b1 !important;
            color: rgb(253,253,253);
            /*font-size: 18px;*/
        }
    </style>
}
@section scripts {
    <!-- Syncfusion Essential JS 2 Scripts -->
    <script src="~/libs/syncfusion/ej2-grid/scripts/ej2.min.js"></script>
    <script>
        $(document).ready(function () {
            $("#closePaymentSheetBtn").on('click', function () {
                console.log('Hellooo');
                $('#paymentsSheetSection').slideUp(200);
                $("#PayrunsGridContainer").stop().animate({ height: '100%', height: '-webkit-fill-available', height: '-moz-fill-available', height: 'fill-available' }, 150);
                //$("#paymentsSheetSection").stop().animate({ height: '44%' }, 150);
            });
        });

    </script>
    <ejs-scripts></ejs-scripts>

}
<partial name="_DefaultPageHeader" />
<div class="site-content customContentArea">
    <div id="payrunsSection" class="col-md-12 h-fill-available">
        <div class="control-section">
            <ejs-grid id="PayrunsHistoryGrid" dataSource="@ViewData["Payruns_DS"]" queryCellInfo="QueryCellInfo" childGrid="@Model.SecondaryDetailsGrid"
                      enableAutoFill="true" columns="@Model.GetPrimaryGridColumns()" rowDataBound="rowDataBound"
                      dataBound="dataBound" commandClick="commandClick" actionComplete="actionComplete"
                      allowExcelExport="true" allowGrouping="true" height="100%" allowPdfExport="true"
                      hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true"
                      allowSorting="true" allowMultiSorting="true" gridLines="Both"
                      toolbarClick="toolbarClick" toolbar="@(new List<object>() {"ExcelExport", "PdfExport", "CsvExport", "Print", "Search", "Delete", new { text = "Copy", tooltipText = "Copy", prefixIcon = "e-copy", id = "copy" }, new { text = "Copy With Header", tooltipText = "Copy With Header", prefixIcon = "e-copy", id = "copyHeader" } })"
                      allowPaging="true" allowResizing="true">

                <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="false"></e-grid-editSettings>
                <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
            </ejs-grid>
        </div>
    </div>
    <div id="sectionDiv" class="col-xs-2 h-fill-available" style="display:none">
        <vhr />
    </div>
    <div id="paymentsSheetSection" class="col-md-4 h-fill-available" style="padding-top:0; background-color: rgb(253,253,253); display:none">
        <partial name="_PaymentSheet" model="null" />
    </div>
</div>

<ejs-dialog id="alert_dialog" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy with Header" content="Atleast one row should be selected to copy with header">
    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
    </e-dialog-buttons>
</ejs-dialog>
<ejs-dialog id="alert_dialog_1" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy" content="Atleast one row should be selected to copy">
    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
    </e-dialog-buttons>
</ejs-dialog>

<script>

    function DeletePayrun(month, year) {
        var xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();

        $.ajax({
            url: '@Url.Content("~")/Payroll/Payrun?handler=Payrun',
            async: true,
            type: "DELETE",
            data: { year: year, month: month, __RequestVerificationToken: xhrToken },
            success: function (data) {
                swal.fire('Success', 'Payrun successfully posted', 'success')
            },
            error: function (data) {
                swal.fire('Failed', `Payrun couldn't be deleted`, 'error');
                location.reload(true);
            }
        });
        //swal.fire('Are you sure?', 'Are your sure you want to delete this payrun', 'warning')
        //    .then(function () {

        //    });
    }

    function rowDataBound(args) {
        if (args.data.isPosted) {
            if (args.data.attachmentFile != '')
                $(".e-" + "View Attachment" + "Button", args.row).removeClass("e-hide");
            $(".e-" + "View Payments Sheet" + "Button", args.row).removeClass("e-hide");
            $(".e-" + "View Reconciliation" + "Button", args.row).removeClass("e-hide");
            $(".e-" + "View" + "Button", args.row).removeClass("e-hide");

            $(".e-" + "Edit" + "Button", args.row).addClass("e-hide");
            $(".e-" + "Delete" + "Button", args.row).addClass("e-hide");
        }
        else {
            $(".e-" + "View Attachment" + "Button", args.row).addClass("e-hide");
            $(".e-" + "View Payments Sheet" + "Button", args.row).addClass("e-hide");
            $(".e-" + "View Reconciliation" + "Button", args.row).addClass("e-hide");
            $(".e-" + "View" + "Button", args.row).addClass("e-hide");

            $(".e-" + "Edit" + "Button", args.row).removeClass("e-hide");
            $(".e-" + "Delete" + "Button", args.row).removeClass("e-hide");
        }
    }

    function QueryCellInfo(args) {
        if (args.cell.innerText == '') {
            if(typeof args.column.field != 'undefined')
                args.cell.innerText = '—';
        }
        else {
            if (args.column.field.includes("Value") || args.column.field.includes("BasicSalar") || args.column.field == 'totalEarnings' || args.column.field == 'totalDeductions' || args.column.field == 'netTotal') {
                const options = {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                };
                var value = parseFloat(args.cell.innerText);
                const formatted = Number(value).toLocaleString('en', options);
                args.cell.innerText = 'SAR ' + formatted // change decimal ;
            }
        }
    }

    function actionComplete(args) {
        if (args.requestType == "save") {

        }
        else if (args.requestType == "delete")
        {
            console.log(args.data[0]);
            DeletePayrun(args.data[0].month, args.data[0].year);
        }
    }
    function actionBegin(args) {
        if (args.requestType == "save") {

        }
        else if (args.requestType == "delete")
        {
            //DeletePayrun(args.data[0].year, args.data[0].month);
        }
    }
    function commandClick(args)
    {
        if (args.commandColumn.type == "Edit")
        {
            var params = args.rowData;  // display row data

            window.location = `@Url.Content("~")/Payroll/Payrun/Run?foryear=${params.year}&formonth=${params.month}`;
        }
        else if (args.commandColumn.type == "View Attachment") {
            var data = args.rowData;
            var re = /(?:\.([^.]+))?$/;
            var ext = re.exec(data.attachmentFile)[1];   // "txt"
            var html = ``;
            html += `<hr class='m-t-0 p-t-0'/>`
            if (data.attachmentFile == '') {
                 html += `<div style="margin: 0px; padding: 0px;height:auto;width:100%;">
                           <p>No attachment found for this payrun</p>
                        </div>`
            }
            else {
                if (ext == "jpg" || ext == "jpeg" || ext == "png" || ext == "ico") {
                    html += `<div style="margin: 0px; padding: 0px;height:auto;width:100%;">
                           <img src="/Uploads/${data.attachmentFile}" style="height: 100%; width: 100%;" />
                        </div>`
                }
                else {
                    html += `<div style="margin: 0px; padding: 0px;height:auto;width:100%;">
                           <p>The selected document isn't supported for preview. <br/> You may download it and view it locally</p>
                        </div>`
                }
            }
            html += `<hr class='m-b-0 p-b-0'/>`
            Swal.fire({
                title: `<strong>Attachment</strong>`,
                html: html,
                showCloseButton: true,
                showCancelButton: true,
                focusConfirm: false,
                confirmButtonText:
                    `<a style="text-decoration: none; color: white;" id="downlod" download="Attachment_Document.${ext}" href='/Uploads/${data.attachmentFile}' ><i class="zmdi zmdi-download m-r-5"></i> Download</a>`,
                  confirmButtonAriaLabel: 'Download Document',
                  cancelButtonText:
                    'Close',
                  cancelButtonAriaLabel: 'Close'
            }).then((result) => {
                if (result.value) {
                    //e.preventDefault();  //stop the browser from following
                    //top.location.href = `/Uploads/${data.fileName}`;
                    Swal.fire(
                        'Downloaded',
                        'Your file has been downloaded.',
                        'success'
                    )
                }
            });


        }
        else if (args.commandColumn.type == "View")
        {
            var params = args.rowData;  // display row data

            window.location = `@Url.Content("~")/Payroll/Payrun/Run?foryear=${params.year}&formonth=${params.month}`;
        }
        else if (args.commandColumn.type == "Copy") {
            this.copy(false);
        }
        else if (args.commandColumn.type == "View Reconciliation") {
            var params = args.rowData;  // display row data

            window.location = `@Url.Content("~")/Payroll/Reconciliation?P1Year=${params.year}&P1Month=${params.month-1}&P2Year=${params.year}&P2Month=${params.month}`;
        }
        else if (args.commandColumn.type == "View Payments Sheet") {
            var params = args.rowData;  // display row data
        
            $.ajax({
                url: '@Url.Content("~")/Payroll/Payrun?handler=PaymentsSheet',
                async: true,
                type: "GET",
                data: { payrunId: params.id },
                success: function (data) {
                    let isVisible = $("#paymentsSheetSection").css('display') != 'none';
                    let waitAnim = 0;
                    if (isVisible) {
                        var grid = $('#PaymentSheetGrid')[0].ej2_instances[0];
                        waitAnim = 200;
                        $('#paymentsSheetSection').slideUp(200);
                        if (grid.dataSource != null && grid.dataSource[0].payrunId == params.id) {
                            $("#paymentsSheetSection").stop().animate({ width: '0' }, 150);
                            $("#sectionDiv").stop().animate({ width: '0' }, 150);
                            $('#sectionDiv').slideUp(200);
                            $("#payrunsSection").stop().animate({ width: '100%' }, 150);
                            $('#paymentsSheetSection').slideUp(200);
                            return;
                        }
                    }
                    setTimeout(function () {
                        //$("#payrunsSection").stop().animate({ width: '50%' }, 150);
                        //$("#sectionDiv").stop().animate({ width: '20px' }, 150);
                        //$("#paymentsSheetSection").stop().animate({ width: '100%' }, 150);

                        var grid = $('#PaymentSheetGrid')[0].ej2_instances[0];
                        setTimeout(function () {
                            grid.dataSource = data;
                            grid.refresh();
                        }, 50);

                        $("#payrunsSection").removeClass('col-md-12');
                        $("#payrunsSection").addClass('col-md-6');
                        //$("#payrunsSection").stop().animate({ width: '100%' }, 150);

                        $('#paymentsSheetSection').slideDown(200);

                        $('#sectionDiv').slideDown(200);
                    }, waitAnim)
                    
                    //var html = ``;
                    //html += `<hr class='m-t-0 p-t-0'/>`
                    //if (data == '') {
                    //        html += `<div style="margin: 0px; padding: 0px;height:auto;width:100%;">
                    //                <p>Unable to generate payment slip for this payrun</p>
                    //            </div>`
                    //}
                    //else {
                    //    html += `<div style="margin: 0px; padding: 0px;height:auto;width:100%;">
                    //            ${data}
                    //        </div>`
                    //}
                    //html += `<hr class='m-b-0 p-b-0'/>`
                    //Swal.fire({
                    //    title: `<strong>Payment Sheet</strong>`,
                    //    html: html,
                    //    showCloseButton: true,
                    //    showCancelButton: true,
                    //    focusConfirm: false,
                    //    cancelButtonText:
                    //    'Close',
                    //    cancelButtonAriaLabel: 'Close'
                    //})
                },
                error: function (data) {
                    $("#PayrunsGridContainer").stop().animate({ height: '100%', height: '-webkit-fill-available', height: '-moz-fill-available', height: 'fill-available' }, 150);
                     $('#paymentsSheetSection').slideUp(200);
                    swal.fire('Failed', `Payment slip for this payrun couldn't be generated`, 'error');
                    //location.reload(true);
                }
            });
            //window.location = `@Url.Content("~")/Payroll/Reconciliation?fromYear=${params.year-1}&fromMonth=${params.month-1}&toYear=${params.year}&toMonth=${params.month}`;
        }
    }

    function onLoad() {
        this.parentDetails.parentKeyFieldValue = this.parentDetails.parentRowData['Id'];
    }
    function toolbarClick(args) {
        var gridObj = document.getElementById("PayrunsHistoryGrid").ej2_instances[0];
        if (args.item.id === 'PayrunsHistoryGrid_pdfexport') {
            gridObj.pdfExport();
        }
        if (args.item.id === 'PayrunsHistoryGrid_excelexport') {
            gridObj.excelExport();
        }
        if (args.item.id === 'PayrunsHistoryGrid_csvexport') {
            gridObj.csvExport();
        }
        if (this.getSelectedRecords().length > 0) {
            var withHeader = false;
            if (args.item.id === 'copyHeader') {
                withHeader = true;
            }
            this.copy(withHeader);
        } else {
            if (args.item.id === 'copyHeader') {
                var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                dialogObj.show();
            }
            else if (args.item.id === 'copy') {
                var dialogObj = document.getElementById('alert_dialog_1').ej2_instances[0];
                dialogObj.show();
            }
        }
    }
    function alertBtnClick() {
        var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
        var dialogObj1 = document.getElementById('alert_dialog_1').ej2_instances[0];
        dialogObj.hide();
        dialogObj1.hide();
    }
    var initial = true;
    function dataBound(args) {
        //this.autoFitColumns();
        //if (initial == true) {
        //    this.groupModule.collapseAll();
        //    initial = false;
        //}
        //console.log(args);
    }
</script>