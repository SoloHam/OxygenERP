@page "/Payroll/Payrun"
@using CERP.Setup.DTOs;
@model CERP.Web.Areas.Payroll.Pages.PayrunPage.ListModel
@{
    ViewData["Title"] = "Payrun";
    ViewData["IconClass"] = "fas fa-calendar-check";
    ViewData["HeaderTitle"] = "PAYRUNS";
    ViewData["SubTitle"] = "List of Payruns";
    ViewData["Area"] = "Payroll";

    ViewData["IsList"] = false;
    ViewData["IsCreate"] = true;
    ViewData["CreateNewText"] = "New Payrun";
    ViewData["CreateNewLink"] = "/Payrun/Run";

    var alertanimation = new Syncfusion.EJ2.Popups.DialogAnimationSettings { Effect = Syncfusion.EJ2.Popups.DialogEffect.None };

    var initialToolBar = new List<object>() { new { text = "Show Actions", tooltipText = "Actions", prefixIcon = "e-chevron-right", id = "showActions" } };
    var fullToolBar = new List<object>() { new { text = "Hide Actions", tooltipText = "Actions", prefixIcon = "e-chevron-left", id = "hideActions" }, new { text = "Toggle Grouping", tooltipText = "Grouping", prefixIcon = "e-chevron-up", id = "hideActions" }, "ExcelExport", "PdfExport", "CsvExport", "Print", "Search", "Delete", new { text = "Copy", tooltipText = "Copy", prefixIcon = "e-copy", id = "copy" }, new { text = "Copy With Header", tooltipText = "Copy With Header", prefixIcon = "e-copy", id = "copyHeader" } };
}
@section styles {
    <link href="~/libs/syncfusion/ej2-grid/styles/fabric.css" rel="stylesheet" />

    <style>
        .e-grid .e-headercell {
            background-color: #f5f5f5;
            /*font-size: 18px;*/
        }

        .e-detailcell .e-headercell {
            background-color: #6691b1 !important;
            color: rgb(253,253,253);
            /*font-size: 18px;*/
        }
        #payrunsSection {
            transition: all .2s;
        }
        .dividePayrun{
            position: absolute;
        }
        @@media screen and (max-width:780px) {
            #paymentsSheetSection {
                margin-top: 20px;
            }
        }
        @@media screen and (max-width:1000px) {
            #paymentsSheetSection {
                margin-top: 20px;
                margin-left: 0!important;
                padding-left: 0px;
            }

            .dividePayrun {
                position: unset;
                padding-right: 0px;
            }

            /*.customContentArea{
                position: unset;
            }*/
        }
    </style>
}
@section scripts {
    <!-- Syncfusion Essential JS 2 Scripts -->
    <script src="~/libs/syncfusion/ej2-grid/scripts/ej2.min.js"></script>
    <script>
        $(document).ready(function () {
            $("#closePaymentSheetBtn").on('click', function () {
                $('#paymentsSheetSection').slideUp(200);
                $("#PayrunsGridContainer").stop().animate({ height: '100%', height: '-webkit-fill-available', height: '-moz-fill-available', height: 'fill-available' }, 150);
                //$("#paymentsSheetSection").stop().animate({ height: '44%' }, 150);
            });
        });

    </script>
    <ejs-scripts></ejs-scripts>

}
<partial name="_DefaultPageHeader" />
<div class="site-content customContentArea">
    <div class="col-md-12 h-fill-available">
        <div id="payrunsSection" class="col-md-12 h-fill-available p-l-0">
            <div class="control-section">
                <ejs-grid id="PayrunsHistoryGrid" dataSource="@ViewData["Payruns_DS"]" queryCellInfo="QueryCellInfo" childGrid="@Model.SecondaryDetailsGrid"
                          enableAutoFill="true" columns="@Model.GetPrimaryGridColumns()" rowDataBound="rowDataBound"
                          dataBound="dataBound" commandClick="commandClick" actionComplete="actionComplete"
                          allowExcelExport="true" allowGrouping="true" height="100%" allowPdfExport="true"
                          hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true"
                          allowSorting="true" allowMultiSorting="true" gridLines="Both"
                          toolbarClick="toolbarClick" toolbar="@initialToolBar"
                          allowPaging="true" allowResizing="true">

                    <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                    <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="false"></e-grid-editSettings>
                    <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                    <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                </ejs-grid>
            </div>
        </div>
        <div id="paymentsSheetSection" class="col-md-6 h-fill-available p-r-0" style="padding-top:0; background-color: rgb(253,253,253); display:none">
        <partial name="_PaymentSheet" model="null" />
    </div>
    </div>
    <div id="indemnitySheetSection" class="col-md-12 m-t-20" style="padding-top:0; background-color: rgb(253,253,253); display:none">
        <partial name="_PayrunIndemnity" model="@Model.GetIndemnityModel()" />
    </div>
</div>

<ejs-dialog id="alert_dialog" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy with Header" content="Atleast one row should be selected to copy with header">
    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
    </e-dialog-buttons>
</ejs-dialog>
<ejs-dialog id="alert_dialog_1" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy" content="Atleast one row should be selected to copy">
    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
    </e-dialog-buttons>
</ejs-dialog>

<script>

    function DeletePayrun(month, year) {
        var xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();

        $.ajax({
            url: '@Url.Content("~")/Payroll/Payrun?handler=Payrun',
            async: true,
            type: "DELETE",
            data: { year: year, month: month, __RequestVerificationToken: xhrToken },
            success: function (data) {
                swal.fire('Success', 'Payrun successfully posted', 'success')
            },
            error: function (data) {
                swal.fire('Failed', `Payrun couldn't be deleted`, 'error');
                location.reload(true);
            }
        });
        //swal.fire('Are you sure?', 'Are your sure you want to delete this payrun', 'warning')
        //    .then(function () {

        //    });
    }

    function rowDataBound(args) {
        if (args.data.isPosted) {
            if (args.data.attachmentFile != null) {
                $(".e-" + "View-Attach-" + "Button", args.row).removeClass("e-hide");
                console.log("Yupi");
            } else {
                $(".e-" + "View-Attach-" + "Button", args.row).addClass("e-hide");
                console.log("Yup");
            }
            $(".e-" + "View-Payments-Sheet-" + "Button", args.row).removeClass("e-hide");
            var gridObj = document.getElementById("PayrunsHistoryGrid").ej2_instances[0];
            var lastPayrun = gridObj.dataSource.find(x => x.month == args.data.month - 1 && x.year == args.data.year);
            if (typeof lastPayrun != 'undefined') {
                $(".e-" + "View-Reconciliation-" + "Button", args.row).removeClass("e-hide");
            }
            else {
                $(".e-" + "View-Reconciliation-" + "Button", args.row).addClass("e-hide");
            }
            $(".e-" + "View" + "Button", args.row).removeClass("e-hide");

            $(".e-" + "Edit" + "Button", args.row).addClass("e-hide");
            $(".e-" + "Delete" + "Button", args.row).addClass("e-hide");
        }
        else {
            $(".e-" + "View-Attachment-" + "Button", args.row).addClass("e-hide");
            $(".e-" + "View-Payment-Sheet-" + "Button", args.row).addClass("e-hide");
            $(".e-" + "View-Reconciliation-" + "Button", args.row).addClass("e-hide");
            $(".e-" + "View" + "Button", args.row).addClass("e-hide");

            $(".e-" + "Edit" + "Button", args.row).removeClass("e-hide");
            $(".e-" + "Delete" + "Button", args.row).removeClass("e-hide");
        }
    }

    function QueryCellInfo(args) {
        if (args.cell.innerText == '') {
            if(typeof args.column.field != 'undefined')
                args.cell.innerText = '—';
        }
        else {
            if (args.column.field.includes("Value") || args.column.field.includes("BasicSalar") || args.column.field == 'totalEarnings' || args.column.field == 'totalDeductions' || args.column.field == 'netTotal') {
                const options = {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                };
                var value = parseFloat(args.cell.innerText);
                const formatted = Number(value).toLocaleString('en', options);
                args.cell.innerText = 'SAR ' + formatted // change decimal ;
            }
        }
    }

    function actionComplete(args) {
        if (args.requestType == "save") {

        }
        else if (args.requestType == "delete")
        {
            console.log(args.data[0]);
            DeletePayrun(args.data[0].month, args.data[0].year);
        }
    }
    function actionBegin(args) {
        if (args.requestType == "save") {

        }
        else if (args.requestType == "delete")
        {
            //DeletePayrun(args.data[0].year, args.data[0].month);
        }
    }
    function commandClick(args)
    {
        if (args.commandColumn.type == "Edit")
        {
            var params = args.rowData;  // display row data

            window.location = `@Url.Content("~")/Payroll/Payrun/Run?foryear=${params.year}&formonth=${params.month}`;
        }
        else if (args.commandColumn.type == "View Attachment") {
            var data = args.rowData;
            var re = /(?:\.([^.]+))?$/;
            var ext = re.exec(data.attachmentFile)[1];   // "txt"
            var html = ``;
            html += `<hr class='m-t-0 p-t-0'/>`
            if (data.attachmentFile == '') {
                 html += `<div style="margin: 0px; padding: 0px;height:auto;width:100%;">
                           <p>No attachment found for this payrun</p>
                        </div>`
            }
            else {
                if (ext == "jpg" || ext == "jpeg" || ext == "png" || ext == "ico") {
                    html += `<div style="margin: 0px; padding: 0px;height:auto;width:100%;">
                           <img src="/Uploads/${data.attachmentFile}" style="height: 100%; width: 100%;" />
                        </div>`
                }
                else {
                    html += `<div style="margin: 0px; padding: 0px;height:auto;width:100%;">
                           <p>The selected document isn't supported for preview. <br/> You may download it and view it locally</p>
                        </div>`
                }
            }
            html += `<hr class='m-b-0 p-b-0'/>`
            Swal.fire({
                title: `<strong>Attachment</strong>`,
                html: html,
                showCloseButton: true,
                showCancelButton: true,
                focusConfirm: false,
                confirmButtonText:
                    `<a style="text-decoration: none; color: white;" id="downlod" download="Attachment_Document.${ext}" href='/Uploads/${data.attachmentFile}' ><i class="zmdi zmdi-download m-r-5"></i> Download</a>`,
                  confirmButtonAriaLabel: 'Download Document',
                  cancelButtonText:
                    'Close',
                  cancelButtonAriaLabel: 'Close'
            }).then((result) => {
                if (result.value) {
                    //e.preventDefault();  //stop the browser from following
                    //top.location.href = `/Uploads/${data.fileName}`;
                    Swal.fire(
                        'Downloaded',
                        'Your file has been downloaded.',
                        'success'
                    )
                }
            });


        }
        else if (args.commandColumn.type == "View")
        {
            var params = args.rowData;  // display row data

            window.location = `@Url.Content("~")/Payroll/Payrun/Run?foryear=${params.year}&formonth=${params.month}`;
        }
        else if (args.commandColumn.type == "Copy") {
            this.copy(false);
        }
        else if (args.commandColumn.type == "View Reconciliation") {
            var params = args.rowData;  // display row data

            window.location = `@Url.Content("~")/Payroll/Reconciliation?P1Year=${params.year}&P1Month=${params.month-1}&P2Year=${params.year}&P2Month=${params.month}`;
        }
        else if (args.commandColumn.type == "View Payments Sheet") {
            var params = args.rowData;  // display row data
            var grid = $('#PaymentSheetGrid')[0].ej2_instances[0];
            let isVisible = $("#paymentsSheetSection").css('display') != 'none';
            if (isVisible && grid.dataSource != null && grid.dataSource[0].payrunId == params.id) {
                //$("#paymentsSheetSection").stop().animate({ width: '0' }, 150);

                $('#paymentsSheetSection').slideUp(200);
                setTimeout(function () {
                    $("#payrunsSection").removeClass('col-md-6');
                    $("#payrunsSection").addClass('col-md-12');
                    $("#paymentsSheetSection").removeClass('col-md-6');
                }, 200);
                //$("#sectionDiv").stop().animate({ width: '0' }, 150);
                //$('#sectionDiv').slideUp(200);
                //$("#payrunsSection").stop().animate({ width: '100%' }, 150);
                return;
            }
            grid.showSpinner();
            var gridMain = $('#PayrunsHistoryGrid')[0].ej2_instances[0];
            if (!isVisible) {
                gridMain.showSpinner();
            }
            $.ajax({
                url: '@Url.Content("~")/Payroll/Payrun?handler=PaymentsSheet',
                async: true,
                type: "GET",
                data: { payrunId: params.id },
                success: function (data) {

                    let waitAnim = 0;
                    if (isVisible) {

                        waitAnim = 100;
                        $('#paymentsSheetSection').slideUp(waitAnim);

                    }
                    else {
                        gridMain.hideSpinner();
                    }
                    setTimeout(function () {
                        $("#payrunsSection").removeClass('col-md-12');
                        $("#payrunsSection").addClass('col-md-6');

                        $("#paymentsSheetSection").show();
                        $("#paymentsSheetSection").addClass('col-md-6');
                        setTimeout(function () {
                            $("#paymentsSheetSection").hide();
                            $('#paymentsSheetSection').slideDown(200);

                            setTimeout(function () {
                                if ($('#indemnitySheetSection').css('display') != 'none') {
                                    $('#payrunsSection').addClass('dividePayrun');
                                    $('#paymentsSheetSection').css('margin-left', '50%');
                                }
                            }, 200);
                        }, 200);

                        var grid = $('#PaymentSheetGrid')[0].ej2_instances[0];
                        setTimeout(function () {
                            grid.dataSource = data;
                            grid.refresh();
                            gridMain.refresh();
                        }, 50);
                    }, waitAnim)

                    //var html = ``;
                    //html += `<hr class='m-t-0 p-t-0'/>`
                    //if (data == '') {
                    //        html += `<div style="margin: 0px; padding: 0px;height:auto;width:100%;">
                    //                <p>Unable to generate payment slip for this payrun</p>
                    //            </div>`
                    //}
                    //else {
                    //    html += `<div style="margin: 0px; padding: 0px;height:auto;width:100%;">
                    //            ${data}
                    //        </div>`
                    //}
                    //html += `<hr class='m-b-0 p-b-0'/>`
                    //Swal.fire({
                    //    title: `<strong>Payment Sheet</strong>`,
                    //    html: html,
                    //    showCloseButton: true,
                    //    showCancelButton: true,
                    //    focusConfirm: false,
                    //    cancelButtonText:
                    //    'Close',
                    //    cancelButtonAriaLabel: 'Close'
                    //})
                },
                error: function (data) {
                    grid.hideSpinner();
                    gridMain.hideSpinner();
                    $("#PayrunsGridContainer").stop().animate({ height: '100%', height: '-webkit-fill-available', height: '-moz-fill-available', height: 'fill-available' }, 150);
                     $('#paymentsSheetSection').slideUp(200);
                    swal.fire('Failed', `Payment sheet for this payrun couldn't be generated`, 'error');
                    //location.reload(true);
                }
            });
            //window.location = `@Url.Content("~")/Payroll/Reconciliation?fromYear=${params.year-1}&fromMonth=${params.month-1}&toYear=${params.year}&toMonth=${params.month}`;
        }
        else if (args.commandColumn.type == "Generate Indemnity") {
            var params = args.rowData;  // display row data
            let isVisible = $("#indemnitySheetSection").css('display') != 'none';
            var gridMain = $('#PayrunsHistoryGrid')[0].ej2_instances[0];
            var grid = $('#EOSBGrid')[0].ej2_instances[0];
            if (isVisible && grid.dataSource != null && grid.dataSource[0].payrunId == params.id) {
                //$("#paymentsSheetSection").stop().animate({ width: '0' }, 150);

                $('#indemnitySheetSection').slideUp(100);
                setTimeout(function () {
                    $(".customContentArea").css('position', 'absolute');
                    gridMain.refresh();
                    $('#payrunsSection').removeClass('dividePayrun');
                    $('#paymentsSheetSection').css('margin-left', '0');
                }, 200);
                //$("#sectionDiv").stop().animate({ width: '0' }, 150);
                //$('#sectionDiv').slideUp(200);
                //$("#payrunsSection").stop().animate({ width: '100%' }, 150);
                return;
            }
            if (!isVisible) {
                gridMain.showSpinner();
            }
            $('#indemnitySheetSection').slideUp(150);
            $(".customContentArea").css('position', 'absolute');
            $('#payrunsSection').removeClass('dividePayrun');
            $.ajax({
                url: '@Url.Content("~")/Payroll/Payrun?handler=IndemnitySheet',
                async: true,
                type: "GET",
                data: { payrunId: params.id },
                success: function (data) {
                    console.log(data);
                    gridMain.hideSpinner();
                    setTimeout(function () {
                        setTimeout(function () {
                            grid.dataSource = data.EOSBDS;
                            grid.refresh();
                        }, 50);

                        $(".customContentArea").css('position', 'unset');
                        $('#indemnitySheetSection').slideDown(100);
                        setTimeout(function () {
                            if($('#paymentsSheetSection').css('display') != 'none'){
                                $('#payrunsSection').addClass('dividePayrun');
                                $('#paymentsSheetSection').css('margin-left', '50%');
                            }
                        }, 100)
                    }, 150);
                },
                error: function (data) {
                    gridMain.hideSpinner();
                    $('#indemnitySheetSection').slideUp(200);
                    swal.fire('Failed', `Indemnity for this payrun couldn't be generated`, 'error');
                    //location.reload(true);
                }
            });
            //window.location = `@Url.Content("~")/Payroll/Reconciliation?fromYear=${params.year-1}&fromMonth=${params.month-1}&toYear=${params.year}&toMonth=${params.month}`;
        }
    }

    function onLoad() {
        this.parentDetails.parentKeyFieldValue = this.parentDetails.parentRowData['Id'];
    }
    function toolbarClick(args) {
        var gridObj = document.getElementById("PayrunsHistoryGrid").ej2_instances[0];
        if (args.item.id === 'showActions') {
            gridObj.toolbar = [ { text: "Hide Actions", tooltipText: "Actions", prefixIcon: "e-chevron-left", id: "hideActions" }, { text: "Toggle Grouping", tooltipText: "Grouping", prefixIcon: "e-chevron-up", id: "toggleGrouping" }, "ExcelExport", "PdfExport", "CsvExport", "Print", "Search", "Delete", { text: "Copy", tooltipText: "Copy", prefixIcon: "e-copy", id: "copy" }, { text: "Copy With Header", tooltipText: "Copy With Header", prefixIcon: "e-copy", id: "copyHeader" } ];
            gridObj.refresh();
        }
        if (args.item.id === 'hideActions') {
            gridObj.toolbar = [{ text: "Show Actions", tooltipText: "Actions", prefixIcon: "e-chevron-left", id: "showActions" }];
            gridObj.refresh();
        }
        if (args.item.id === 'toggleGrouping') {
            gridObj.allowGrouping = !gridObj.allowGrouping;
            gridObj.refresh();
        }
        if (args.item.id === 'PayrunsHistoryGrid_pdfexport') {
            gridObj.pdfExport();
        }
        if (args.item.id === 'PayrunsHistoryGrid_excelexport') {
            gridObj.excelExport();
        }
        if (args.item.id === 'PayrunsHistoryGrid_csvexport') {
            gridObj.csvExport();
        }
        if (this.getSelectedRecords().length > 0) {
            var withHeader = false;
            if (args.item.id === 'copyHeader') {
                withHeader = true;
            }
            this.copy(withHeader);
        } else {
            if (args.item.id === 'copyHeader') {
                var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                dialogObj.show();
            }
            else if (args.item.id === 'copy') {
                var dialogObj = document.getElementById('alert_dialog_1').ej2_instances[0];
                dialogObj.show();
            }
        }
    }
    function alertBtnClick() {
        var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
        var dialogObj1 = document.getElementById('alert_dialog_1').ej2_instances[0];
        dialogObj.hide();
        dialogObj1.hide();
    }
    var initial = true;
    function dataBound(args) {
        //this.toolbarModule.enableItems(['copy', 'copyHeader', 'PayrunsHistoryGrid_Search', 'PayrunsHistoryGrid_Delete', 'PayrunsHistoryGrid_Print', 'PayrunsHistoryGrid_pdfexport', 'PayrunsHistoryGrid_excelexport', 'PayrunsHistoryGrid_csvexport'], false);
        //this.toolbarModule.enableItems(['showActions',], true);
        //this.autoFitColumns();
        //if (initial == true) {
        //    this.groupModule.collapseAll();
        //    initial = false;
        //}
        //console.log(args);
    }
</script>