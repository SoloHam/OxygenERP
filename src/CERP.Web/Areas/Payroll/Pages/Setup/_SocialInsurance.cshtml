@using Syncfusion.EJ2.Grids;
@using CERP.Payroll.Payrun;
@using CERP.Payroll.DTOs;
@{  
    SISetup Setup = Model.SISetup;
    var contributionsCats = Model.GetContributionCatsDS();
    var contributions = Model.GetContributionsDS();
    List<GridColumn> SICColumns = new List<GridColumn>() {
        new GridColumn { Field = "Id", HeaderText = "", TextAlign=TextAlign.Center, Visible=false, ShowInColumnChooser=false,  MinWidth="10"  },
        new GridColumn { Field = "Title", HeaderText = "Title", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "IsExpense", HeaderText = "Is Expense", EditType="booleanedit", TextAlign=TextAlign.Center, DisplayAsCheckBox=true, MinWidth="10"  },
    };

    var DropDownList = new Syncfusion.EJ2.DropDowns.DropDownList() { CssClass = "categoriesDropDown", BeforeOpen = "loadCategories", DataSource = Model.GetCategoriesDS(), Query = "new ej.data.Query()", AllowFiltering = true};

    List<GridColumn> SICCColumns = new List<GridColumn>() {        
        new GridColumn { Field = "Id", HeaderText = "", TextAlign=TextAlign.Center, Visible=false, ShowInColumnChooser=false,  MinWidth="10"  },
        new GridColumn { Field = "Title", HeaderText = "Title", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "Value", HeaderText = "Value", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "CategoryTitle", HeaderText = "Category", EditType="dropdownedit", TextAlign=TextAlign.Center,  MinWidth="10", Edit=new {@@params = DropDownList }  },
        new GridColumn { Field = "IsPercentage", HeaderText = "Is Percentage", EditType="booleanedit", DisplayAsCheckBox=true, TextAlign=TextAlign.Center,  MinWidth="10"  },
    };
}

@section scripts{
}
<script>
    $(document).ready(function () {

    })
</script>

<div class="m-l-20 m-t-0">
    <h2>Social Insurance</h2>
    <p>
        Provide social insurance setup details
    </p>
</div>
<hr />
<div class="panel-body p-t-0" style="padding-bottom:0;">
    <div class="col-lg-12 padding-right-0">
        <label class="control-label m-b-5 ">Upper Limit:</label>
        <div class="row">
            <div class="col-sm-7" style="padding:0">
                <div class="form-group">
                    <input type="number" value="@(Setup.SI_UpperLimit)" id="upperLimit" name="UpperLimit" @*value="@(empInfo!=null? empInfo.PHONE_NO : "")"*@ style="width:100% !important" class="form-control inline">
                </div>
            </div>

            <div class="col-sm-5" style="padding:0">
                <div class="form-group">
                    <button id="submitUpperLimit" onclick="return setUpperLimit();" type="submit" class="btn btn-success btn-block">SET</button>
                </div>
            </div>
        </div>
        <div class="clearfix margin-5"></div>

        <div class="col-sm-12">
            <div class="col-sm-6">
                <h3 class="control-label m-b-5 font-roboto" style="width: 100%; text-align:center; background-color: #5BCFF3; color:white; padding:10px">Contribution Categories</h3>
                <ejs-grid id="SICGrid" dataSource="@contributionsCats.Value" enableAutoFill="true" columns="@SICColumns"
                          dataBound="dataBoundResponsive"commandClick="commandClick" actionBegin="actionBeginCat"
                          allowExcelExport="true" height="100%" allowPdfExport="true" load="onLoad" actionComplete="actionCompleteCat"
                          hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true"
                          allowSorting="true" allowMultiSorting="true" gridLines="Horizontal"
                          toolbarClick="SICtoolbarClick" showColumnChooser="true" toolbar="@ViewData["initialToolBar"]"
                          allowPaging="true" allowResizing="true">

                    <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                    <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true" newRowPosition="Bottom"></e-grid-editSettings>
                    <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                    <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                </ejs-grid>
            </div>
            <div class="col-sm-6">
                <h3 class="control-label m-b-5 font-roboto" style="width: 100%; text-align:center;background-color: #5BCFF3; color:white; padding:10px">Contributions</h3>
                <ejs-grid id="SICCGrid" dataSource="@contributions.Value" enableAutoFill="true" columns="@SICCColumns"
                          dataBound="dataBoundResponsive"commandClick="commandClick" actionBegin="actionBeginContrib"
                          allowExcelExport="true" height="100%" allowPdfExport="true" load="onLoad" actionComplete="actionCompleteContrib"
                          hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true"
                          allowSorting="true" allowMultiSorting="true" gridLines="Horizontal"
                          toolbarClick="SICCtoolbarClick" showColumnChooser="true" toolbar="@ViewData["initialToolBar"]"
                          allowPaging="true" allowResizing="true">

                    <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                    <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true" newRowPosition="Bottom"></e-grid-editSettings>
                    <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                    <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                </ejs-grid>
            </div>
        </div>

        <form action="/" method="post" hidden>
        </form>

    </div>
</div>

<script>
    function setUpperLimit() {
        console.log($('#upperLimit').val());
        $.ajax({
            url: '@Url.Content("~")Setup?handler=UpperLimit',
            async: false,
            type: "POST",
            data: {
                limit: $('#upperLimit').val(),
                __RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
            },
            success: function (data) {
                console.log(data);
                $('upperLimit').val(data);
                //BindGrid(data.body.key);
                toastr.info(`Social insurance upper limit: ${data}`);
            },
            error: function (err) {
                console.log(err);

            }
        });

        return false;
    }
    function SICtoolbarClick(args) {
        var gridObj = document.getElementById("SICGrid").ej2_instances[0];
        if (args.item.id === 'SICGrid_pdfexport') {
            gridObj.pdfExport();
        }
        if (args.item.id === 'SICGrid_excelexport') {
            gridObj.excelExport();
        }
        if (args.item.id === 'SICGrid_csvexport') {
            gridObj.csvExport();
        }
        if (this.getSelectedRecords().length > 0) {
            var withHeader = false;
            if (args.item.id === 'copyHeader') {
                withHeader = true;
            }
            this.copy(withHeader);
        } else {
            if (args.item.id === 'copyHeader') {
                var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                dialogObj.show();
            }
            else if (args.item.id === 'copy') {
                var dialogObj = document.getElementById('alert_dialog_1').ej2_instances[0];
                dialogObj.show();
            }
        }
        if (args.item.id === 'showActions') {
            gridObj.toolbar = [{ text: "Hide Actions", tooltipText: "Actions", prefixIcon: "e-custom-hide-actions", id: "hideActions" }, "Add", "Cancel", "Edit", "Delete", { text: "Toggle Grouping", tooltipText: "Grouping", prefixIcon: "e-custom-group-toggle", id: "toggleGrouping" }, { text: "Toggle Detailed", tooltipText: "Toggle Detailed", prefixIcon: "e-toggledetailed", id: "toggleDetailed" }, "ExcelExport", "CsvExport", "Print", "Search", { text: "Copy", tooltipText: "Copy", prefixIcon: "e-copy", id: "copy" }, { text: "Copy With Header", tooltipText: "Copy With Header", prefixIcon: "e-copy", id: "copyHeader" }, "ColumnChooser"];
            gridObj.refresh();
        }
        if (args.item.id === 'hideActions') {
            gridObj.toolbar = [{ text: "Show Actions", tooltipText: "Actions", prefixIcon: "e-custom-show-actions", id: "showActions" }, "Add", "Cancel", "Edit", "Delete", "Search", "ColumnChooser"];
            gridObj.showColumnChooser = true;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleGrouping') {
            gridObj.allowGrouping = !gridObj.allowGrouping;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleDetailed') {
            var visCount = 0;
            for (var i = 0; i < gridObj.columns.length; i++) {
                if (gridObj.columns[i].visible) visCount++;
            }
            if (visCount == gridObj.columns.length) {
                for (var i = 0; i < gridObj.columns.length; i++) {
                    var col = gridObj.columns[i];
                    if (typeof col.customAttributes != 'undefined' && typeof col.customAttributes.id != 'undefined' && col.customAttributes.id == 'detailed')
                        gridObj.showHider.hide(col.headerText, 'headerText');
                    else if(col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
            else {
                for (var i = 0; i < gridObj.columns.length; i++) {
                    var col = gridObj.columns[i];
	    if(col.showInColumnChooser)
                         gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
        }
    }
    function SICCtoolbarClick(args) {
        var gridObj = document.getElementById("SICCGrid").ej2_instances[0];
        if (args.item.id === 'SICCGrid_pdfexport') {
            gridObj.pdfExport();
        }
        if (args.item.id === 'SICCGrid_excelexport') {
            gridObj.excelExport();
        }
        if (args.item.id === 'SICCGrid_csvexport') {
            gridObj.csvExport();
        }
        if (this.getSelectedRecords().length > 0) {
            var withHeader = false;
            if (args.item.id === 'copyHeader') {
                withHeader = true;
            }
            this.copy(withHeader);
        } else {
            if (args.item.id === 'copyHeader') {
                var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                dialogObj.show();
            }
            else if (args.item.id === 'copy') {
                var dialogObj = document.getElementById('alert_dialog_1').ej2_instances[0];
                dialogObj.show();
            }
        }
        if (args.item.id === 'showActions') {
            gridObj.toolbar = [{ text: "Hide Actions", tooltipText: "Actions", prefixIcon: "e-custom-hide-actions", id: "hideActions" }, "Add", "Cancel", "Edit", "Delete", { text: "Toggle Grouping", tooltipText: "Grouping", prefixIcon: "e-custom-group-toggle", id: "toggleGrouping" }, { text: "Toggle Detailed", tooltipText: "Toggle Detailed", prefixIcon: "e-toggledetailed", id: "toggleDetailed" }, "ExcelExport", "CsvExport", "Print", "Search", { text: "Copy", tooltipText: "Copy", prefixIcon: "e-copy", id: "copy" }, { text: "Copy With Header", tooltipText: "Copy With Header", prefixIcon: "e-copy", id: "copyHeader" }, "ColumnChooser"];
            gridObj.refresh();
        }
        if (args.item.id === 'hideActions') {
            gridObj.toolbar = [{ text: "Show Actions", tooltipText: "Actions", prefixIcon: "e-custom-show-actions", id: "showActions" }, "Add", "Cancel", "Edit", "Delete", "Search", "ColumnChooser"];
            gridObj.showColumnChooser = true;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleGrouping') {
            gridObj.allowGrouping = !gridObj.allowGrouping;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleDetailed') {
            var visCount = 0;
            for (var i = 0; i < gridObj.columns.length; i++) {
                if (gridObj.columns[i].visible) visCount++;
            }
            if (visCount == gridObj.columns.length) {
                for (var i = 0; i < gridObj.columns.length; i++) {
                    var col = gridObj.columns[i];
                    if (typeof col.customAttributes != 'undefined' && typeof col.customAttributes.id != 'undefined' && col.customAttributes.id == 'detailed')
                        gridObj.showHider.hide(col.headerText, 'headerText');
                    else if(col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
            else {
                for (var i = 0; i < gridObj.columns.length; i++) {
                    var col = gridObj.columns[i];
	    if(col.showInColumnChooser)
                         gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
        }
    }

    function dataBound(args)
    {

    }
    function loadCategories(args) {

    }
    function actionBeginCat(args) {
        if (args.requestType == "save") {
            console.log(args.data);
            if (typeof args.data.Title === '') {
                args.cancel = false;
            }
            else
            {
                var isAdd = typeof args.data.Id === 'undefined';
                console.log(args.data.Id);
                var url = '';
                if (isAdd)
                    url = '@Url.Content("~")Setup?handler=NewCategory';
                else
                    url = '@Url.Content("~")Setup?handler=Category';

                $.ajax({
                    url: url,
                    async: false,
                    type: "POST",
                    data: {
                        contribCat: args.data,
                        __RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                    },
                    success: function (data) {
                        if (isAdd) {
                            args.data.id = data.id;
                            args.data.title = data.title;
                            args.data.category = data.category;
                        }
                        //BindGrid(data.body.key);
                    },
                    error: function (err) {
                        console.log(err);

                    }
                });
            }
        }
        else if (args.requestType == "delete")
        {

        }
        else if (args.requestType == "add")
        {

        }
    }
    function actionBeginContrib(args) {
        if (args.requestType == "save") {

            if (typeof args.data.Title === 'undefined') {
                args.cancel = true;
            }
            else
            {
                var isAdd = typeof args.data.Id === 'undefined';
                var url = '';
                if (isAdd)
                    url = '@Url.Content("~")Setup?handler=NewContribution';
                else
                    url = '@Url.Content("~")Setup?handler=Contribution';

                $.ajax({
                    url: url,
                    async: false,
                    type: "POST",
                    data: {
                        contrib: args.data,
                        categoryName: args.data.CategoryTitle,
                        __RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                    },
                    success: function (data) {
                        if (isAdd) {
                            args.data.Id = data.id;
                            args.data.Category = data.category;


                        }
                        else {
                        }
                        var Obj = $("#SICCGrid")[0].ej2_instances[0];

                        var ajax = new ej.base.Ajax('@Url.Content("~")Setup?handler=Contribution', 'GET');
                        ajax.send();
                        ajax.onSuccess = function (data) {
                            Obj.columns[4].edit.params.dataSource = JSON.parse(data);
                            console.log(Obj.columns[4].edit.params.dataSource)
                        };
                        //BindGrid(data.body.key);
                    },
                    error: function (err) {
                        console.log(err);

                    }
                });
            }
        }
        else if (args.requestType == "beginEdit") {
            var Obj = $("#SICCGrid")[0].ej2_instances[0];
            var ajax = new ej.base.Ajax('@Url.Content("~")Setup?handler=SIC', 'GET');
            ajax.send();
            ajax.onSuccess = function (data) {
                var ds = JSON.parse(data);
                console.log(args.rowData);
                Obj.columns[4].edit.params.dataSource = ds;
                //ddldist.dataBind();
            };

            Obj.columns[4].allowEditing = false;
        }
        else if (args.requestType == "delete")
        {

        }
        else if (args.requestType == "add")
        {
            var Obj = $("#SICCGrid")[0].ej2_instances[0];
            Obj.columns[4].allowEditing = true;
        }
    }

    function actionCompleteCat(args) {
        console.log(args);
        if (args.requestType == "save") {

        }
        else if (args.requestType == "delete")
        {
            $.ajax({
                url: '@Url.Content("~")Setup?handler=Categories',
                async: false,
                type: "DELETE",
                data: {
                    categories: args.data,
                    __RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                },
                success: function (data) {
                    //console.log(data.success);
                    var Obj = $("#SICCGrid")[0].ej2_instances[0];

                    Obj.columns[4].edit.params.dataSource = JSON.parse(data);
                    console.log(Obj.columns[4].edit.params.dataSource);
                },
                error: function (err) {
                    console.log(err);
                }
            });
        }
    }
    function actionCompleteContrib(args) {
        console.log(args);
        if (args.requestType == "save") {

        }
        else if (args.requestType == "delete")
        {
            $.ajax({
                url: '@Url.Content("~")Setup?handler=Contributions',
                async: false,
                type: "DELETE",
                data: {
                    contribs: args.data,
                    __RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                },
                success: function (data) {
                    //console.log(data.success);

                },
                error: function (err) {
                    console.log(err);
                }
            });
        }
    }

    function commandClick(args)
    {
        console.log(args);
        if (args.commandColumn.type == "Edit")
        {
            var params = args.rowData;  // display row data
            console.log(params);

        }
        else if (args.commandColumn.type == "View")
        {
            var params = args.rowData;  // display row data
            console.log(params);

        }
        else if (args.commandColumn.type == "Copy") {
            this.copy(false);
        }
        else if (args.commandColumn.type == "Delete") {

        }
    }
    function alertBtnClick() {
        var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
        var dialogObj1 = document.getElementById('alert_dialog_1').ej2_instances[0];
        dialogObj.hide();
        dialogObj1.hide();
    }

</script>