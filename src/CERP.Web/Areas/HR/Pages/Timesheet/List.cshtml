@page "/HR/Timesheets"
@using CERP.Setup.DTOs;
@model CERP.Web.Areas.HR.Pages.TimeSheets.ListModel
@{
    ViewData["Title"] = "Timesheets";
    ViewData["IconClass"] = "fa fa-calendar-alt";
    ViewData["HeaderTitle"] = "TIMESHEETS";
    ViewData["SubTitle"] = "List of Timesheets";
    ViewData["Area"] = "HR";

    ViewData["IsList"] = false;
    ViewData["IsCreate"] = true;
    ViewData["CreateNewText"] = "New Timesheet";
    ViewData["CreateNewLink"] = "/Timesheet/Edit";

    var alertanimation = new Syncfusion.EJ2.Popups.DialogAnimationSettings { Effect = Syncfusion.EJ2.Popups.DialogEffect.None };
}
@section styles {
    <link href="~/libs/syncfusion/ej2-grid/styles/fabric.css" rel="stylesheet" />

    <style>
        .e-grid .e-headercell {
            background-color: #f5f5f5;
            /*font-size: 18px;*/
        }

        .e-detailcell .e-headercell {
            background-color: #6691b1 !important;
            color: rgb(253,253,253);
            /*font-size: 18px;*/
        }

        #myProgress {
            position: relative;
            height: 20px;
            width: 100%;
            padding-right: 10px;
            text-align: left;
            background-color: whitesmoke;
        }

        .highcontrast .e-grid #myProgress {
            background-color: black;
        }

        #myBar {
            position: absolute;
            width: 10%;
            height: 100%;
            background-color: #00b300;
        }

        #myBar.progressdisable {
            background-color: #e65729;
        }

        #label {
            position: relative;
            left: 10px;
            line-height: 18px;
            font-size: 10px;
            color: black;
        }
    </style>
}
@section scripts {
    <!-- Syncfusion Essential JS 2 Scripts -->
    <script src="~/libs/syncfusion/ej2-grid/scripts/ej2.min.js"></script>
    <script>
        var isEditing = false;
        var curEditRow;
        $(document).ready(function () {
            $('#newWorkshiftForm').on('submit', function (e) {
                e.preventDefault();
                if (ValidateForm()) {
                    Swal.showLoading();

                    let form = [];
                    let generalInfo = $('#newWorkshiftForm').find("select, textarea, input").serializeArray();
                    form = form.concat(generalInfo);
                    var params = objectifyForm(form);
                    params.isEditing = isEditing;

                    if (isEditing)
                        params.Id = curEditRow.id;

                    let formData = new FormData();
                    formData.append("info", JSON.stringify(params));
                    var xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
                    formData.append("__RequestVerificationToken", xhrToken);

                    $.ajax({
                        url: "@Url.Content("~")/HR/Workshifts",
                        async: true,
                        type: "POST",
                        data: formData,
                        contentType: false,
                        processData: false,
                        success: function (data) {
                            var grid = $("#TimesheetsGrid")[0].ej2_instances[0];
                            console.log("Response");
                            console.log(data);
                            console.log(params);
                            Swal.hideLoading();
                            if (isEditing) {
                                curEditRow.id = data.id;
                                curEditRow.title = data.title;
                                curEditRow.department.name = data.department.name;
                                curEditRow.startHour = data.startHour;
                                curEditRow.endHour = data.endHour;

                                grid.refresh(); // refresh the Grid.

                                swal.fire("Success", "Workshift has successfully been updated", "success");
                            }
                            else {
                                grid.dataSource.push(data);
                                grid.refresh(); // refresh the Grid.

                                swal.fire("Success", "Workshift has successfully been added", "success");
                            }
                            //window.location = "@Url.Content("~")/HR/Employees";
                        },
                        error: function (err) {
                            Swal.hideLoading();
                            if (isEditing)
                                swal.fire("Failed", "Workshift couldn't be updated, please fix all errors and try again.", "error");
                            else
                                swal.fire("Failed", "Workshift couldn't be added, please fix all errors and try again.", "error");

                            console.log(err);
                        }
                    })
                }
                else {
                    Swal.close();
                    Swal.hideLoading();
                }
            });

            function ValidateForm() {
                var elmForm = $("#newWorkshiftForm");
                // stepDirection === 'forward' :- this condition allows to do the form validation
                // only on forward navigation, that makes easy navigation on backwards still do the validation when going next
                var valid = false;
                elmForm.validator('validate');
                if (elmForm) {
                    //elmForm.validate({
                    //    submitHandler: function (form) {
                    //        console.log("Submit")
                    //        valid = true;
                    //    },
                    //    invalidHandler: function (form) {
                    //        console.log("Invalid")
                    //        valid = false;
                    //    }
                    //})
                    var elmErr = elmForm.find('.has-error');
                    if (elmErr) {
                        if (elmErr.length > 0) {
                            // Form validation failed
                            valid = false;
                        }
                        else {
                            valid = true;
                        }
                    }
                }
                return valid;
            }
        });

    </script>
    <ejs-scripts></ejs-scripts>

}
<partial name="_DefaultPageHeader" />
<div class="site-content customContentArea">
    <div class="control-section">
        <ejs-grid id="TimesheetsGrid" dataSource="@ViewData["Timesheets_DS"]" childGrid="@Model.GetSecondaryGrid"
                  enableAutoFill="true" columns="@Model.GetPrimaryGridColumns()" queryCellInfo="queryCellInfo"
                  dataBound="dataBound" commandClick="commandClick" actionComplete="actionComplete" showColumnChooser="true"
                  allowExcelExport="true" allowGrouping="true" height="100%" allowPdfExport="true" allowPaging="true"
                  hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true"
                  allowSorting="true" allowMultiSorting="true" gridLines="Both"
                  toolbarClick="toolbarClick" toolbar="@(new List<object>() { "ExcelExport", "PdfExport", "CsvExport", "Print", "Search", new { text = "Copy", tooltipText = "Copy", prefixIcon = "e-copy", id = "copy" }, new { text = "Copy With Header", tooltipText = "Copy With Header", prefixIcon = "e-copy", id = "copyHeader" }, "ColumnChooser" })"
                  allowResizing="true">

            <e-grid-sortsettings columns="@(new List<object>() { new { field = "year", direction = "Descending" }, new { field = "getMonth", direction = "Descending" } })"></e-grid-sortsettings>
            <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
            <e-grid-editSettings allowAdding="false" allowDeleting="false" allowEditing="false"></e-grid-editSettings>
            <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
            <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
        </ejs-grid>
    </div>
    <script type="text/template" id="progressColTemplate">
        <div class="progress progress-sm" style="margin-bottom: 0; height: 22px!important;">
            <div id="main" class="progress-bar" style="padding-top:7px; width:0" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                <span class="sr-only pull-left" style="position: unset!important; padding-left:5px; height:100%; width:auto">${getProgress}%</span>
            </div>
        </div>
        <div id="wProgress" class="progress progress-sm" style="margin-bottom: 0; margin-top: 3px; height: 5px!important;">
            <div id="work" class="progress-bar" style="width: 0%;">
                @*<span class="sr-only pull-left" style="position: unset!important; padding-left:5px; height:100%; width:auto">${totalMonthWorkHours}</span>*@
            </div>
            <div id="overtime" class="progress-bar" style="width: 0%;">
                @*<span class="sr-only pull-left" style="position: unset!important; padding-left:5px; height:100%; width:auto">${totalMonthOvertimeHours}</span>*@
            </div>
        </div>
        @*<div id="myProgress" class="pbar">
            <div id="myBar" class="bar">
                <div id="label" class="barlabel"></div>
            </div>
        </div>*@
    </script>
    <script type="text/template" id="secondaryProgressColTemplate">
        <div class="progress progress-sm" style="margin-bottom: 0; height: 22px!important;">
            <div id="secMain" class="progress-bar" style="padding-top:7px; width:0" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                <span class="sr-only pull-left" style="position: unset!important; padding-left:5px; height:100%; width:auto">${getProgress}%</span>
            </div>
        </div>
        <div id="secProgress" class="progress progress-sm" style="margin-bottom: 0; margin-top: 3px; height: 5px!important;">
            <div id="secWork" class="progress-bar" style="padding-top:7px; width: 0%;">
                @*<span class="sr-only pull-left" style="position: unset!important; padding-left:5px; height:100%; width:auto">${totalWeekWorkHours}</span>*@
            </div>
            <div id="secOvertime" class="progress-bar" style="padding-top:7px; width: 0%;">
                @*<span class="sr-only pull-left" style="position: unset!important; padding-left:5px; height:100%; width:auto">${totalWeekOvertimeHours}</span>*@
            </div>
        </div>
        @*<div id="myProgress" class="pbar">
            <div id="myBar" class="bar">
                <div id="label" class="barlabel"></div>
            </div>
        </div>*@
    </script>
    <script id="week1ColTemplate" type="text/template">
        <a href='@Url.Content("~")/HR/Timesheets/Edit?year=${year}&month=${month}&week=1&employeeId=${employeeId}'>${week1Hours}</a>
        @*$("#target").ejProgressBar({ enabled:true , value: ${getProgress}});*@
    </script>
    <script id="week2ColTemplate" type="text/template">
        <a href='@Url.Content("~")/HR/Timesheets/Edit?year=${year}&month=${month}&week=2&employeeId=${employeeId}'>${week2Hours}</a>
        @*$("#target").ejProgressBar({ enabled:true , value: ${getProgress}});*@
    </script>
    <script id="week3ColTemplate" type="text/template">
        <a href='@Url.Content("~")/HR/Timesheets/Edit?year=${year}&month=${month}&week=3&employeeId=${employeeId}'>${week3Hours}</a>
        @*$("#target").ejProgressBar({ enabled:true , value: ${getProgress}});*@
    </script>
    <script id="week4ColTemplate" type="text/template">
        <a href='@Url.Content("~")/HR/Timesheets/Edit?year=${year}&month=${month}&week=4&employeeId=${employeeId}'>${week4Hours}</a>
        @*$("#target").ejProgressBar({ enabled:true , value: ${getProgress}});*@
    </script>
    <script id="week5ColTemplate" type="text/template">
        <a href='@Url.Content("~")/HR/Timesheets/Edit?year=${year}&month=${month}&week=5&employeeId=${employeeId}'>${week5Hours}</a>
        @*$("#target").ejProgressBar({ enabled:true , value: ${getProgress}});*@
    </script>
</div>

<ejs-dialog id="alert_dialog" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy with Header" content="Atleast one row should be selected to copy with header">
    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
    </e-dialog-buttons>
</ejs-dialog>
<ejs-dialog id="alert_dialog_1" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy" content="Atleast one row should be selected to copy">
    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
    </e-dialog-buttons>
</ejs-dialog>

<script>
    

    function queryCellInfo(args) {
        if (args.column.field === "getProgress") {
            let curDate = new Date();
            //if (args.data.getProgress <= 20) {
            //    args.data.getProgress = args.data.getProgress + 30;
            //}
            args.cell.querySelector("#main").style.width = (args.data.totalMonthWorkHours / 225 * 100) + "%";
            if (args.data.month == curDate.getMonth() + 1 && args.data.year == curDate.getFullYear()) {
                if (args.data.totalMonthWorkHours == 225) {
                    if (args.data.isPosted) {
                        args.cell.querySelector("#main").classList.add('progress-bar-success', 'progress-bar-striped');
                        args.cell.querySelector("#work").classList.add('progress-bar-success', 'progress-bar-striped');
                        args.cell.querySelector("#overtime").classList.add('progress-bar-info', 'progress-bar-striped');
                    } else {
                        args.cell.querySelector("#main").classList.add('progress-bar-warning', 'progress-bar-striped', 'active');
                        args.cell.querySelector("#work").classList.add('progress-bar-warning', 'progress-bar-striped', 'active');
                        args.cell.querySelector("#overtime").classList.add('progress-bar-info', 'progress-bar-striped', 'active');
                    }
                }
                else {
                    args.cell.querySelector("#main").classList.add('progress-bar-striped', 'active');
                    args.cell.querySelector("#work").classList.add('progress-bar-striped', 'active');
                    args.cell.querySelector("#overtime").classList.add('progress-bar-info', 'progress-bar-striped', 'active');
                }
            }
            else {
                if (args.data.totalMonthWorkHours == 225) {
                    if (args.data.isPosted) {
                        args.cell.querySelector("#main").classList.add('progress-bar-success');
                        args.cell.querySelector("#work").classList.add('progress-bar-success');
                        args.cell.querySelector("#overtime").classList.add('progress-bar-info');
                    }
                    else {
                        args.cell.querySelector("#main").classList.add('progress-bar-warning');
                        args.cell.querySelector("#work").classList.add('progress-bar-warning');
                        args.cell.querySelector("#overtime").classList.add('progress-bar-info');
                    }
                }
                else {
                    args.cell.querySelector("#main").classList.add('progress-bar-danger');
                    args.cell.querySelector("#work").classList.add('progress-bar-danger');
                    args.cell.querySelector("#overtime").classList.add('progress-bar-info');
                }
            }
            let total = Math.max(args.data.totalMonthWorkHours + args.data.totalMonthOvertimeHours, args.data.totalMonthHours);
            args.cell.querySelector("#work").style.width = ((args.data.totalMonthWorkHours / total) * 100) + "%";
            args.cell.querySelector("#overtime").style.width = ((args.data.totalMonthOvertimeHours / total) * 100) + "%";
            //args.cell.querySelector("#w3").style.width = ((Math.min(45, args.data.week3Hours) / 225) * 100) + "%";
            //args.cell.querySelector("#w4").style.width = ((Math.min(45, args.data.week4Hours) / 225) * 100) + "%";
            //args.cell.querySelector("#w5").style.width = ((Math.min(45, args.data.week5Hours) / 225) * 100) + "%";
            //args.cell.querySelector(".progress-bar").aria['valuenow'] = args.data.getProgress;
            //args.cell.querySelector(".bar").style.width = args.data.getProgress + "%";
            //args.cell.querySelector(".barlabel").textContent = args.data.getProgress + "%";
            if (args.data.getProgress >= 90) {
                args.cell.querySelector(".sr-only").style.color = "rgb(253,253,253)";
            }
            else {
                args.cell.querySelector(".sr-only").style.color = "rgb(253,253,253)";
            }
            //if (typeof args.data.isPosted != 'undefined' && !args.data.isPosted) {
            //    args.cell.querySelector(".bar").classList.add("progressdisable");
            //}
            //if (typeof args.data.isSubmitted != 'undefined' && !args.data.isSubmitted) {
            //    args.cell.querySelector(".bar").classList.add("progressdisable");
            //}
        }
    }
    function secQueryCellInfo(args) {
        if (args.column.field === "getProgress") {
            let curDate = new Date();
            var weekNumber = (new Date()).getWeekOfMonth();
            //if (args.data.getProgress <= 20) {
            //    args.data.getProgress = args.data.getProgress + 30;
            //}
            args.cell.querySelector("#secMain").style.width = args.data.getProgress + "%";
            if (args.data.week == weekNumber && args.data.month == curDate.getMonth() + 1 && args.data.year == curDate.getFullYear()) {
                if (args.data.totalWeekWorkHours == 45) {
                    if (args.data.isSubmitted) {
                        args.cell.querySelector("#secMain").classList.add('progress-bar-success', 'progress-bar-striped');
                        args.cell.querySelector("#secWork").classList.add('progress-bar-success', 'progress-bar-striped');
                        args.cell.querySelector("#secOvertime").classList.add('progress-bar-info', 'progress-bar-striped');
                    }
                    else {
                        args.cell.querySelector("#secMain").classList.add('progress-bar-warning', 'progress-bar-striped');
                        args.cell.querySelector("#secWork").classList.add('progress-bar-warning', 'progress-bar-striped');
                        args.cell.querySelector("#secOvertime").classList.add('progress-bar-info', 'progress-bar-striped');
                    }
                }
                else {
                    args.cell.querySelector("#secMain").classList.add('progress-bar-striped', 'active');
                    args.cell.querySelector("#secWork").classList.add('progress-bar-striped', 'active');
                    args.cell.querySelector("#secOvertime").classList.add('progress-bar-info', 'progress-bar-striped', 'active');
                }
            }
            else {
                if (args.data.totalWeekWorkHours == 45) {
                    if (args.data.isSubmitted) {
                        args.cell.querySelector("#secMain").classList.add('progress-bar-success', 'progress-bar-striped');
                        args.cell.querySelector("#secWork").classList.add('progress-bar-success', 'progress-bar-striped');
                        args.cell.querySelector("#secOvertime").classList.add('progress-bar-info', 'progress-bar-striped');
                    }
                    else {
                        args.cell.querySelector("#secMain").classList.add('progress-bar-warning', 'progress-bar-striped');
                        args.cell.querySelector("#secWork").classList.add('progress-bar-warning', 'progress-bar-striped');
                        args.cell.querySelector("#secOvertime").classList.add('progress-bar-info', 'progress-bar-striped');
                    }
                }
                else {
                    args.cell.querySelector("#secMain").classList.add('progress-bar-danger', 'progress-bar-striped');
                    args.cell.querySelector("#secWork").classList.add('progress-bar-danger', 'progress-bar-striped');
                    args.cell.querySelector("#secOvertime").classList.add('progress-bar-info', 'progress-bar-striped');
                }
            }
            let total = args.data.totalWeekHours;
            args.cell.querySelector("#secWork").style.width = ((args.data.totalWeekWorkHours / total) * 100) + "%";
            args.cell.querySelector("#secOvertime").style.width = ((args.data.totalWeekOvertimeHours / total) * 100) + "%";
            //args.cell.querySelector("#w3").style.width = ((Math.min(45, args.data.week3Hours) / 225) * 100) + "%";
            //args.cell.querySelector("#w4").style.width = ((Math.min(45, args.data.week4Hours) / 225) * 100) + "%";
            //args.cell.querySelector("#w5").style.width = ((Math.min(45, args.data.week5Hours) / 225) * 100) + "%";
            //args.cell.querySelector(".progress-bar").aria['valuenow'] = args.data.getProgress;
            //args.cell.querySelector(".bar").style.width = args.data.getProgress + "%";
            //args.cell.querySelector(".barlabel").textContent = args.data.getProgress + "%";
            //if (args.data.getProgress >= 90) {
            //    args.cell.querySelector(".sr-only").style.color = "rgb(253,253,253)";
            //}
            //else {
            //    args.cell.querySelector(".sr-only").style.color = "rgb(253,253,253)";
            //}
            //if (typeof args.data.isPosted != 'undefined' && !args.data.isPosted) {
            //    args.cell.querySelector(".bar").classList.add("progressdisable");
            //}
            //if (typeof args.data.isSubmitted != 'undefined' && !args.data.isSubmitted) {
            //    args.cell.querySelector(".bar").classList.add("progressdisable");
            //}
        }
    }
    function onLoad(args) {
        this.parentDetails.parentKeyFieldValue = this.parentDetails.parentRowData['id'];
    }
    function actionComplete(args) {
        if (args.requestType == "save") {

        }
        else if (args.requestType == "delete")
        {
            Swal.showLoading();

            let formData = new FormData();
            formData.append("workshifts", JSON.stringify(args.data));
            var xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
            formData.append("__RequestVerificationToken", xhrToken);

            $.ajax({
                url: '@Url.Content("~")/HR/Workshifts?handler=Workshift',
                async: true,
                type: "DELETE",
                data: formData,
                contentType: false,
                processData: false,
                success: function (data) {
                    //console.log(data.success);
                    swal.fire("Success", "Workshift has successfully been deleted", "success");

                    if ($('#addWorkshiftSection').css('display') !== 'none') {
                        $('#addWorkshiftSection').slideUp();
                        $('#toggleAddSection').slideUp(50);
                        setTimeout(function () {
                            $('#addSecToggleBtn').html('Add New Workshift');
                        }, 50);
                        $('#toggleAddSection').slideDown(250);
                    }
                },
                error: function (err) {
                    swal.fire("Failed", "Workshift couldn't be deleted, please fix all errors and try again.", "error");

                    console.log(err);
                }
            });
        }
    }
    function commandClick(args)
    {
        if (args.commandColumn.type == "Edit")
        {
            let data = args.rowData;
            let year = data.year;
            let month = data.month;
            let employeeId = data.employeeId;

            window.location = `@Url.Content("~")/HR/Timesheets/Edit?year=${year}&month=${month}&employeeId=${employeeId}`;
        }
        else if (args.commandColumn.type == "Copy") {
            this.copy(false);
        }
    }

    function toggleAddSection() {
        if ($('#addWorkshiftSection').css('display') == 'none') {
           $('#toggleAddSection').slideUp(50);
            setTimeout(function () {
                $('#addSecToggleBtn').html('Cancel');
            }, 50);
            $('#toggleAddSection').slideDown(250);

            $('#addWorkshiftSection').slideUp(50);

            $('#submitAddSection').val('Add Workshift');
            $('#addSecTitle').html('Create New Workshift');

            setTimeout(function () {
                $('#departmentId').val('');
                $('#title').val('');
                $('#startHour').val('');
                $('#endHour').val('');

                isEditing = false;
            }, 50);

            $('#addWorkshiftSection').slideDown(250);
        }
        else {
            $('#addWorkshiftSection').slideUp();
            $('#toggleAddSection').slideUp(50);
            setTimeout(function () {
                $('#addSecToggleBtn').html('Add New Workshift');
            }, 50);
            $('#toggleAddSection').slideDown(250);
        }
    }
    function toolbarClick(args) {
        var gridObj = document.getElementById("TimesheetsGrid").ej2_instances[0];
        if (args.item.id === 'TimesheetsGrid_pdfexport') {
            gridObj.pdfExport();
        }
        if (args.item.id === 'TimesheetsGrid_excelexport') {
            gridObj.excelExport();
        }
        if (args.item.id === 'TimesheetsGrid_csvexport') {
            gridObj.csvExport();
        }
        if (this.getSelectedRecords().length > 0) {
            var withHeader = false;
            if (args.item.id === 'copyHeader') {
                withHeader = true;
            }
            this.copy(withHeader);
        } else {
            if (args.item.id === 'copyHeader') {
                var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                dialogObj.show();
            }
            else if (args.item.id === 'copy') {
                var dialogObj = document.getElementById('alert_dialog_1').ej2_instances[0];
                dialogObj.show();
            }
        }
    }
    function alertBtnClick() {
        var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
        var dialogObj1 = document.getElementById('alert_dialog_1').ej2_instances[0];
        dialogObj.hide();
        dialogObj1.hide();
    }
    var initial = true;
    function dataBound(args) {
        //this.autoFitColumns();
        //if (initial == true) {
        //    this.groupModule.collapseAll();
        //    initial = false;
        //}
        //console.log(args);
    }
</script>