@page "/HR/Timesheets"
@using CERP.Setup.DTOs;
@model CERP.Web.Areas.HR.Pages.TimeSheets.ListModel
@{
    ViewData["Title"] = "Timesheets";
    ViewData["IconClass"] = "fa fa-user-tie";
    ViewData["HeaderTitle"] = "TIMESHEETS";
    ViewData["SubTitle"] = "List of Timesheets";
    ViewData["Area"] = "HR";

    ViewData["IsList"] = false;
    ViewData["IsCreate"] = true;
    ViewData["CreateNewText"] = "New Timesheet";
    ViewData["CreateNewLink"] = "/Timesheet/Edit";

    var alertanimation = new Syncfusion.EJ2.Popups.DialogAnimationSettings { Effect = Syncfusion.EJ2.Popups.DialogEffect.None };
}
@section styles {
    <link href="~/libs/syncfusion/ej2-grid/styles/fabric.css" rel="stylesheet" />

    <style>
        .e-grid .e-headercell {
            background-color: #f5f5f5;
            /*font-size: 18px;*/
        }

        .e-detailcell .e-headercell {
            background-color: #6691b1 !important;
            color: rgb(253,253,253);
            /*font-size: 18px;*/
        }
    </style>
}
@section scripts {
    <!-- Syncfusion Essential JS 2 Scripts -->
    <script src="~/libs/syncfusion/ej2-grid/scripts/ej2.min.js"></script>
    <script>
        var isEditing = false;
        var curEditRow;
        $(document).ready(function () {
            $('#newWorkshiftForm').on('submit', function (e) {
                e.preventDefault();
                if (ValidateForm()) {
                    Swal.showLoading();

                    let form = [];
                    let generalInfo = $('#newWorkshiftForm').find("select, textarea, input").serializeArray();
                    form = form.concat(generalInfo);
                    var params = objectifyForm(form);
                    params.isEditing = isEditing;

                    if (isEditing)
                        params.Id = curEditRow.id;

                    let formData = new FormData();
                    formData.append("info", JSON.stringify(params));
                    var xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
                    formData.append("__RequestVerificationToken", xhrToken);

                    $.ajax({
                        url: "@Url.Content("~")/HR/Workshifts",
                        async: true,
                        type: "POST",
                        data: formData,
                        contentType: false,
                        processData: false,
                        success: function (data) {
                            var grid = $("#TimesheetsGrid")[0].ej2_instances[0];
                            console.log("Response");
                            console.log(data);
                            console.log(params);
                            Swal.hideLoading();
                            if (isEditing) {
                                curEditRow.id = data.id;
                                curEditRow.title = data.title;
                                curEditRow.department.name = data.department.name;
                                curEditRow.startHour = data.startHour;
                                curEditRow.endHour = data.endHour;

                                grid.refresh(); // refresh the Grid.

                                swal.fire("Success", "Workshift has successfully been updated", "success");
                            }
                            else {
                                grid.dataSource.push(data);
                                grid.refresh(); // refresh the Grid.

                                swal.fire("Success", "Workshift has successfully been added", "success");
                            }
                            //window.location = "@Url.Content("~")/HR/Employees";
                        },
                        error: function (err) {
                            Swal.hideLoading();
                            if (isEditing)
                                swal.fire("Failed", "Workshift couldn't be updated, please fix all errors and try again.", "error");
                            else
                                swal.fire("Failed", "Workshift couldn't be added, please fix all errors and try again.", "error");

                            console.log(err);
                        }
                    })
                }
                else {
                    Swal.close();
                    Swal.hideLoading();
                }
            });

            function ValidateForm() {
                var elmForm = $("#newWorkshiftForm");
                // stepDirection === 'forward' :- this condition allows to do the form validation
                // only on forward navigation, that makes easy navigation on backwards still do the validation when going next
                var valid = false;
                elmForm.validator('validate');
                if (elmForm) {
                    //elmForm.validate({
                    //    submitHandler: function (form) {
                    //        console.log("Submit")
                    //        valid = true;
                    //    },
                    //    invalidHandler: function (form) {
                    //        console.log("Invalid")
                    //        valid = false;
                    //    }
                    //})
                    var elmErr = elmForm.find('.has-error');
                    if (elmErr) {
                        if (elmErr.length > 0) {
                            // Form validation failed
                            valid = false;
                        }
                        else {
                            valid = true;
                        }
                    }
                }
                return valid;
            }
        });

    </script>
    <ejs-scripts></ejs-scripts>

}
<div class="site-content" style="padding:0; background-color: rgb(253,253,253);">
    <partial name="_DefaultPageHeader" />   
</div>
<div class="site-content" style="padding-top:0; background-color: rgb(253,253,253);">
    <div class="control-section">
        <ejs-grid id="TimesheetsGrid" dataSource="@ViewData["Timesheets_DS"]" childGrid="@Model.GetSecondaryGrid"
                  enableAutoFill="true" columns="@Model.GetPrimaryGridColumns()" 
                  dataBound="dataBound" commandClick="commandClick" actionComplete="actionComplete"
                  allowExcelExport="true" allowGrouping="true" allowPdfExport="true"
                  hierarchyPrintMode="All" allowSelection="true" allowFiltering="true"
                  allowSorting="true" allowMultiSorting="true" gridLines="Both"
                  toolbarClick="toolbarClick" toolbar="@(new List<object>() {"ExcelExport", "PdfExport", "CsvExport", "Print", "Search", "Delete", new { text = "Copy", tooltipText = "Copy", prefixIcon = "e-copy", id = "copy" }, new { text = "Copy With Header", tooltipText = "Copy With Header", prefixIcon = "e-copy", id = "copyHeader" } })"
                  contextMenuItems="@(new List<object>() { "AutoFit", "AutoFitAll", "SortAscending", "SortDescending","Copy", "Edit", "Delete", "Save", "Cancel","PdfExport", "ExcelExport", "CsvExport", "FirstPage", "PrevPage","LastPage", "NextPage"})"
                  allowPaging="true" allowResizing="true">

            <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="false"></e-grid-editSettings>
            <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
            <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
        </ejs-grid>
    </div>
    <script id="progressColTemplate" type="text/template">
        <div class="target">
            ${getProgress}%
        </div>
        @*$("#target").ejProgressBar({ enabled:true , value: ${getProgress}});*@
    </script>
    <script id="week1ColTemplate" type="text/template">
        <a href='@Url.Content("~")/HR/Timesheets/Edit?year=${year}&month=${month}&week=1&employeeId=${employeeId}'>${week1Hours}</a>
        @*$("#target").ejProgressBar({ enabled:true , value: ${getProgress}});*@
    </script>
    <script id="week2ColTemplate" type="text/template">
        <a href='@Url.Content("~")/HR/Timesheets/Edit?year=${year}&month=${month}&week=2&employeeId=${employeeId}'>${week2Hours}</a>
        @*$("#target").ejProgressBar({ enabled:true , value: ${getProgress}});*@
    </script>
    <script id="week3ColTemplate" type="text/template">
        <a href='@Url.Content("~")/HR/Timesheets/Edit?year=${year}&month=${month}&week=3&employeeId=${employeeId}'>${week3Hours}</a>
        @*$("#target").ejProgressBar({ enabled:true , value: ${getProgress}});*@
    </script>
    <script id="week4ColTemplate" type="text/template">
        <a href='@Url.Content("~")/HR/Timesheets/Edit?year=${year}&month=${month}&week=4&employeeId=${employeeId}'>${week4Hours}</a>
        @*$("#target").ejProgressBar({ enabled:true , value: ${getProgress}});*@
    </script>
    <script id="week5ColTemplate" type="text/template">
        <a href='@Url.Content("~")/HR/Timesheets/Edit?year=${year}&month=${month}&week=5&employeeId=${employeeId}'>${week5Hours}</a>
        @*$("#target").ejProgressBar({ enabled:true , value: ${getProgress}});*@
    </script>
</div>

<ejs-dialog id="alert_dialog" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy with Header" content="Atleast one row should be selected to copy with header">
    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
    </e-dialog-buttons>
</ejs-dialog>
<ejs-dialog id="alert_dialog_1" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy" content="Atleast one row should be selected to copy">
    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
    </e-dialog-buttons>
</ejs-dialog>

<script>
    function onLoad(args) {
        console.log(args);
        console.log(this.parentDetails);
        this.parentDetails.parentKeyFieldValue = this.parentDetails.parentRowData['Id'];
    }
    function actionComplete(args) {
        if (args.requestType == "save") {

        }
        else if (args.requestType == "delete")
        {
            Swal.showLoading();

            let formData = new FormData();
            formData.append("workshifts", JSON.stringify(args.data));
            var xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
            formData.append("__RequestVerificationToken", xhrToken);

            $.ajax({
                url: '@Url.Content("~")/HR/Workshifts?handler=Workshift',
                async: true,
                type: "DELETE",
                data: formData,
                contentType: false,
                processData: false,
                success: function (data) {
                    //console.log(data.success);
                    swal.fire("Success", "Workshift has successfully been deleted", "success");

                    if ($('#addWorkshiftSection').css('display') !== 'none') {
                        $('#addWorkshiftSection').slideUp();
                        $('#toggleAddSection').slideUp(50);
                        setTimeout(function () {
                            $('#addSecToggleBtn').html('Add New Workshift');
                        }, 50);
                        $('#toggleAddSection').slideDown(250);
                    }
                },
                error: function (err) {
                    swal.fire("Failed", "Workshift couldn't be deleted, please fix all errors and try again.", "error");

                    console.log(err);
                }
            });
        }
    }
    function commandClick(args)
    {
        if (args.commandColumn.type == "Edit")
        {
            let data = args.rowData;
            let year = data.year;
            let month = data.month;
            let employeeId = data.employeeId;

            window.location = `@Url.Content("~")/HR/Timesheets/Edit?year=${year}&month=${month}&employeeId=${employeeId}`;
        }
        else if (args.commandColumn.type == "Copy") {
            this.copy(false);
        }
    }

    function toggleAddSection() {
        if ($('#addWorkshiftSection').css('display') == 'none') {
           $('#toggleAddSection').slideUp(50);
            setTimeout(function () {
                $('#addSecToggleBtn').html('Cancel');
            }, 50);
            $('#toggleAddSection').slideDown(250);

            $('#addWorkshiftSection').slideUp(50);
            
            $('#submitAddSection').val('Add Workshift');
            $('#addSecTitle').html('Create New Workshift');

            setTimeout(function () {
                $('#departmentId').val('');
                $('#title').val('');
                $('#startHour').val('');
                $('#endHour').val('');

                isEditing = false;
            }, 50);

            $('#addWorkshiftSection').slideDown(250);
        }
        else {
            $('#addWorkshiftSection').slideUp();
            $('#toggleAddSection').slideUp(50);
            setTimeout(function () {
                $('#addSecToggleBtn').html('Add New Workshift');
            }, 50);
            $('#toggleAddSection').slideDown(250);
        }
    }
    function onLoad() {
        this.parentDetails.parentKeyFieldValue = this.parentDetails.parentRowData['Id'];
    }
    function toolbarClick(args) {
        var gridObj = document.getElementById("TimesheetsGrid").ej2_instances[0];
        if (args.item.id === 'Grid_pdfexport') {
            gridObj.pdfExport();
        }
        if (args.item.id === 'Grid_excelexport') {
            gridObj.excelExport();
        }
        if (args.item.id === 'Grid_csvexport') {
            gridObj.csvExport();
        }
        if (this.getSelectedRecords().length > 0) {
            var withHeader = false;
            if (args.item.id === 'copyHeader') {
                withHeader = true;
            }
            this.copy(withHeader);
        } else {
            if (args.item.id === 'copyHeader') {
                var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                dialogObj.show();
            }
            else if (args.item.id === 'copy') {
                var dialogObj = document.getElementById('alert_dialog_1').ej2_instances[0];
                dialogObj.show();
            }
        }
    }
    function alertBtnClick() {
        var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
        var dialogObj1 = document.getElementById('alert_dialog_1').ej2_instances[0];
        dialogObj.hide();
        dialogObj1.hide();
    }
    var initial = true;
    function dataBound(args) {
        //this.autoFitColumns();
        //if (initial == true) {
        //    this.groupModule.collapseAll();
        //    initial = false;
        //}
        //console.log(args);
    }
</script>