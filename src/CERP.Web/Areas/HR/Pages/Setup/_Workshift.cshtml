@using CERP.Setup.DTOs;
@using Syncfusion.EJ2.Grids;
@{
    List<Department_Dto> departments = (await Model.DepartmentAppService.GetListAsync(new Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto())).Items;
    List<CERP.HR.Workshift.DTOs.DeductionMethod_Dto> deductionMethods = (await Model.DeductionMethodsAppService.GetListAsync(new Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto())).Items;

    var alertanimation = new Syncfusion.EJ2.Popups.DialogAnimationSettings { Effect = Syncfusion.EJ2.Popups.DialogEffect.None };

    var initialToolBar = new List<object>() { new { text = "Show Actions", tooltipText = "Actions", prefixIcon = "e-custom-show-actions", id = "showActions" }, "Search", "ColumnChooser" };
    var fullToolBar = new List<object>() { new { text = "Hide Actions", tooltipText = "Actions", prefixIcon = "e-custom-hide-actions", id = "hideActions" }, new { text = "Toggle Grouping", tooltipText = "Grouping", prefixIcon = "zmdi-chevron-up", id = "toggleGrouping" }, new { text = "Toggle Detailed", tooltipText = "Toggle Detailed", prefixIcon = "e-toggledetailed", id = "toggleDetailed" }, "ExcelExport", "CsvExport", "Print", "Search", "Delete", new { text = "Copy", tooltipText = "Copy", prefixIcon = "e-copy", id = "copy" }, new { text = "Copy With Header", tooltipText = "Copy With Header", prefixIcon = "e-copy", id = "copyHeader" }, "ColumnChooser" };

    List<object> deductionMethodsCommands = new List<object>();
    deductionMethodsCommands.Add(new { type = "Edit", buttonOption = new { iconCss = "e-icons e-edit", cssClass = "e-flat" } });
    deductionMethodsCommands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "e-flat" } });
    deductionMethodsCommands.Add(new { type = "Save", buttonOption = new { iconCss = "e-icons e-update", cssClass = "e-flat" } });
    deductionMethodsCommands.Add(new
    {
        type = "Cancel",
        buttonOption = new { iconCss = "e-icons e-cancel-icon", cssClass = "e-flat" }
    });

    List<GridColumn> deductionMethodsGridColumns = new List<GridColumn>()
    {
        new GridColumn { Field = "id", Width = "80", HeaderText = "#", TextAlign=TextAlign.Center, MinWidth="10", IsPrimaryKey=true  },
        new GridColumn { Field = "title", Width = "110", HeaderText = "Title", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "hoursMultiplicationFactor", Width = "110", HeaderText = "Hours Multiplication Factor", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Width = "150", HeaderText = "Actions", TextAlign=TextAlign.Center, MinWidth="10", Commands = deductionMethodsCommands }
    };

    List<object> workshiftsCommands = new List<object>();
    workshiftsCommands.Add(new { type = "Edit", buttonOption = new { iconCss = "e-icons e-edit", cssClass = "e-flat" } });
    workshiftsCommands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "e-flat" } });
    workshiftsCommands.Add(new { type = "Save", buttonOption = new { iconCss = "e-icons e-update", cssClass = "e-flat" } });
    workshiftsCommands.Add(new
    {
        type = "Cancel",
        buttonOption = new { iconCss = "e-icons e-cancel-icon", cssClass = "e-flat" }
    });

    List<GridColumn> workshiftsGridColumns = new List<GridColumn>() {
        new GridColumn { Field = "id", Width = "80", HeaderText = "#", TextAlign=TextAlign.Center,  MinWidth="10", IsPrimaryKey=true  },
        new GridColumn { Field = "title", Width = "110", HeaderText = "Title", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "department.name", Width = "110", HeaderText = "Department", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "startHour", Width = "110", HeaderText = "Start Hour", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "endHour", Width = "110", HeaderText = "End Hour", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "deductionMethod.title", Width = "110", HeaderText = "Deduction Method", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "", Width = "110", HeaderText = "Days of the Week", TextAlign=TextAlign.Center,  MinWidth="10", 
            Columns = new List<GridColumn>()
            {
                new GridColumn { Field = "isSUN", Width = "110", HeaderText = "SUN", DisplayAsCheckBox=true, TextAlign=TextAlign.Center, AutoFit=true },
                new GridColumn { Field = "isMON", Width = "110", HeaderText = "MON", DisplayAsCheckBox=true, TextAlign=TextAlign.Center, AutoFit=true  },
                new GridColumn { Field = "isTUE", Width = "110", HeaderText = "TUE", DisplayAsCheckBox=true, TextAlign=TextAlign.Center, AutoFit=true  },
                new GridColumn { Field = "isWED", Width = "110", HeaderText = "WED", DisplayAsCheckBox=true, TextAlign=TextAlign.Center, AutoFit=true  },
                new GridColumn { Field = "isTHU", Width = "110", HeaderText = "THU", DisplayAsCheckBox=true, TextAlign=TextAlign.Center, AutoFit=true  },
                new GridColumn { Field = "isFRI", Width = "110", HeaderText = "FRI", DisplayAsCheckBox=true, TextAlign=TextAlign.Center, AutoFit=true  },
                new GridColumn { Field = "isSAT", Width = "110", HeaderText = "SAT", DisplayAsCheckBox=true, TextAlign=TextAlign.Center, AutoFit=true  },
            }
        },
        new GridColumn { Width = "150", HeaderText = "Actions", TextAlign=TextAlign.Center, MinWidth="10", Commands = workshiftsCommands }
    };
}
<script>
    var isEditingDeductionMethod = false;
    var isEditingWorkshift = false;
    var curWorkshiftEditRow;
    var curDeductionMethodEditRow;
        $(document).ready(function () {
            var dmsGrid = $("#AllDeductionMethodsGrid")[0].ej2_instances[0];
            dmsGrid.showSpinner();

            cERP.appServices.hR.workShiftService.deductionMethods.getAll().done(function (data) {
                dmsGrid.hideSpinner();
                dmsGrid.dataSource = data;
                dmsGrid.refresh();
            });

            var wsGrid = $("#AllWorkshiftsGrid")[0].ej2_instances[0];
            wsGrid.showSpinner();

            cERP.appServices.hR.workShiftService.workshift.getAll().done(function (data) {
                wsGrid.hideSpinner();
                wsGrid.dataSource = data;
                wsGrid.refresh();
            });

            $(".control-section").stop().animate({ height: '87%' }, 150);
            $('#newWorkshiftForm').on('submit', function(e) {
                e.preventDefault();
                if (ValidateWorkshiftForm())
                {
                    Swal.showLoading();

                    let form = [];
                    let generalInfo = $('#newWorkshiftForm').find("select, textarea, input").serializeArray();
                    form = form.concat(generalInfo);
                    var params = objectifyForm(form);
                    params.isSUN = params.isSUN == 'on' ? 'true' : 'false';
                    params.isMON = params.isMON == 'on' ? 'true' : 'false';
                    params.isTUE = params.isTUE == 'on' ? 'true' : 'false';
                    params.isWED = params.isWED == 'on' ? 'true' : 'false';
                    params.isTHU = params.isTHU == 'on' ? 'true' : 'false';
                    params.isFRI = params.isFRI == 'on' ? 'true' : 'false';
                    params.isSAT = params.isSAT == 'on' ? 'true' : 'false';
                    params.isEditing = isEditingWorkshift;

                    if (isEditingWorkshift)
                        params.Id = curWorkshiftEditRow.id;

                    let formData = new FormData();
                    formData.append("info", JSON.stringify(params));
                    var xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
                    formData.append("__RequestVerificationToken", xhrToken);

                    $.ajax({
                        url: "?handler=Workshift",
                        async: true,
                        type: "POST",
                        data: formData,
                        contentType: false,
                        processData: false,
                        success: function (data) {
                            var grid = $("#AllWorkshiftsGrid")[0].ej2_instances[0];
                            console.log("Response");
                            Swal.hideLoading();
                            if (isEditingWorkshift) {
                                curWorkshiftEditRow.id = data.id;
                                curWorkshiftEditRow.workshiftTitle = data.workshiftTitle;
                                //curWorkshiftEditRow.department = data.department;
                                curWorkshiftEditRow.deductionMethod = data.deductionMethod;
                                curWorkshiftEditRow.startHour = data.startHour;
                                curWorkshiftEditRow.endHour = data.endHour;
                                curWorkshiftEditRow.isSUN = data.isSUN;
                                curWorkshiftEditRow.isMON = data.isMON;
                                curWorkshiftEditRow.isTUE = data.isTUE;
                                curWorkshiftEditRow.isWED = data.isWED;
                                curWorkshiftEditRow.isTHU = data.isTHU;
                                curWorkshiftEditRow.isFRI = data.isFRI;
                                curWorkshiftEditRow.isSAT = data.isSAT;

                                grid.refresh(); // refresh the Grid.

                                swal.fire("Success", "Workshift has successfully been updated", "success");
                            }
                            else {
                                grid.dataSource.push(data);
                                grid.refresh(); // refresh the Grid.

                                swal.fire("Success", "Workshift has successfully been added", "success");
                            }
                            //window.location = "@Url.Content("~")/HR/Employees";
                        },
                        error: function (err) {
                            Swal.hideLoading();
                            if (isEditingWorkshift)
                                swal.fire("Failed", "Workshift couldn't be updated, please fix all errors and try again.", "error");
                            else
                                swal.fire("Failed", "Workshift couldn't be added, please fix all errors and try again.", "error");

                            console.log(err);
                        }
                    });
                }
                else
                {
                    Swal.close();
                    Swal.hideLoading();
                }
            });

            function ValidateWorkshiftForm()
            {
                var elmForm = $("#newWorkshiftForm");
                // stepDirection === 'forward' :- this condition allows to do the form validation
                // only on forward navigation, that makes easy navigation on backwards still do the validation when going next
                var valid = false;
                elmForm.validator('validate');
                if (elmForm)
                {
                    //elmForm.validate({
                    //    submitHandler: function (form) {
                    //        console.log("Submit")
                    //        valid = true;
                    //    },
                    //    invalidHandler: function (form) {
                    //        console.log("Invalid")
                    //        valid = false;
                    //    }
                    //})
                    var days = $("#tblDOW > tbody > tr > td > div.e-checkbox-wrapper");
                    var isSelected;
                    for (var i = 0; i < days.length; i++) {
                        var day = $(days[i]);
                        isSelected = day.attr('aria-checked') == 'true';
                        if (isSelected) break;
                    }
                    if (!isSelected) {
                        $("#dowFormGroup").addClass('has-error');
                        //console.log($("#dowFormGroup"));
                        return false;
                    }
                    var elmErr = elmForm.find('.has-error');
                    if (elmErr)
                    {
                        if (elmErr.length > 0)
                        {
                            // Form validation failed
                            valid = false;
                        }
                        else
                        {
                            valid = true;
                        }
                    }
                }
                return valid;
            }

            $('#newDeductionMethodForm').on('submit', function (e) {
                e.preventDefault();
                if (ValidateDeductionMethodForm())
                {
                    Swal.showLoading();

                    let form = [];
                    let generalInfo = $('#newDeductionMethodForm').find("select, textarea, input").serializeArray();
                    form = form.concat(generalInfo);
                    var params = objectifyForm(form);
                    params.isEditing = isEditingDeductionMethod;

                    if (isEditingDeductionMethod)
                        params.Id = curDeductionMethodEditRow.id;

                    let formData = new FormData();
                    formData.append("info", JSON.stringify(params));
                    var xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
                    formData.append("__RequestVerificationToken", xhrToken);

                    $.ajax({
                        url: "?handler=DeductionMethod",
                        async: true,
                        type: "POST",
                        data: formData,
                        contentType: false,
                        processData: false,
                        success: function (data) {
                            var gridWS = $("#AllWorkshiftsGrid")[0].ej2_instances[0];
                            var grid = $("#AllDeductionMethodsGrid")[0].ej2_instances[0];

                            Swal.hideLoading();
                            if (isEditingDeductionMethod) {
                                curDeductionMethodEditRow.id = data.id;
                                curDeductionMethodEditRow.title = data.title;
                                curDeductionMethodEditRow.hoursMultiplicationFactor = data.hoursMultiplicationFactor;

                                grid.refresh(); // refresh the Grid.

                                swal.fire("Success", "Deduction method has successfully been updated", "success");

                                //for (var i = 0; i < gridWS.dataSource.length; i++) {
                                //    if (gridWS.dataSource[i].deductionMethod != null && gridWS.dataSource[i].deductionMethod.id == data.id) {
                                //        gridWS.dataSource[i].deductionMethod = data;
                                //    }
                                //}

                                //gridWS.refresh();

                                for (var i = 0; i < gridWS.dataSource.length; i++) {
                                    if (gridWS.dataSource[i].deductionMethod != null && gridWS.dataSource[i].deductionMethod.id == data.id) {
                                        gridWS.dataSource[i].deductionMethod = data;
                                    }
                                }

                                $(`#deductionMethodId option[value='${data.id}']`).text(data.title);
                                $(`#deductionMethodId option[value='${data.id}']`).attr('data-value', data.title);

                            }
                            else {
                                $("#deductionMethodId").append(`<option value="${data.id}" data-value='${data.title}'>${data.title}</option>`)
                                grid.dataSource.push(data);
                                grid.refresh(); // refresh the Grid.

                                swal.fire("Success", "Deduction method has successfully been added", "success");
                            }
                            //window.location = "@Url.Content("~")/HR/Employees";
                        },
                        error: function (err) {
                            Swal.hideLoading();
                            if (isEditingDeductionMethod)
                                swal.fire("Failed", "Deduction method couldn't be updated, please fix all errors and try again.", "error");
                            else
                                swal.fire("Failed", "Deduction method couldn't be added, please fix all errors and try again.", "error");

                            console.log(err);
                        }
                    });
                }
                else
                {
                    Swal.close();
                    Swal.hideLoading();
                }
            });

            function ValidateDeductionMethodForm()
            {
                var elmForm = $("#newDeductionMethodForm");
                // stepDirection === 'forward' :- this condition allows to do the form validation
                // only on forward navigation, that makes easy navigation on backwards still do the validation when going next
                var valid = false;
                elmForm.validator('validate');
                if (elmForm)
                {
                    //elmForm.validate({
                    //    submitHandler: function (form) {
                    //        console.log("Submit")
                    //        valid = true;
                    //    },
                    //    invalidHandler: function (form) {
                    //        console.log("Invalid")
                    //        valid = false;
                    //    }
                    //})

                    var elmErr = elmForm.find('.has-error');
                    if (elmErr)
                    {
                        if (elmErr.length > 0)
                        {
                            // Form validation failed
                            valid = false;
                        }
                        else
                        {
                            valid = true;
                        }
                    }
                }
                return valid;
            }
        });
    </script>

<style>
    #tblDOW thead th {
        text-align: center !important;
        font-size: 15px !important;
        vertical-align: bottom;
        white-space: nowrap;
        background-color: #35c6f5;
        color: #ffffff;
        padding: 10px 0px;
        font-family: Roboto;
        font-weight: 400;
    }

    #tblDOW tbody td, #tblDOW tfoot td {
        padding: 10px 0 10px 0;
        text-align:center;
        width: 42px;
    }

    #tblDOW tbody td .form-control {
        padding: 1px;
        border: 0px !important;
        margin: 0px;
        font-size: 13px;
        text-align: center;
        background-color: transparent;
    }

    #tblDOW tbody td .form-control[readonly], tblDOW tbody td .form-control[readonly] {
        background-color: #ededed !important;
    }
</style>

<div class="col-md-4">
    <div class="well m-t-20">
        <div id="toggleAddDeductionMethodSection" class="p-t-0">
            <div class="row">
                <div class="col-lg-12">
                    <button id="addDeductionMethodSecToggleBtn" type="button" class="btn btn-primary btn-block" onclick="toggleAddDeductionMethodSection();">Add New Deduction Method</button>
                </div>
            </div>
        </div>
        <div id="addDeductionMethodSection" class="panel-body p-t-0 p-b-0" style="display:none;">
            <div class="m-l-0 m-t-0">
                <h2 id="addDeductionMethodSecTitle"> Add Deduction Method</h2>
                <p>
                    Provide details regarding the deduction method
                </p>
            </div>
            <hr />
            <form></form>
            <form id="newDeductionMethodForm" method="post" data-toggle="validator">
                <div class="row">
                    <div class="col-lg-6 col-md-6 col-sm-6 col-12">
                        <div class="col-sm-12" style="padding:0">
                            <div class="form-group">
                                <label class="control-label m-b-5 ">Title</label>
                                <input type="text" id="deductionMethodTitle" name="DeductionMethodTitle" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" required>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-6 col-md-6 col-sm-6 col-12">
                        <div class="form-group">
                            <label class="margin-bottom-5 control-label">Hours Multiplication Factor:</label>
                            <input type="text" id="hoursMultiplicationFactor" name="HoursMultiplicationFactor" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" required>
                        </div>
                    </div>
                </div>
                <div class="clearfix margin-5"></div>

                <div class="row">
                    <div class="col-lg-12">
                        <input id="submitDeductionMethodAddSection" type="submit" class="btn btn-primary btn-block" value="Add Deduction Method" required />
                    </div>
                </div>
            </form>
        </div>
    </div>

    <div id="deductionMethodCS" class="control-section">
        <div class="areaHeader m-b-5 font-roboto" style="display:flex;">
            <h3 class="control-label" style="flex-grow: 1; margin:0">Current Deduction Methods</h3>
        </div>
        <ejs-grid id="AllDeductionMethodsGrid" enableAutoFill="true" columns="@deductionMethodsGridColumns"
                  dataBound="dataBoundResponsive" commandClick="deductionMethodCommandClick" actionBegin="deductionMethodActionBegin"
                  allowExcelExport="true" height="100%" allowPdfExport="true"
                  hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true"
                  allowSorting="true" allowMultiSorting="true" gridLines="Both"
                  toolbarClick="deductionMethodsToolbarClick" showColumnChooser="true" toolbar="@initialToolBar"
                  allowPaging="true" allowResizing="true">

            <e-grid-filterSettings type="CheckBox">
            </e-grid-filterSettings>
            <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="false"></e-grid-editSettings>
            <e-grid-selectionsettings type="Multiple">
            </e-grid-selectionsettings>
            <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
        </ejs-grid>
    </div>
</div>

<div class="col-md-8">
    <div class="well m-t-20">
        <div id="toggleAddWorkshiftSection" class="p-t-0">
            <div class="row">
                <div class="col-lg-12">
                    <button id="addWorkshiftSecToggleBtn" type="button" class="btn btn-primary btn-block" onclick="toggleAddWorkshiftSection();">Add New Workshift</button>
                </div>
            </div>
        </div>
        <div id="addWorkshiftSection" class="panel-body p-t-0 p-b-0" style="display:none;">
            <div class="m-l-0 m-t-0">
                <h2 id="addWorkshiftSecTitle"> Add Workshift</h2>
                <p>
                    Provide details regarding the workshift
                </p>
            </div>
            <hr />
            <form id="newWorkshiftForm" method="post" data-toggle="validator">
                <div class="row">
                    <div class="col-lg-4 col-md-6 col-sm-6 col-12">
                        @*<div class="col-sm-3" style="padding:0">
                        <div class="form-group">
                            <label class="control-label m-b-5">Code:</label>
                            <input type = "number" id="mobileKey" name="MobileKey" style="width:100% !important" class="form-control inline pull-left">
                        </div>
                    </div>*@
                        <div class="col-sm-12" style="padding:0">
                            <div class="form-group">
                                <label class="control-label m-b-5 ">Title</label>
                                <input type="text" id="workshiftTitle" name="Title" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" required>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-4 col-md-6 col-sm-6 col-12">
                        @*<div class="col-sm-3" style="padding:0">
                        <div class="form-group">
                            <label class="control-label m-b-5">Code:</label>
                            <input type = "number" id="faxKey" name="FaxKey" style="width:100% !important" class="form-control inline pull-left">
                        </div>
                    </div>*@
                        <div class="col-sm-12" style="padding:0">
                            <div class="form-group">
                                <label class="control-label m-b-5 ">Deduction Method:</label>
                                <select id="deductionMethodId" name="DeductionMethod.Id" class="form-control" required>
                                    <option></option>
                                    @for (int i = 0; i < deductionMethods.Count; i++)
                                    {
                                        <option value="@deductionMethods[i].Id" data-value="@deductionMethods[i].Title">@deductionMethods[i].Title</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-4 col-md-6 col-sm-6 col-12">
                        @*<div class="col-sm-3" style="padding:0">
                        <div class="form-group">
                            <label class="control-label m-b-5">Code:</label>
                            <input type = "number" id="faxKey" name="FaxKey" style="width:100% !important" class="form-control inline pull-left">
                        </div>
                    </div>*@
                        <div class="col-sm-6" style="padding:0">
                            <div class="form-group">
                                <label class="control-label m-b-5 ">Start Hour:</label>
                                <input type="text" id="startHour" name="StartHour" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" required>
                            </div>
                        </div>
                        <div class="col-sm-6" style="padding:0">
                            <div class="form-group">
                                <label class="margin-bottom-5  control-label">End Hour:</label>
                                <input type="text" id="endHour" name="EndHour" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" required>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                        <div id="dowFormGroup" class="form-group">
                            <label class="margin-bottom-5  control-label">Days of the week:</label>
                            <table id="tblDOW" class="table table-bordered margin-0">
                                <thead>
                                    <tr>
                                        <th>SUN</th>
                                        <th>MON</th>
                                        <th>TUE</th>
                                        <th>WED</th>
                                        <th>THU</th>
                                        <th>FRI</th>
                                        <th>SAT</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td width="20px">
                                            <ejs-checkbox id="isSUN" name="isSUN" checked="false" />
                                        </td>
                                        <td width="20px">
                                            <ejs-checkbox id="isMON" name="isMON" checked="true" />
                                        </td>
                                        <td width="20px">
                                            <ejs-checkbox id="isTUE" name="isTUE" checked="true" />
                                        </td>
                                        <td width="20px">
                                            <ejs-checkbox id="isWED" name="isWED" checked="true" />
                                        </td>
                                        <td width="20px">
                                            <ejs-checkbox id="isTHU" name="isTHU" checked="true" />
                                        </td>
                                        <td width="20px">
                                            <ejs-checkbox id="isFRI" name="isFRI" checked="true" />
                                        </td>
                                        <td width="20px">
                                            <ejs-checkbox id="isSAT" name="isSAT" checked="true" />
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                <div class="clearfix margin-5"></div>
                <div class="row">
                    <div class="col-lg-12">
                        <input id="submitWorkshiftAddSection" type="submit" class="btn btn-primary btn-block" value="Add Workshift" required />
                    </div>
                </div>
                @*<div class="row">
                <div class="col-lg-12">
                    <input id = "submitWorkshiftAddSection" type="submit" class="btn btn-primary btn-block" value="Submit Workshift" required />
                </div>
            </div>*@
            </form>
        </div>
        </div>

    <div id="workshiftCS" class="control-section">
            <div class="areaHeader m-b-5 font-roboto" style="display:flex;">
                <h3 class="control-label" style="flex-grow: 1; margin:0">Current Workshifts</h3>
            </div>
            <ejs-grid id="AllWorkshiftsGrid" enableAutoFill="true" columns="@workshiftsGridColumns"
                      dataBound="dataBoundResponsive" commandClick="commandClick" actionBegin="actionBegin"
                      allowExcelExport="true" height="100% " allowPdfExport="true"
                      hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true"
                      allowSorting="true" allowMultiSorting="true" gridLines="Both"
                      toolbarClick="toolbarClick" showColumnChooser="true" toolbar="@initialToolBar"
                      allowPaging="true" allowResizing="true">

                <e-grid-filterSettings type="CheckBox">
                </e-grid-filterSettings>
                <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="false"></e-grid-editSettings>
                <e-grid-selectionsettings type="Multiple">
                </e-grid-selectionsettings>
                <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
            </ejs-grid>
        </div>
</div>

<script>
    function UpdateWorkshifts() {
        $.ajax({
            url: '?handler=Workhifts',
            async: true,
            type: "GET",
            data: {},
            success: function (data) {
                console.log("DATA");
                console.log(data);
                var grid = $("#AllWorkshiftsGrid")[0].ej2_instances[0];
                grid.dataSource = data;
                grid.refresh();
            },
            error: function (err) {
                console.log(err);
            }
        });
    }
    function deductionMethodActionBegin(args) {
        if (args.requestType == "save") {

        }
        else if (args.requestType == "delete") {
            Swal.showLoading();

            let formData = new FormData();
            formData.append("deductionMethods", JSON.stringify(args.data));
            var xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
            formData.append("__RequestVerificationToken", xhrToken);

            var gridWS = $("#AllWorkshiftsGrid")[0].ej2_instances[0];

            $.ajax({
                url: '?handler=DeductionMethod',
                async: true,
                type: "DELETE",
                data: formData,
                contentType: false,
                processData: false,
                success: function (data) {
                    for (var i = 0; i < args.data.length; i++) {
                        $(`#deductionMethodId option[value='${args.data[i].id}']`).remove();
                    }
                    swal.fire("Success", "Deduction method has successfully been deleted", "success");

                    if ($('#addDeductionMethodSection').css('display') !== 'none') {
                        $('#addDeductionMethodSection').slideUp();
                        $('#toggleAddDeductionMethodSection').slideUp(50);
                        setTimeout(function () {
                            $('#addDeductionMethodSecToggleBtn').html('Add New Deduction Method');
                        }, 50);
                        $('#toggleAddDeductionMethodSection').slideDown(250);
                    }

                    UpdateWorkshifts();

                    gridWS.refresh();
                },
                error: function (err) {
                    swal.fire("Failed", "Deduction method couldn't be deleted, please fix all errors and try again.", "error");

                    console.log(err);

                }
            });
        }
    }
    function deductionMethodCommandClick(args)
    {
        if (args.commandColumn.type == "Edit")
        {
            console.log(args);
            var params = args.rowData;  // display row data
            curDeductionMethodEditRow = args.rowData;

            $('#toggleAddDeductionMethodSection').slideUp(50);
            $('#toggleAddDeductionMethodSection').slideDown(250);
            $('#addDeductionMethodSection').slideUp(50);
            $('#addDeductionMethodSection').slideDown(250);

            $('#submitDeductionMethodAddSection').val('Update Deduction Method');
            $('#addDeductionMethodSecTitle').html('Update Deduction Method');

            setTimeout(function() {
                $('#addDeductionMethodSecToggleBtn').html('Close Section');

                $('#deductionMethodTitle').val(params.title);
                $('#hoursMultiplicationFactor').val(params.hoursMultiplicationFactor);

                isEditingDeductionMethod = true;
            }, 50);
        }
        else if (args.commandColumn.type == "Copy")
        {
            this.copy(false);
        }
    }
    
    function actionBegin(args) {
        if (args.requestType == "save") {

        }
        else if (args.requestType == "delete") {
            Swal.showLoading();

            let formData = new FormData();
            formData.append("workshifts", JSON.stringify(args.data));
            var xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
            formData.append("__RequestVerificationToken", xhrToken);

            $.ajax({
                url: '?handler=Workshift',
                async: true,
                type: "DELETE",
                data: formData,
                contentType: false,
                processData: false,
                success: function (data) {
                    //console.log(data.success);
                    swal.fire("Success", "Workshift has successfully been deleted", "success");

                    if ($('#addWorkshiftSection').css('display') !== 'none') {
                        $('#addWorkshiftSection').slideUp();
                        $('#toggleAddWorkshiftSection').slideUp(50);
                        setTimeout(function () {
                            $('#addWorkshiftSecToggleBtn').html('Add New Workshift');
                        }, 50);
                        $('#toggleAddWorkshiftSection').slideDown(250);
                    }
                },
                error: function (err) {
                    swal.fire("Failed", "Workshift couldn't be deleted, please fix all errors and try again.", "error");

                    console.log(err);
                }
            });
        }
    }
    function commandClick(args) {
        if (args.commandColumn.type == "Edit") {
            console.log(args);
            var params = args.rowData;  // display row data
            curWorkshiftEditRow = args.rowData;

            $('#toggleAddWorkshiftSection').slideUp(50);
            $('#toggleAddWorkshiftSection').slideDown(250);
            $('#addWorkshiftSection').slideUp(50);
            $('#addWorkshiftSection').slideDown(250);

            $('#submitWorkshiftAddSection').val('Update Workshift');
            $('#addWorkshiftSecTitle').html('Update Workshift');

            setTimeout(function () {
                $('#addWorkshiftSecToggleBtn').html('Close Section');

                $('#workshiftTitle').val(params.title);
                $('#startHour').val(params.startHour);
                $('#endHour').val(params.endHour);
                try {
                    //$('#departmentId').val(params.department.id);
                    $('#deductionMethodId').val(params.deductionMethod.id);
                }
                catch {

                }
                $('#isSUN')[0].ej2_instances[0].checked = params.isSUN;
                $('#isMON')[0].ej2_instances[0].checked = params.isMON;
                $('#isTUE')[0].ej2_instances[0].checked = params.isTUE;
                $('#isWED')[0].ej2_instances[0].checked = params.isWED;
                $('#isTHU')[0].ej2_instances[0].checked = params.isTHU;
                $('#isFRI')[0].ej2_instances[0].checked = params.isFRI;
                $('#isSAT')[0].ej2_instances[0].checked = params.isSAT;

                isEditingWorkshift = true;
            }, 50);
        }
        else if (args.commandColumn.type == "Copy") {
            this.copy(false);
        }
    }

    function toggleAddWorkshiftSection() {
        if ($('#addWorkshiftSection').css('display') == 'none') {
            $('#toggleAddWorkshiftSection').slideUp(50);
            setTimeout(function () {
                $('#addWorkshiftSecToggleBtn').html('Cancel');
            }, 50);
            $('#toggleAddWorkshiftSection').slideDown(250);

            $('#addWorkshiftSection').slideUp(50);

            $('#submitWorkshiftAddSection').val('Add Workshift');
            $('#addWorkshiftSecTitle').html('Create New Workshift');

            setTimeout(function () {
                //$('#departmentId').val('');
                $('#workshiftTitle').val('');
                $('#startHour').val('');
                $('#endHour').val('');

                isEditingWorkshift = false;
            }, 50);

            $('#addWorkshiftSection').slideDown(250);

            $("#workshiftCS").stop().animate({ height: '63%' }, 150);
        }
        else {
            $('#addWorkshiftSection').slideUp(250);

            $("#workshiftCS").stop().animate({ height: '87%' }, 150);
            $('#toggleAddWorkshiftSection').slideUp(50);
            setTimeout(function () {
                $('#addWorkshiftSecToggleBtn').html('Add New Workshift');
            }, 50);
            $('#toggleAddWorkshiftSection').slideDown(250);
        }
    }
    function toggleAddDeductionMethodSection() {
        if ($('#addDeductionMethodSection').css('display') == 'none') {
            $('#toggleAddDeductionMethodSection').slideUp(50);
            setTimeout(function () {
                $('#addDeductionMethodSecToggleBtn').html('Cancel');
            }, 50);
            $('#toggleAddDeductionMethodSection').slideDown(250);

            $('#addDeductionMethodSection').slideUp(50);

            $('#submitDeductionMethodAddSection').val('Add Deduction Method');
            $('#addDeductionMethodSecTitle').html('Create New Deduction Method');

            setTimeout(function () {
                $('#deductionMethodTitle').val('');
                $('#hoursMultiplicationFactor').val('');

                isEditingDeductionMethod = false;
            }, 50);

            $('#addDeductionMethodSection').slideDown(250);

            $("#deductionMethodCS").stop().animate({ height: '63%' }, 150);
        }
        else {
            $('#addDeductionMethodSection').slideUp(250);

            $("#deductionMethodCS").stop().animate({ height: '87%' }, 150);
            $('#toggleAddDeductionMethodSection').slideUp(50);
            setTimeout(function () {
                $('#addDeductionMethodSecToggleBtn').html('Add New Deduction Method');
            }, 50);
            $('#toggleAddDeductionMethodSection').slideDown(250);
        }
    }
    function onLoad()
    {
        this.parentDetails.parentKeyFieldValue = this.parentDetails.parentRowData['Id'];
    }
    function toolbarClick(args)
    {
        var gridObj = document.getElementById("AllWorkshiftsGrid").ej2_instances[0];
        if (args.item.id === 'AllWorkshiftsGrid_pdfexport')
        {
            gridObj.pdfExport();
        }
        if (args.item.id === 'AllWorkshiftsGrid_excelexport')
        {
            gridObj.excelExport();
        }
        if (args.item.id === 'AllWorkshiftsGrid_csvexport')
        {
            gridObj.csvExport();
        }
        if (this.getSelectedRecords().length > 0)
        {
            var withHeader = false;
            if (args.item.id === 'copyHeader')
            {
                withHeader = true;
            }
            this.copy(withHeader);
        }
        else
        {
            if (args.item.id === 'copyHeader')
            {
                var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                dialogObj.show();
            }
            else if (args.item.id === 'copy')
            {
                var dialogObj = document.getElementById('alert_dialog_1').ej2_instances[0];
                dialogObj.show();
            }
        }
        if (args.item.id === 'showActions')
        {
            gridObj.toolbar = [{ text: "Hide Actions", tooltipText: "Actions", prefixIcon: "e-custom-hide-actions", id: "hideActions" }, { text: "Toggle Grouping", tooltipText: "Grouping", prefixIcon: "e-custom-group-toggle", id: "toggleGrouping" }, { text: "Toggle Detailed", tooltipText: "Toggle Detailed", prefixIcon: "e-toggledetailed", id: "toggleDetailed" }, "ExcelExport", "CsvExport", "Print", "Search", "Delete", { text: "Copy", tooltipText: "Copy", prefixIcon: "e-copy", id: "copy" }, { text: "Copy With Header", tooltipText: "Copy With Header", prefixIcon: "e-copy", id: "copyHeader" }, "ColumnChooser"];
            gridObj.refresh();
        }
        if (args.item.id === 'hideActions')
        {
            gridObj.toolbar = [{ text: "Show Actions", tooltipText: "Actions", prefixIcon: "e-custom-show-actions", id: "showActions" }, "Search", "ColumnChooser"];
            gridObj.showColumnChooser = true;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleGrouping')
        {
            gridObj.allowGrouping = !gridObj.allowGrouping;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleDetailed')
        {
            var visCount = 0;
            for (var i = 0; i < gridObj.columns.length; i++)
            {
                if (gridObj.columns[i].visible) visCount++;
            }
            if (visCount == gridObj.columns.length)
            {
                for (var i = 0; i < gridObj.columns.length; i++)
                {
                    var col = gridObj.columns[i];
                    if (typeof col.customAttributes != 'undefined' && typeof col.customAttributes.id != 'undefined' && col.customAttributes.id == 'detailed')
                        gridObj.showHider.hide(col.headerText, 'headerText');
                    else if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
            else
            {
                for (var i = 0; i < gridObj.columns.length; i++)
                {
                    var col = gridObj.columns[i];
                    if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
        }
    }
    function deductionMethodsToolbarClick(args)
    {
        var gridObj = document.getElementById("AllDeductionMethodsGrid").ej2_instances[0];
        if (args.item.id === 'AllDeductionMethodsGrid_pdfexport')
        {
            gridObj.pdfExport();
        }
        if (args.item.id === 'AllDeductionMethodsGrid_excelexport')
        {
            gridObj.excelExport();
        }
        if (args.item.id === 'AllDeductionMethodsGrid_csvexport')
        {
            gridObj.csvExport();
        }
        if (this.getSelectedRecords().length > 0)
        {
            var withHeader = false;
            if (args.item.id === 'copyHeader')
            {
                withHeader = true;
            }
            this.copy(withHeader);
        }
        else
        {
            if (args.item.id === 'copyHeader')
            {
                var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                dialogObj.show();
            }
            else if (args.item.id === 'copy')
            {
                var dialogObj = document.getElementById('alert_dialog_1').ej2_instances[0];
                dialogObj.show();
            }
        }
        if (args.item.id === 'showActions')
        {
            gridObj.toolbar = [{ text: "Hide Actions", tooltipText: "Actions", prefixIcon: "e-custom-hide-actions", id: "hideActions" }, { text: "Toggle Grouping", tooltipText: "Grouping", prefixIcon: "e-custom-group-toggle", id: "toggleGrouping" }, { text: "Toggle Detailed", tooltipText: "Toggle Detailed", prefixIcon: "e-toggledetailed", id: "toggleDetailed" }, "ExcelExport", "CsvExport", "Print", "Search", "Delete", { text: "Copy", tooltipText: "Copy", prefixIcon: "e-copy", id: "copy" }, { text: "Copy With Header", tooltipText: "Copy With Header", prefixIcon: "e-copy", id: "copyHeader" }, "ColumnChooser"];
            gridObj.refresh();
        }
        if (args.item.id === 'hideActions')
        {
            gridObj.toolbar = [{ text: "Show Actions", tooltipText: "Actions", prefixIcon: "e-custom-show-actions", id: "showActions" }, "Search", "ColumnChooser"];
            gridObj.showColumnChooser = true;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleGrouping')
        {
            gridObj.allowGrouping = !gridObj.allowGrouping;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleDetailed')
        {
            var visCount = 0;
            for (var i = 0; i < gridObj.columns.length; i++)
            {
                if (gridObj.columns[i].visible) visCount++;
            }
            if (visCount == gridObj.columns.length)
            {
                for (var i = 0; i < gridObj.columns.length; i++)
                {
                    var col = gridObj.columns[i];
                    if (typeof col.customAttributes != 'undefined' && typeof col.customAttributes.id != 'undefined' && col.customAttributes.id == 'detailed')
                        gridObj.showHider.hide(col.headerText, 'headerText');
                    else if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
            else
            {
                for (var i = 0; i < gridObj.columns.length; i++)
                {
                    var col = gridObj.columns[i];
                    if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
        }
    }
    function alertBtnClick()
    {
        var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
        var dialogObj1 = document.getElementById('alert_dialog_1').ej2_instances[0];
        dialogObj.hide();
        dialogObj1.hide();
    }
    var initial = true;
    function dataBound(args)
    {
        //this.autoFitColumns();
        //if (initial == true) {
        //    this.groupModule.collapseAll();
        //    initial = false;
        //}
        //console.log(args);
    }
</script>