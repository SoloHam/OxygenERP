@page "/HR/OrganizationStructure/Jobs"
@using CERP.Localization;
@using Microsoft.AspNetCore.Mvc.Localization;
@using CERP.App;
@using CERP;
@using CERP.HR.Setup.OrganizationalManagement.OrganizationStructure;
@inject IHtmlLocalizer<CERPResource> L
@inject Volo.Abp.Json.IJsonSerializer JsonSerializer
@using CERP.App.Helpers;

@model CERP.Web.Areas.HR.Setup.OrganizationalManagement.OrganizationStructure.Pages.Jobs.ListModel
@{
    ViewData["IsEditing"] = false;
    bool IsEditing = (bool)ViewData["IsEditing"];

    ViewData["Title"] = L["Jobs"].Name;
    ViewData["IconClass"] = "fas fa-user-md";
    ViewData["HeaderTitle"] = L["Jobs"].Name.ToUpper();
    ViewData["SubTitle"] = $"{L["ListOf"]} {L["Jobs"]}";
    ViewData["Area"] = "Setup";

    ViewData["IsList"] = false;
    ViewData["IsCreate"] = false;
    string cNT = $"{L["Add"].Name} {L["Job"].Name}";
    ViewData["CreateNewText"] = cNT;
    ViewData["CreateNewLink"] = "/Jobs/Job";

    string TabPlaceholder = (bool)ViewData["IsEditing"] ? L["Area"].Name : L["Step"].Name;

    var alertanimation = new Syncfusion.EJ2.Popups.DialogAnimationSettings { Effect = Syncfusion.EJ2.Popups.DialogEffect.None };

    var initialToolBar = new List<object>() { new { text = "Show Actions", tooltipText = "Actions", prefixIcon = "e-custom-show-actions", id = "showActions" }, "Search", "ColumnChooser" };
    var fullToolBar = new List<object>() { new { text = "Hide Actions", tooltipText = "Actions", prefixIcon = "e-custom-hide-actions", id = "hideActions" }, new { text = "Toggle Grouping", tooltipText = "Grouping", prefixIcon = "zmdi-chevron-up", id = "toggleGrouping" }, new { text = "Audit Trail", tooltipText = "View Audit Trail", prefixIcon = "e-toggleaudittrail", id = "toggleaudittrail" }, new { text = "Toggle Detailed", tooltipText = "Toggle Detailed", prefixIcon = "e-toggledetailed", id = "toggleDetailed" }, "ExcelExport", "CsvExport", "Print", "Search", new { text = "Copy", tooltipText = "Copy", prefixIcon = "e-copy", id = "copy" }, new { text = "Copy With Header", tooltipText = "Copy With Header", prefixIcon = "e-copy", id = "copyHeader" }, "ColumnChooser" };

    List<object> jobsCommands = new List<object>();
    jobsCommands.Add(new { type = "Edit", buttonOption = new { iconCss = "e-icons e-edit", cssClass = "e-flat" } });
    jobsCommands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "e-flat" } });
    jobsCommands.Add(new { type = "Cancel", buttonOption = new { iconCss = "e-icons e-cancel-icon", cssClass = "e-flat" } });

    List<object> jobPositionsCommands = new List<object>();
    jobPositionsCommands.Add(new { type = "Edit", buttonOption = new { iconCss = "e-icons e-edit", cssClass = "e-flat" } });
    jobPositionsCommands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "e-flat" } });
    jobPositionsCommands.Add(new { type = "Cancel", buttonOption = new { iconCss = "e-icons e-cancel-icon", cssClass = "e-flat" } });
}

@section styles {
    @if ((bool)ViewData["IsEditing"])
    {
        <link href="~/libs/smartwizard/dist/css/smart_wizard_theme_circles.min.css" rel="stylesheet" />
    }

    <style>
        .customContentArea {
            position: unset !important;
        }
    </style>
}
@section scripts {

    <script>
        var isEditingJobs = false;
        var curJobsEditRow;
        $(document).ready(function () {
            let options = {
                buttonWidth: '100%',
                includeSelectAllOption: true,
                enableFiltering: false,
                enableClickableOptGroups: true,
                includeResetOption: true,
                includeResetDivider: true,
                enableCollapsibleOptGroups: true
            };

            let gridObj = $("#JobsGrid")[0].ej2_instances[0];
            cERP.appServices.hR.organizationalManagement.organizationStructure.oS_JobTemplate.getList({}).done(function (data) {
                gridObj.dataSource = data.items;
                setTimeout(function () { gridObj.hideSpinner() }, 200);
            });

            $('#addJobsBtn').on('click', function () {
                isEditingJobs = false;

                $('#submitJobBtn').val('Create Job');
            });
            $('#submitJobBtn').on('click', function (e) {
                e.preventDefault();
                if (ValidateForm('jobSpecificForm')) {
                    gridObj.showSpinner();
                    Swal.showLoading();

                    let form = [];
                    let jobDetails = $('#jobSpecificForm').find("textarea, input, select").serializeArray();
                    form = form.concat(jobDetails);

                    let params = objectifyForm(form);

                    let id = 0;
                    if (gridObj.dataSource.length > 0)
                        id = gridObj.dataSource[gridObj.dataSource.length - 1].id;

                    params.isEditing = isEditingJobs;

                    if (isEditingJobs) {
                        params.id = curJobsEditRow.id;

                        //cERP.appServices.hR.leaveRequestTemplates.update()
                    }
                    else {

                        //cERP.appServices.hR.leaveRequestTemplates.update()
                    }

                    let formData = new FormData();
                    formData.append("info", JSON.stringify(params));
                    let xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
                    formData.append("__RequestVerificationToken", xhrToken);
                    console.log(params);
                    $.ajax({
                        url: "?handler=JobTemplate",
                        async: true,
                        type: "POST",
                        data: formData,
                        contentType: false,
                        processData: false,
                        success: function (data) {
                            Swal.hideLoading();
                            console.log(data);
                            if (isEditingJobs) {
                                gridObj.refresh(); // refresh the Grid.

                                swal.fire("Success", "Job has successfully been updated", "success");

                                for (let i = 0; i < gridObj.dataSource.length; i++) {
                                    if (gridObj.dataSource[i].id == data.id) {
                                        gridObj.dataSource[i] = data;
                                    }
                                }
                                gridObj.refresh();
                            }
                            else {
                                gridObj.dataSource.push(data);

                                gridObj.refresh(); // refresh the Grid.

                                swal.fire("Success", "Job has successfully been added", "success");
                            }
                            gridObj.hideSpinner();
                        },
                        error: function (err) {
                            Swal.hideLoading();
                            if (isEditingJobs)
                                swal.fire("Failed", "Job couldn't be updated, please fix all errors and try again.", "error");
                            else
                                swal.fire("Failed", "Job couldn't be added, please fix all errors and try again.", "error");

                            console.log(err);
                            gridObj.hideSpinner();
                        }
                    });
                }
                else {
                    Swal.close();
                    Swal.hideLoading();
                }
            });
        });
    </script>
}
<partial name="_DefaultPageHeader" />
<div class="site-content customContentArea">
    <div class="control-section">
        <div class="areaHeader" style="display:flex;">
            <div id="jobsLoader" class="pull-left loader-inline" style="display:none"></div>
            <div class="areaHeaderTitle">
                <span id="areHeadertitle" class="areaHeaderTitleNode menu-text">Current Jobs</span>
                @*<span id="" class="areaHeaderTitleInNode menu-text"> > </span>*@
                @*<span id="subTitle" class="menu-text" style="padding-left:15px; font-size: 28px; font-family:Roboto; font-weight:200;">@ViewData["SubTitle"]</span>*@
            </div>
            @*<h3 class="control-label" style="flex-grow: 1; margin:0">Approval Route</h3>*@
            <div class="pull-right text-right p-r-20 areaHeaderBtnSec">
                @*<div class="clearfix margin-15"></div>*@
                <a id="addJobsBtn" onclick="areaHeaderBtnClick(event); isEditingJobs = false;" class="btn btn-outline-dark areaHeaderBtn"><i class="fa fa-plus fa-fw"></i> Add New</a>
            </div>
        </div>
        <form id="jobsForm" onkeydown="return event.key != 'Enter';" class="row areaForm" method="post" data-toggle="validator" style="display: none; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
            <div id="jobSpecificForm">
                <div class="row">
                    <div class="col-lg-4 col-md-4 col-sm-6 col-12">
                        <div class="col-md-6 col-sm-6" style="padding:0">
                            <div class="form-group">
                                <label class="control-label m-b-5 ">Title:</label>
                                <input type="text" id="jobTitle" name="Name" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control " required>
                            </div>
                        </div>
                        <div class="col-md-6 col-sm-6" style="padding:0">
                            <div class="form-group">
                                <label class="control-label m-b-5 ">Title (In Arabic):</label>
                                <input type="text" id="jobTitleLocalized" name="NameLocalized" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-4 col-md-4 col-sm-6 col-12">
                        <div class="form-group">
                            <label class="margin-bottom-5 control-label">Job Code:</label>
                            <input type="text" id="jobCode" name="Code" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" required>
                        </div>
                    </div>
                    <div class="col-lg-4 col-md-4 col-sm-6 col-12">
                        <div class="form-group">
                            <label class="margin-bottom-5 control-label">Job Description:</label>
                            <input type="text" id="jobDescription" name="Description" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" required>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-4 col-md-4 col-sm-6 col-12">
                        <div class="form-group">
                            <label class="control-label m-b-5 ">Activation Date:</label>
                            <input type="date" id="activationDate" name="ActivationDate" class="text-left form-control inline pull-left" required>
                        </div>
                    </div>
                    <div class="col-lg-4 col-md-4 col-sm-6 col-12">
                        <div class="col-sm-6" style="padding-right:0">
                            <div class="form-group">
                                <label class="control-label m-b-5 ">Valid From:</label>
                                <input type="date" id="validityFromDate" name="ValidityFromDate" class="text-left form-control inline pull-left" required>
                            </div>
                        </div>
                        <div class="col-sm-6" style="padding-left:0">
                            <div class="form-group">
                                <label class="control-label m-b-5 ">Valid To:</label>
                                <input type="date" id="validityToDate" name="ValidityToDate" class="text-left form-control inline pull-left" required>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-4 col-md-4 col-sm-6 col-12">
                        <div class="col-lg-12" style="padding: 0">
                            <label class="control-label m-b-5 "></label>
                            <input id="submitJobBtn" type="button" class="btn btn-success btn-block" value="Create Job" required />
                        </div>
                    </div>
                </div>
            </div>
        </form>
        <div id="jobsCS" class="control-section">
            <ejs-grid id="JobsGrid" enableAutoFill="true" dataBound="dataBoundResponsive" commandClick="commandClick"
                      showColumnChooser="true" allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true"
                      hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true" actionBegin="jobActionBegin" actionComplete="jobActionComplete"
                      allowSorting="true" allowMultiSorting="true" gridLines="Both" allowTextWrap="true" textWrapSettings="@(new Syncfusion.EJ2.Grids.GridTextWrapSettings() { WrapMode = Syncfusion.EJ2.Grids.WrapMode.Header })"
                      toolbarClick="toolbarClick" toolbar="@initialToolBar"
                      allowPaging="true" allowResizing="true">

                <e-grid-columns>
                    <e-grid-column field="id" headerText="Id" textAlign="Center" isPrimaryKey="true" visible="false" showInColumnChooser="false"></e-grid-column>
                    <e-grid-column headerText="Name" textAlign="Center" columns='new List<Syncfusion.EJ2.Grids.GridColumn>() {
                        new Syncfusion.EJ2.Grids.GridColumn() { Field= "name", HeaderText = "English", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center },
                        new Syncfusion.EJ2.Grids.GridColumn() { Field= "nameLocalized", HeaderText = "Local", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center }
                    }'></e-grid-column>
                    <e-grid-column field="code" headerText="Code" textAlign="Center"></e-grid-column>
                    <e-grid-column field="description" headerText="Description" allowEditing="true" textAlign="Center"></e-grid-column>
                    <e-grid-column field="activationDate" headerText="Activation Date" type="date" format="E, MMMM d, y" , allowEditing="true" editType="datepicker" textAlign="Center"></e-grid-column>
                    <e-grid-column headerText="Validity" textAlign="Center" columns='new List<Syncfusion.EJ2.Grids.GridColumn>() {
                        new Syncfusion.EJ2.Grids.GridColumn() { Field= "validityFromDate", Type="date", Format="E, MMMM d, y", AllowEditing=true, EditType="datepicker", HeaderText = "From", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center },
                        new Syncfusion.EJ2.Grids.GridColumn() { Field= "validityToDate", Type="date", Format="E, MMMM d, y", AllowEditing=true, EditType="datepicker", HeaderText = "To", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center }
                    }'></e-grid-column>

                    <e-grid-column headerText="Actions" textAlign="Center" commands="jobsCommands"></e-grid-column>
                </e-grid-columns>

                <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="false"></e-grid-editSettings>
                <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
            </ejs-grid>
        </div>
        <div id="auditTrail" style="display:none;">
            <partial name="_DataAuditTrailPartialView" model="@Model.GetDataAuditTrailModel()" />
        </div>
    </div>

</div>
<ejs-dialog id="alert_dialog" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy with Header" content="Atleast one row should be selected to copy with header">
    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
    </e-dialog-buttons>
</ejs-dialog>
<ejs-dialog id="alert_dialog_1" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy" content="Atleast one row should be selected to copy">
    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
    </e-dialog-buttons>
</ejs-dialog>

<script>
    function loadPositionStatusesDropdown() {

    }

    let isAuditTrail = false;
    function toolbarClick(args) {
        let gridObj = document.getElementById("JobsGrid").ej2_instances[0];

        if (args.item.id === 'JobsGrid_pdfexport') {
            gridObj.pdfExport();
        }
        if (args.item.id === 'JobsGrid_excelexport') {
            gridObj.excelExport();
        }
        if (args.item.id === 'JobsGrid_csvexport') {
            gridObj.csvExport();
        }
        if (this.getSelectedRecords().length > 0) {
            let withHeader = false;
            if (args.item.id === 'copyHeader') {
                withHeader = true;
            }
            this.copy(withHeader);
        }
        else {
            if (args.item.id === 'copyHeader') {
                let dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                dialogObj.show();
            }
            else if (args.item.id === 'copy') {
                let dialogObj = document.getElementById('alert_dialog_1').ej2_instances[0];
                dialogObj.show();
            }
        }
        if (args.item.id === 'showActions') {
            gridObj.toolbar = [{ text: "Hide Actions", tooltipText: "Actions", prefixIcon: "e-custom-hide-actions", id: "hideActions" }, { text: "Toggle Grouping", tooltipText: "Grouping", prefixIcon: "e-custom-group-toggle", id: "toggleGrouping" }, { text: "Audit Trail", tooltipText: "View Audit Trail", prefixIcon: "e-custom-audit-trail", id: "toggleaudittrail" },  { text: "Toggle Detailed", tooltipText: "Toggle Detailed", prefixIcon: "e-toggledetailed", id: "toggleDetailed" }, "ExcelExport", "PdfExport", "CsvExport", "Print", "Search", { text: "Copy", tooltipText: "Copy", prefixIcon: "e-copy", id: "copy" }, { text: "Copy With Header", tooltipText: "Copy With Header", prefixIcon: "e-copy", id: "copyHeader" }, "ColumnChooser"];
            gridObj.refresh();
        }
        if (args.item.id === 'hideActions') {
            gridObj.toolbar = [{ text: "Show Actions", tooltipText: "Actions", prefixIcon: "e-custom-show-actions", id: "showActions" }, "Search", "ColumnChooser"];
            gridObj.showColumnChooser = true;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleGrouping') {
            gridObj.allowGrouping = !gridObj.allowGrouping;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleDetailed') {
            let visCount = 0;
            for (let i = 0; i < gridObj.columns.length; i++) {
                if (gridObj.columns[i].visible) visCount++;
            }
            if (visCount == gridObj.columns.length) {
                for (let i = 0; i < gridObj.columns.length; i++) {
                    let col = gridObj.columns[i];
                    if (typeof col.customAttributes != 'undefined' && typeof col.customAttributes.id != 'undefined' && col.customAttributes.id == 'detailed')
                        gridObj.showHider.hide(col.headerText, 'headerText');
                    else if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
            else {
                for (let i = 0; i < gridObj.columns.length; i++) {
                    let col = gridObj.columns[i];
                    if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
        }
        if (args.item.id === 'toggleaudittrail') {

            if (!isAuditTrail) {
                var agtGrid = $("#AuditTrailGrid")[0].ej2_instances[0];
                gridObj.showSpinner();

                $.ajax({
                    url: '?handler=DataAuditTrail',
                    async: true,
                    type: "GET",
                    data: {},
                    success: function (data) {
                        gridObj.hideSpinner();

                        //agtGrid.childGrid.childGrid.dataSource = data.tertiaryDS;
                        //agtGrid.childGrid.dataSource = data.secondaryDS;
                        agtGrid.dataSource = data.ds;
                        agtGrid.refresh();

                        $(".customContentArea").css('position', 'unset');
                        $("#auditTrail").slideDown(200);
                    },
                    error: function (data) {
                        gridObj.hideSpinner();

                        $(".customContentArea").css('position', 'absolute');
                        $("#auditTrail").slideUp(200);

                        swal.fire('Failed', `An error occured while generating the audit trail`, 'error');
                    }
                });

            }
            else {
                $(".customContentArea").css('position', 'absolute');
                $("#auditTrail").slideUp(200);
            }

            isAuditTrail = !isAuditTrail;
        }
        setTimeout(function () { gridObj.hideSpinner() }, 200);
    }
    function alertBtnClick() {
        let dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
        let dialogObj1 = document.getElementById('alert_dialog_1').ej2_instances[0];
        dialogObj.hide();
        dialogObj1.hide();
    }
    function commandClick(args) {
        let gridObj = document.getElementById("JobsGrid").ej2_instances[0];

        if (args.commandColumn.type == "Edit") {
            isEditingJobs = true;
            let params = args.rowData;
            curJobsEditRow = params;

            toggleAreaFormBtn('jobsForm', false);

            setTimeout(function () {
                $('#submitJobBtn').val('Update Job');
                toggleAreaFormBtn('jobsForm', true);
            }, 200);

            FillFormByObject(params, $('#jobsForm'));
        }
        else if (args.commandColumn.type == "Copy") {
            this.copy(false);
        }

        setTimeout(function () { gridObj.hideSpinner() }, 200);
    }
    function jobActionComplete(args) {
        let gridObj = document.getElementById("JobsGrid").ej2_instances[0];
        setTimeout(function () { gridObj.hideSpinner() }, 200)
    }
    function jobActionBegin(args) {
        if (args.requestType == "delete") {
            let gridObj = document.getElementById("JobsGrid").ej2_instances[0];
            Swal.showLoading();

            let formData = new FormData();
            formData.append("jobs", JSON.stringify(args.data));
            let xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
            formData.append("__RequestVerificationToken", xhrToken);

            $.ajax({
                url: '?handler=Job',
                async: true,
                type: "DELETE",
                data: formData,
                contentType: false,
                processData: false,
                success: function (data) {
                    gridObj.hideSpinner();
                    swal.fire("Success", "Job(s) has successfully been deleted", "success");

                    if ($('#jobsForm').css('display') !== 'none') {
                        $('#jobsForm').slideUp();
                    }
                },
                error: function (err) {
                    gridObj.hideSpinner();
                    swal.fire("Failed", "Job(s) couldn't be deleted, please fix all errors and try again.", "error");

                    console.log(err);
                }
            });
            setTimeout(function () { gridObj.hideSpinner() }, 200);
        }
    }
</script>

