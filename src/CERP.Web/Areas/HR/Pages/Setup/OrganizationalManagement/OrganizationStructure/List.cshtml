@page "/HR/OrganizationStructure/OrganizationStructures"
@using CERP.Localization;
@using Microsoft.AspNetCore.Mvc.Localization;
@using CERP.App;
@using CERP;
@using CERP.HR.Setup.OrganizationalManagement.OrganizationStructure;
@inject IHtmlLocalizer<CERPResource> L
@inject Volo.Abp.Json.IJsonSerializer JsonSerializer
@using CERP.App.Helpers;

@model CERP.Web.Areas.HR.Setup.OrganizationalManagement.OrganizationStructure.Pages.OrganizationStructures.ListModel
@{
    ViewData["IsEditing"] = false;
    bool IsEditing = (bool)ViewData["IsEditing"];

    ViewData["Title"] = L["OrganizationStructures"].Name;
    ViewData["IconClass"] = "far fa-building";
    ViewData["HeaderTitle"] = L["OrganizationStructures"].Name.ToUpper();
    ViewData["SubTitle"] = $"{L["ListOf"]} {L["OrganizationStructures"]}";
    ViewData["Area"] = "Setup";

    ViewData["IsList"] = false;
    ViewData["IsCreate"] = false;
    string cNT = $"{L["Add"].Name} {L["OrganizationStructure"].Name}";
    ViewData["CreateNewText"] = cNT;
    ViewData["CreateNewLink"] = "/OrganizationStructures/OrganizationStructure";

    string TabPlaceholder = (bool)ViewData["IsEditing"] ? L["Area"].Name : L["Step"].Name;

    var alertanimation = new Syncfusion.EJ2.Popups.DialogAnimationSettings { Effect = Syncfusion.EJ2.Popups.DialogEffect.None };

    var initialToolBar = new List<object>() { new { text = "Show Actions", tooltipText = "Actions", prefixIcon = "e-custom-show-actions", id = "showActions" }, "Search", "ColumnChooser" };
    var fullToolBar = new List<object>() { new { text = "Hide Actions", tooltipText = "Actions", prefixIcon = "e-custom-hide-actions", id = "hideActions" }, new { text = "Toggle Grouping", tooltipText = "Grouping", prefixIcon = "zmdi-chevron-up", id = "toggleGrouping" }, new { text = "Audit Trail", tooltipText = "View Audit Trail", prefixIcon = "e-toggleaudittrail", id = "toggleaudittrail" }, new { text = "Toggle Detailed", tooltipText = "Toggle Detailed", prefixIcon = "e-toggledetailed", id = "toggleDetailed" }, "ExcelExport", "CsvExport", "Print", "Search", new { text = "Copy", tooltipText = "Copy", prefixIcon = "e-copy", id = "copy" }, new { text = "Copy With Header", tooltipText = "Copy With Header", prefixIcon = "e-copy", id = "copyHeader" }, "ColumnChooser" };

    List<object> organizationStructuresCommands = new List<object>();
    organizationStructuresCommands.Add(new { type = "Edit", buttonOption = new { iconCss = "e-icons e-edit", cssClass = "e-flat" } });
    organizationStructuresCommands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "e-flat" } });
    organizationStructuresCommands.Add(new { type = "Cancel", buttonOption = new { iconCss = "e-icons e-cancel-icon", cssClass = "e-flat" } });

    @*var positionEdit = new {@@params = new Syncfusion.EJ2.DropDowns.DropDownList() { CssClass = "moduleTypeDropDown", BeforeOpen = "loadPositionStatusesDropdown", DataSource = positionStatusesDescs, Query = "new ej.data.Query()", AllowFiltering = true }};*@

    List<OS_PositionLevel> positionLevels = Enum.GetValues(typeof(OS_PositionLevel)).Cast<OS_PositionLevel>().ToList();

    List<OS_ReviewPeriod> reviewPeriods = Enum.GetValues(typeof(OS_ReviewPeriod)).Cast<OS_ReviewPeriod>().ToList();
}
@section styles {
    @if ((bool)ViewData["IsEditing"])
    {
        <link href="~/libs/smartwizard/dist/css/smart_wizard_theme_circles.min.css" rel="stylesheet" />
    }

    <style>
        .customContentArea {
            position: unset !important;
        }
    </style>
}
@section scripts {

    <script>
        let isEditingOrganizationStructures = false;
        let curOrganizationStructuresEditRow;

        let isEditingPositions = false;
        let curPositionsEditRow;

        let organizationStructures = [];
        let possibleSubOrganizationStructures = [];
        let positions = [];

        let positionJobs = [];
        let positionTasks = [];
        $(document).ready(function () {
            let options = {
                buttonWidth: '100%',
                includeSelectAllOption: true,
                enableFiltering: false,
                enableClickableOptGroups: true,
                includeResetOption: true,
                includeResetDivider: true,
                enableCollapsibleOptGroups: true
            };
            $('#depHeadId').multiselect(options);
            $('#subOrganizationStructuresField').multiselect(options);
            $('#reviewPeriod').multiselect(options);

            $('#positionJobs').multiselect(options);
            $('#positionTasks').multiselect(options);

            let gridObj = $("#OrganizationStructuresGrid")[0].ej2_instances[0];
            //let positionsGrid = $("#PositionsGrid")[0].ej2_instances[0];
            //let subDGrid = $("#SubOrganizationStructuresGrid")[0].ej2_instances[0];

            cERP.appServices.hR.organizationalManagement.organizationStructure.oS_JobTemplate.getList({}).done(function (data) {
                positionJobs = data.items;
                let dataMS = [];
                for (let i = 0; i < data.items.length; i++) {
                    let item = data.items[i];
                    dataMS.push({ label: `${item.code} - ${item.name}`, value: item.id, data: item });
                }
                $('#positionJobs').multiselect('dataprovider', dataMS);
            });
            cERP.appServices.hR.organizationalManagement.organizationStructure.oS_TaskTemplate.getList({}).done(function (data) {
                positionTasks = data.items;
                console.log(positionTasks);
                let dataMS = [];
                for (let i = 0; i < data.items.length; i++) {
                    let item = data.items[i];
                    dataMS.push({ label: `${item.code} - ${item.name}`, value: item.id, data: item });
                }
                $('#positionTasks').multiselect('dataprovider', dataMS);
            });

            gridObj.showSpinner();
            $('#organizationStructuresLoader').slideDown(100);
            cERP.appServices.hR.organizationalManagement.organizationStructure.oS_OrganizationStructureTemplate.getAllOrganizationStructureTemplates({}).done(function (data) {
                gridObj.hideSpinner();
                $('#organizationStructuresLoader').slideUp(100);

                organizationStructures = data;
                gridObj.dataSource = organizationStructures;
                setTimeout(function () { gridObj.hideSpinner() }, 200);

                possibleSubOrganizationStructures = rfdc()(organizationStructures);

                let dataMS = [];
                for (let i = 0; i < data.length; i++) {
                    let item = data[i];
                    dataMS.push({ label: `${item.code} - ${item.name}`, value: item.id, data: item });
                }
                $('#subOrganizationStructuresField').multiselect('dataprovider', dataMS);
                $('#subOrganizationStructuresField').change();
            });

            $('#addOrganizationStructuresBtn').on('click', function () {
                isEditingOrganizationStructures = false;

                $('#submitOrganizationStructureBtn').val('Create Organization Structure');
            });

            $('#submitOrganizationStructureBtn').on('click', function (e) {
                e.preventDefault();
                if (ValidateForm('organizationStructureSpecificForm')) {
                    gridObj.showSpinner();
                    Swal.showLoading();

                    let form = [];
                    let organizationStructureDetails = $('#organizationStructureSpecificForm').find("textarea, input, select").serializeArray();
                    form = form.concat(organizationStructureDetails);

                    let params = objectifyForm(form);

                    let id = 0;
                    if (gridObj.dataSource.length > 0)
                        id = gridObj.dataSource[gridObj.dataSource.length - 1].id;

                    params.isEditing = isEditingOrganizationStructures;

                    if (isEditingOrganizationStructures) {
                        params.id = curOrganizationStructuresEditRow.id;

                        //cERP.appServices.hR.leaveRequestTemplates.update()
                    }
                    else {

                        //cERP.appServices.hR.leaveRequestTemplates.update()
                    }

                    //let selectedPositions = $('#positionIds').val();
                    //console.log(selectedPositions);
                    //let selectedPositionTemplates = [];
                    params.positionTemplates = positionsGrid.dataSource;
                    //for (var i = 0; i < selectedPositions.length; i++) {
                    //    selectedPositionTemplates.push(positions.filter(x => x.id == selectedPositions[i])[0]);
                    //    params.positionTemplates.push(selectedPositionTemplates[i]);
                    //}

                    //let selectedDepHead = $('#depHeadId').val();
                    //let selectedDepHeadTemplate = selectedPositionTemplates.push(positions.filter(x => x.id == selectedDepHead)[0]);
                    //params.organizationStructureHead = { positionTemplate: selectedDepHeadTemplate };

                    //params.subOrganizationStructureTemplates = subDGrid.dataSource;

                    let formData = new FormData();
                    formData.append("info", JSON.stringify(params));
                    let xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
                    formData.append("__RequestVerificationToken", xhrToken);
                    console.log(params);

                    $.ajax({
                        url: "?handler=OrganizationStructureTemplate",
                        async: true,
                        type: "POST",
                        data: formData,
                        contentType: false,
                        processData: false,
                        success: function (data) {
                            Swal.hideLoading();
                            console.log(data);
                            if (isEditingOrganizationStructures) {
                                gridObj.refresh(); // refresh the Grid.

                                swal.fire("Success", "Organization Structure has successfully been updated", "success");

                                for (let i = 0; i < gridObj.dataSource.length; i++) {
                                    if (gridObj.dataSource[i].id == data.id) {
                                        gridObj.dataSource[i] = data;
                                    }
                                }
                                gridObj.refresh();
                            }
                            else {
                                gridObj.dataSource.push(data);

                                gridObj.refresh(); // refresh the Grid.

                                swal.fire("Success", "Organization Structure has successfully been added", "success");
                            }
                            gridObj.hideSpinner();
                        },
                        error: function (err) {
                            Swal.hideLoading();
                            console.log(err);
                            let errMsg = typeof err !== 'undefined' ? err.responseJSON.Message : '';
                            if (isEditingOrganizationStructures)
                                swal.fire("Failed", errMsg + " \nOrganization Structure couldn't be updated, please fix all errors and try again.", "error");
                            else
                                swal.fire("Failed", errMsg + " \nOrganization Structure couldn't be added, please fix all errors and try again.", "error");

                            console.log(err);
                            gridObj.hideSpinner();
                        }
                    });
                }
                else {
                    Swal.close();
                    Swal.hideLoading();
                }
            });
        });
    </script>
}
<partial name="_DefaultPageHeader" />
<div class="site-content customContentArea">
    <div class="control-section">
        <div class="areaHeader" style="display:flex;">
            <div id="organizationStructuresLoader" class="pull-left loader-inline" style="display:none"></div>
            <div class="areaHeaderTitle">
                <span id="areHeadertitle" class="areaHeaderTitleNode menu-text">Current Organization Structures</span>
                @*<span id="" class="areaHeaderTitleInNode menu-text"> > </span>*@
                @*<span id="subTitle" class="menu-text" style="padding-left:15px; font-size: 28px; font-family:Roboto; font-weight:200;">@ViewData["SubTitle"]</span>*@
            </div>
            @*<h3 class="control-label" style="flex-grow: 1; margin:0">Approval Route</h3>*@
            <div class="pull-right text-right p-r-20 areaHeaderBtnSec">
                @*<div class="clearfix margin-15"></div>*@
                <a id="addOrganizationStructuresBtn" onclick="areaHeaderBtnClick(event); isEditingOrganizationStructures = false;" class="btn btn-outline-dark areaHeaderBtn"><i class="fa fa-plus fa-fw"></i> Add New</a>
            </div>
        </div>
        <form id="organizationStructuresForm" onkeydown="return event.key != 'Enter';" class="row areaForm" method="post" data-toggle="validator" style="display: none; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
            <ejs-accordion id="organizationStructureFormAccordion">
                <e-accordion-accordionitems>
                    <e-accordion-accordionitem expanded="true" header="General Details" content="#generalFieldsInfo"></e-accordion-accordionitem>
                    <e-accordion-accordionitem header="Structure Details" content="#structureInfo"></e-accordion-accordionitem>
                </e-accordion-accordionitems>
            </ejs-accordion>

            <div id="generalFieldsInfo" style="display:none">
                <div id="organizationStructureSpecificForm">
                    <div class="row">
                        <div class="col-lg-3 col-md-3 col-sm-3 col-12">
                            <div class="form-group">
                                <label class="margin-bottom-5 control-label">Organization Structure Code:</label>
                                <input type="text" id="organizationStructureCode" name="Code" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" required>
                            </div>
                        </div>
                        <div class="col-lg-3 col-md-3 col-sm-3 col-12">
                            <div class="col-sm-6" style="padding:0">
                                <div class="form-group">
                                    <label class="control-label m-b-5 ">Title:</label>
                                    <input type="text" id="organizationStructureTitle" name="Name" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control " required>
                                </div>
                            </div>
                            <div class="col-sm-6" style="padding:0">
                                <div class="form-group">
                                    <label class="control-label m-b-5 ">Title (In Arabic):</label>
                                    <input type="text" id="organizationStructureTitleLocalized" name="NameLocalized" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                </div>
                            </div>
                        </div>
                        @*<div class="col-lg-3 col-md-3 col-sm-3 col-12">
                        <div class="form-group">
                            <label class="margin-bottom-5 control-label">OrganizationStructure Head:</label>
                            <select id="depHeadId" name="OrganizationStructureHeadId" class="form-control">
                            </select>
                        </div>
                    </div>*@
                        <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                            <div class="col-sm-6" style="padding:0">
                                <div class="form-group">
                                    <label class="control-label m-b-5 ">Valid From:</label>
                                    <input type="date" id="validityFromDate" name="ValidityFromDate" class="text-left form-control inline pull-left" required>
                                </div>
                            </div>
                            <div class="col-sm-6" style="padding:0">
                                <div class="form-group">
                                    <label class="control-label m-b-5 ">Valid To:</label>
                                    <input type="date" id="validityToDate" name="ValidityToDate" class="text-left form-control inline pull-left" required>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                            <div class="form-group">
                                <label class="margin-bottom-5 control-label">Cost Center:</label>
                                <select id="costCenterId" name="CostCenterId" class="form-control">
                                    @*@for (int i = 0; i < costCenters.Count; i++)
                                {
                                    <option value="@costCenters[i].Id" data-value="@costCenters[i].Value">@costCenters[i].Value</option>
                                }*@
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                            <div id="reviewPeriodTypeField" class="col-sm-12" style="padding:0">
                                <div class="form-group">
                                    <label class="margin-bottom-5 control-label">Review Period:</label>
                                    <select id="reviewPeriod" name="ReviewPeriod" onchange="
                                                if (typeof $('option:selected', '#reviewPeriod').attr('data-value') !== 'undefined' && $('option:selected', '#reviewPeriod').attr('data-value').includes('Day')) {
                                                    $('#reviewPeriodTypeField').removeClass('col-sm-12');
                                                    $('#reviewPeriodTypeField').addClass('col-sm-6');
                                                    setTimeout(function () {
                                                        $('#reviewPeriodDaysField').slideDown(0);
                                                    }, 520);
                                                } else {
                                                    $('#reviewPeriodDaysField').slideUp(0);
                                                    $('#reviewPeriodTypeField').removeClass('col-sm-6');
                                                    $('#reviewPeriodTypeField').addClass('col-sm-12');
                                                }
                                            " class="form-control" required>
                                        @for (int i = 0; i < reviewPeriods.Count; i++)
                                        {
                                            <option value="@((int)reviewPeriods[i])" data-value="@EnumExtensions.GetDescription(reviewPeriods[i])">@EnumExtensions.GetDescription(reviewPeriods[i])</option>
                                        }
                                    </select>
                                </div>
                            </div>
                            <div id="reviewPeriodDaysField" class="col-sm-6" style="display:none; padding:0">
                                <div class="form-group">
                                    <label class="margin-bottom-5 control-label">Period Days:</label>
                                    <input type="number" min="0" id="reviewPeriodDays" name="ReviewPeriodDays" value="0" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div id="structureInfo" style="display:none">
                @{
                    var dict = new Dictionary<string, object>();
                    dict.Add("number", true);
                    dict.Add("min", 0);
                    var editparams = new { @@params = new { format = "n" } };
                }
                <ejs-treegrid id="StructureTreeGrid" height="400" childMapping="Children" 
                              treeColumnIndex="1" gridLines="Both" allowRowDragAndDrop="true" 
                              toolbar="@(new List<string>() { "Add", "Delete", "Update", "Cancel" })">
                    <e-treegrid-editsettings allowAdding="true" allowEditing="true" allowDeleting="true" newRowPosition="Below"></e-treegrid-editsettings>
                    <e-treegrid-columns>
                        <e-treegrid-column field="id" headerText="" visible="true" isPrimaryKey="true" textAlign="Center"></e-treegrid-column>
                        <e-treegrid-column field="name" headerText="Name" validationRules="@(new { required=true, number=false})" editType="stringedit" textAlign="Center"></e-treegrid-column>
                        <e-treegrid-column field="nameLocalized" allowEditing="true" headerText="Local Name" validationRules="@(new { required=true, number=false})" editType="stringedit" textAlign="Center"></e-treegrid-column>
                        <e-treegrid-column field="type" headerText="Type" allowEditing="true" textAlign="Center"></e-treegrid-column>
                        <e-treegrid-column field="validityStartDate" allowEditing="true" headerText="Start Date" validationRules="@(new { date=true})" editType="datepickeredit" textAlign="Center" format="yMd" type="date"></e-treegrid-column>
                        <e-treegrid-column field="validityEndDate" allowEditing="true" headerText="End Date" validationRules="@(dict)" editType="datepickeredit" format="yMd" type="date" textAlign="Center" edit="editparams"></e-treegrid-column>
                    </e-treegrid-columns>
                </ejs-treegrid>
            </div>

            <div class="row m-t-20">
                <div class="col-lg-12">
                    <input id="submitOrganizationStructureBtn" type="button" class="btn btn-success btn-block" value="Create Organization Structure" required />
                </div>
            </div>
        </form>
        <div id="organizationStructuresCS" class="control-section">
            <ejs-grid id="OrganizationStructuresGrid" enableAutoFill="true" dataBound="dataBoundResponsive" commandClick="commandClick"
                      showColumnChooser="true" allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true"
                      hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true" actionBegin="organizationStructureActionBegin" actionComplete="organizationStructureActionComplete"
                      allowSorting="true" allowMultiSorting="true" gridLines="Both" allowTextWrap="true" textWrapSettings="@(new Syncfusion.EJ2.Grids.GridTextWrapSettings() { WrapMode = Syncfusion.EJ2.Grids.WrapMode.Header })"
                      toolbarClick="toolbarClick" toolbar="@initialToolBar"
                      allowPaging="true" allowResizing="true" dataSource="new List<dynamic>()">

                <e-grid-columns>
                    <e-grid-column field="id" headerText="Id" textAlign="Center" visible="false" isPrimaryKey="true" showInColumnChooser="false"></e-grid-column>
                    <e-grid-column headerText="Name" textAlign="Center" columns='new List<Syncfusion.EJ2.Grids.GridColumn>() {
                        new Syncfusion.EJ2.Grids.GridColumn() { Field= "name", HeaderText = "English", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center },
                        new Syncfusion.EJ2.Grids.GridColumn() { Field= "nameLocalized", HeaderText = "Local", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center }
                    }'></e-grid-column>
                    <e-grid-column field="getOrganizationStructureStructureString" headerText="Structure" textAlign="Center"></e-grid-column>
                    <e-grid-column field="code" headerText="Code" textAlign="Center"></e-grid-column>
                    <e-grid-column field="getOrganizationStructurePositionsString" headerText="Positions" textAlign="Center"></e-grid-column>
                    @*<e-grid-column field="organizationStructureHead.name" headerText="Head" textAlign="Center"></e-grid-column>*@
                    <e-grid-column field="costCenter.value" headerText="Cost Center" textAlign="Center"></e-grid-column>
                    <e-grid-column field="reviewPeriodDescription" headerText="Review period" textAlign="Center"></e-grid-column>
                    <e-grid-column headerText="Validity" textAlign="Center" columns='new List<Syncfusion.EJ2.Grids.GridColumn>() {
                        new Syncfusion.EJ2.Grids.GridColumn() { Field= "validityFromDate", Type="date", Format="E, MMMM d, y", AllowEditing=true, EditType="datepicker", HeaderText = "From", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center },
                        new Syncfusion.EJ2.Grids.GridColumn() { Field= "validityToDate", Type="date", Format="E, MMMM d, y", AllowEditing=true, EditType="datepicker", HeaderText = "To", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center }
                    }'></e-grid-column>

                    <e-grid-column headerText="Actions" textAlign="Center" commands="organizationStructuresCommands"></e-grid-column>
                </e-grid-columns>

                <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="false"></e-grid-editSettings>
                <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
            </ejs-grid>
        </div>
        <div id="auditTrail" style="display:none;">
            <partial name="_DataAuditTrailPartialView" model="@Model.GetDataAuditTrailModel()" />
        </div>
    </div>

</div>
<ejs-dialog id="alert_dialog" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy with Header" content="Atleast one row should be selected to copy with header">
    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
    </e-dialog-buttons>
</ejs-dialog>
<ejs-dialog id="alert_dialog_1" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy" content="Atleast one row should be selected to copy">
    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
    </e-dialog-buttons>
</ejs-dialog>

<script>
    function loadPositionStatusesDropdown() {

    }

    let isAuditTrail = false;
    function alertBtnClick() {
        let dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
        let dialogObj1 = document.getElementById('alert_dialog_1').ej2_instances[0];
        dialogObj.hide();
        dialogObj1.hide();
    }

    function toolbarClick(args) {
        let gridObj = document.getElementById("OrganizationStructuresGrid").ej2_instances[0];

        if (args.item.id === 'OrganizationStructuresGrid_pdfexport') {
            gridObj.pdfExport();
        }
        if (args.item.id === 'OrganizationStructuresGrid_excelexport') {
            gridObj.excelExport();
        }
        if (args.item.id === 'OrganizationStructuresGrid_csvexport') {
            gridObj.csvExport();
        }
        if (this.getSelectedRecords().length > 0) {
            let withHeader = false;
            if (args.item.id === 'copyHeader') {
                withHeader = true;
            }
            this.copy(withHeader);
        }
        else {
            if (args.item.id === 'copyHeader') {
                let dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                dialogObj.show();
            }
            else if (args.item.id === 'copy') {
                let dialogObj = document.getElementById('alert_dialog_1').ej2_instances[0];
                dialogObj.show();
            }
        }
        if (args.item.id === 'showActions') {
            gridObj.toolbar = [{ text: "Hide Actions", tooltipText: "Actions", prefixIcon: "e-custom-hide-actions", id: "hideActions" }, { text: "Toggle Grouping", tooltipText: "Grouping", prefixIcon: "e-custom-group-toggle", id: "toggleGrouping" }, { text: "Audit Trail", tooltipText: "View Audit Trail", prefixIcon: "e-custom-audit-trail", id: "toggleaudittrail" },  { text: "Toggle Detailed", tooltipText: "Toggle Detailed", prefixIcon: "e-toggledetailed", id: "toggleDetailed" }, "ExcelExport", "PdfExport", "CsvExport", "Print", "Search", { text: "Copy", tooltipText: "Copy", prefixIcon: "e-copy", id: "copy" }, { text: "Copy With Header", tooltipText: "Copy With Header", prefixIcon: "e-copy", id: "copyHeader" }, "ColumnChooser"];
            gridObj.refresh();
        }
        if (args.item.id === 'hideActions') {
            gridObj.toolbar = [{ text: "Show Actions", tooltipText: "Actions", prefixIcon: "e-custom-show-actions", id: "showActions" }, "Search", "ColumnChooser"];
            gridObj.showColumnChooser = true;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleGrouping') {
            gridObj.allowGrouping = !gridObj.allowGrouping;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleDetailed') {
            let visCount = 0;
            for (let i = 0; i < gridObj.columns.length; i++) {
                if (gridObj.columns[i].visible) visCount++;
            }
            if (visCount == gridObj.columns.length) {
                for (let i = 0; i < gridObj.columns.length; i++) {
                    let col = gridObj.columns[i];
                    if (typeof col.customAttributes != 'undefined' && typeof col.customAttributes.id != 'undefined' && col.customAttributes.id == 'detailed')
                        gridObj.showHider.hide(col.headerText, 'headerText');
                    else if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
            else {
                for (let i = 0; i < gridObj.columns.length; i++) {
                    let col = gridObj.columns[i];
                    if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
        }
        if (args.item.id === 'toggleaudittrail') {

            if (!isAuditTrail) {
                var agtGrid = $("#AuditTrailGrid")[0].ej2_instances[0];
                gridObj.showSpinner();

                $.ajax({
                    url: '?handler=DataAuditTrail',
                    async: true,
                    type: "GET",
                    data: {},
                    success: function (data) {
                        gridObj.hideSpinner();

                        //agtGrid.childGrid.childGrid.dataSource = data.tertiaryDS;
                        //agtGrid.childGrid.dataSource = data.secondaryDS;
                        agtGrid.dataSource = data.ds;
                        agtGrid.refresh();

                        $(".customContentArea").css('position', 'unset');
                        $("#auditTrail").slideDown(200);
                    },
                    error: function (data) {
                        gridObj.hideSpinner();

                        $(".customContentArea").css('position', 'absolute');
                        $("#auditTrail").slideUp(200);

                        swal.fire('Failed', `An error occured while generating the audit trail`, 'error');
                    }
                });

            }
            else {
                $(".customContentArea").css('position', 'absolute');
                $("#auditTrail").slideUp(200);
            }

            isAuditTrail = !isAuditTrail;
        }
        setTimeout(function () { gridObj.hideSpinner() }, 200);
    }
    function commandClick(args) {
        let gridObj = document.getElementById("OrganizationStructuresGrid").ej2_instances[0];

        if (args.commandColumn.type == "Edit") {
            isEditingOrganizationStructures = true;
            let params = args.rowData;
            curOrganizationStructuresEditRow = params;

            toggleAreaFormBtn('organizationStructuresForm', false);

            setTimeout(function () {
                $('#submitOrganizationStructureBtn').val('Update Organization Structure');
                toggleAreaFormBtn('organizationStructuresForm', true);
            }, 200);

            FillFormByObject(params, $('#organizationStructuresForm'));

            let subOrganizationStructuresGrid = $("#SubOrganizationStructuresGrid")[0].ej2_instances[0];
            let positionsGrid = $("#PositionsGrid")[0].ej2_instances[0];

            $('#organizationStructuresLoader').slideDown();
            $('#positionIds').multiselect('deselectAll', false);
            $('#positionIds').multiselect('updateButtonText');

            $('#depHeadId').multiselect('deselectAll', false);
            $('#depHeadId').multiselect('updateButtonText');
            cERP.appServices.hR.organizationalManagement.organizationStructure.oS_OrganizationStructureTemplate.getOrganizationStructureTemplate(params.id).done(function (data) {
                console.log(data);
                $('#organizationStructuresLoader').slideUp();
                curOrganizationStructuresEditRow = data;

                possibleSubOrganizationStructures = rfdc()(organizationStructures.filter(function (x) { return x.id != data.id }));

                let dataMS = [];
                for (let i = 0; i < possibleSubOrganizationStructures.length; i++) {
                    let item = possibleSubOrganizationStructures[i];
                    dataMS.push({ label: `${item.code} - ${item.name}`, value: item.id, data: item });
                }
                $('#subOrganizationStructuresField').multiselect('dataprovider', dataMS);
                $('#subOrganizationStructuresField').change();

                for (var i = 0; i < data.positionTemplates.length; i++) {
                    let posTemplate = data.positionTemplates[i];
                    cERP.appServices.setup.lookup.dictionaryValue.get(data.costCenterId).done(function (d) {
                        posTemplate.costCenter = d;
                        positionsGrid.refresh();
                    });
                }

                positionsGrid.dataSource = data.positionTemplates;
                positionsGrid.refresh();
                setTimeout(function () { positionsGrid.hideSpinner() }, 200);

                subOrganizationStructuresGrid.dataSource = data.subOrganizationStructureTemplates;
                subOrganizationStructuresGrid.refresh();
                setTimeout(function () { subOrganizationStructuresGrid.hideSpinner() }, 200);

                //let positionIds = [];
                //for (var i = 0; i < data.positionTemplates.length; i++) {
                //    positionIds.push(data.positionTemplates[i].id);
                //}
                //$('#depHeadId').multiselect('select', data.organizationStructureHeadId);
            });
        }
        else if (args.commandColumn.type == "Copy") {
            this.copy(false);
        }

        setTimeout(function () { gridObj.hideSpinner() }, 200);
    }
    function organizationStructureActionComplete(args) {
        let gridObj = document.getElementById("OrganizationStructuresGrid").ej2_instances[0];
        setTimeout(function () { gridObj.hideSpinner() }, 200)
    }
    function organizationStructureActionBegin(args) {
        if (args.requestType == "delete") {
            let gridObj = document.getElementById("OrganizationStructuresGrid").ej2_instances[0];
            Swal.showLoading();

            let formData = new FormData();
            formData.append("organizationStructures", JSON.stringify(args.data));
            let xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
            formData.append("__RequestVerificationToken", xhrToken);

            $.ajax({
                url: '?handler=OrganizationStructureTemplate',
                async: true,
                type: "DELETE",
                data: formData,
                contentType: false,
                processData: false,
                success: function (data) {
                    gridObj.refresh();
                    setTimeout(function () { gridObj.hideSpinner() }, 200);
                    swal.fire("Success", "Organization Structure(s) has successfully been deleted", "success");

                    if ($('#organizationStructuresForm').css('display') !== 'none') {
                        $('#organizationStructuresForm').slideUp();
                    }
                },
                error: function (err) {
                    gridObj.refresh();
                    setTimeout(function () { gridObj.hideSpinner() }, 200);
                    swal.fire("Failed", "Organization Structure(s) couldn't be deleted, please fix all errors and try again.", "error");

                    console.log(err);
                }
            });
            //gridObj.refresh();
            //setTimeout(function () { gridObj.hideSpinner() }, 200);

            return true;
        }
    }
</script>

