@page "/HR/OrganizationStructure/OrganizationStructures"
@using CERP.Localization;
@using Microsoft.AspNetCore.Mvc.Localization;
@using CERP.App;
@using CERP;
@using CERP.HR.Setup.OrganizationalManagement.OrganizationStructure;
@inject IHtmlLocalizer<CERPResource> L
@inject Volo.Abp.Json.IJsonSerializer JsonSerializer
@using CERP.App.Helpers;
@using Syncfusion.EJ2.Navigations;
@using Syncfusion.EJ2;

@model CERP.Web.Areas.HR.Setup.OrganizationalManagement.OrganizationStructure.Pages.OrganizationStructures.ListModel
@{
    ViewData["IsEditing"] = false;
    bool IsEditing = (bool)ViewData["IsEditing"];

    ViewData["Title"] = L["OrganizationStructures"].Value;
    ViewData["IconClass"] = "far fa-building";
    ViewData["HeaderTitle"] = L["OrganizationStructures"].Value.ToUpper();
    ViewData["SubTitle"] = $"{L["ListOf"]} {L["OrganizationStructures"]}";
    ViewData["Area"] = "Setup";

    ViewData["IsList"] = false;
    ViewData["IsCreate"] = false;
    string cNT = $"{L["Add"].Value} {L["OrganizationStructure"].Value}";
    ViewData["CreateNewText"] = cNT;
    ViewData["CreateNewLink"] = "/OrganizationStructures/OrganizationStructure";

    string TabPlaceholder = (bool)ViewData["IsEditing"] ? L["Area"].Value : L["Step"].Value;

    var alertanimation = new Syncfusion.EJ2.Popups.DialogAnimationSettings { Effect = Syncfusion.EJ2.Popups.DialogEffect.None };

    var initialToolBar = new List<object>() { new { text = "Show Actions", tooltipText = "Actions", prefixIcon = "e-custom-show-actions", id = "showActions" }, "Search", "ColumnChooser" };
    var initialStructureToolBar = new List<object>() { new { text = "Show Actions", tooltipText = "Actions", prefixIcon = "e-custom-show-actions", id = "showActions" }, "Search", "ColumnChooser" };
    var fullToolBar = new List<object>() { new { text = "Hide Actions", tooltipText = "Actions", prefixIcon = "e-custom-hide-actions", id = "hideActions" }, new { text = "Toggle Grouping", tooltipText = "Grouping", prefixIcon = "zmdi-chevron-up", id = "toggleGrouping" }, new { text = "Audit Trail", tooltipText = "View Audit Trail", prefixIcon = "e-toggleaudittrail", id = "toggleaudittrail" }, new { text = "Toggle Detailed", tooltipText = "Toggle Detailed", prefixIcon = "e-toggledetailed", id = "toggleDetailed" }, new { text = "ExcelExport", tooltipText = "Excel Export", prefixIcon = "e-excelexport", id = "excelexport", align = "Right" }, "CsvExport", "Print", "Search", new { text = "Copy", tooltipText = "Copy", prefixIcon = "e-copy", id = "copy" }, new { text = "Copy With Header", tooltipText = "Copy With Header", prefixIcon = "e-copy", id = "copyHeader" }, "ColumnChooser" };

    List<object> osTreeCommands = new List<object>();
    osTreeCommands.Add(new { type = "Edit", buttonOption = new { iconCss = "e-icons e-edit", cssClass = "e-flat" } });
    osTreeCommands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "e-flat" } });
    osTreeCommands.Add(new { type = "Cancel", buttonOption = new { iconCss = "e-icons e-cancel-icon", cssClass = "e-flat" } });

    List<object> organizationStructuresCommands = new List<object>();
    organizationStructuresCommands.Add(new { type = "Edit", buttonOption = new { iconCss = "e-icons e-edit", cssClass = "e-flat" } });
    organizationStructuresCommands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "e-flat" } });
    organizationStructuresCommands.Add(new { type = "Cancel", buttonOption = new { iconCss = "e-icons e-cancel-icon", cssClass = "e-flat" } });


    List<OS_PositionLevel> positionLevels = Enum.GetValues(typeof(OS_PositionLevel)).Cast<OS_PositionLevel>().ToList();

    List<OS_ReviewPeriod> reviewPeriods = Enum.GetValues(typeof(OS_ReviewPeriod)).Cast<OS_ReviewPeriod>().ToList();

    //var order = TreeData.GetDefaultData();

    List<object> referenceCommands = new List<object>();
    referenceCommands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "e-flat" } });
    List<object> posJobCommands = new List<object>();
    posJobCommands.Add(new { type = "Edit", buttonOption = new { iconCss = "e-icons e-edit", cssClass = "e-flat" } });
    posJobCommands.Add(new { type = "Cancel", buttonOption = new { iconCss = "e-icons e-cancel-icon", cssClass = "e-flat" } });
}
@section styles {
    @if ((bool)ViewData["IsEditing"])
    {
        <link href="~/libs/smartwizard/dist/css/smart_wizard_theme_circles.min.css" rel="stylesheet" />
    }

    <style>
        .customContentArea {
            position: unset !important;
        }
        .orgchart {
            min-height: 100%;
            min-width: 100%;
        }

            .orgchart table {
                background-color: transparent !important;
            }
    </style>
}
@section scripts {

    <script>
        let isEditingOrganizationStructures = false;
        let curOrganizationStructuresEditRow;

        let isEditingPositions = false;
        let curPositionsEditRow;

        let isEditingPositionJob = true;
        let curPosJobEditRow;

        let isEditingUnit = false;
        let curUnitEditRow;

        let departments = [];
        let positions = [];

        let positionTypes = [];
        let positionStatuses = [];
        let posJobLevels = [];
        let posJobEmployeeClasses = [];
        let posJobContractTypes = [];

        let paygrades = [];
        let businessUnits = [];
        let divisions = [];
        let legalEntities = [];

        let buCostCenters = [];
        let buPositions = [];
        let divCostCenters = [];
        let divPositions = [];
        let depCostCenters = [];
        let depPositions = [];

        let buCostCentersGrid;
        let divCostCentersGrid;
        let depCostCentersGrid;
        function populateCostCenterTemplates() {
            try {
                buCostCenters = buCostCenters.filter(function (y) {
                    return buCostCentersGrid.dataSource.filter(function (x) { return x.id == y.id }).length == 0
                });
                divCostCenters = divCostCenters.filter(function (y) {
                    return divCostCentersGrid.dataSource.filter(function (x) { return x.id == y.id }).length == 0
                });
                depCostCenters = depCostCenters.filter(function (y) {
                    return depCostCentersGrid.dataSource.filter(function (x) { return x.id == y.id }).length == 0
                });
            } catch (e) {

            }

            let dataMS = [];
            for (let i = 0; i < buCostCenters.length; i++) {
                let item = buCostCenters[i];
                dataMS.push({ label: `${item.key} - ${item.value}`, value: item.id, data: item });
            }
            $('#buCostCentersIds').multiselect('dataprovider', dataMS);

            dataMS = [];
            for (let i = 0; i < divCostCenters.length; i++) {
                let item = divCostCenters[i];
                dataMS.push({ label: `${item.key} - ${item.value}`, value: item.id, data: item });
            }
            $('#divCostCentersIds').multiselect('dataprovider', dataMS);

            dataMS = [];
            for (let i = 0; i < depCostCenters.length; i++) {
                let item = depCostCenters[i];
                dataMS.push({ label: `${item.key} - ${item.value}`, value: item.id, data: item });
            }
            $('#depCostCentersIds').multiselect('dataprovider', dataMS);
            console.log(dataMS);
        }
        function loadCostCenterTemplates() {
            $('#buCostCentersLoader').slideDown(100);
            $('#divCostCentersLoader').slideDown(100);
            $('#depCostCentersLoader').slideDown(100);
            cERP.appServices.setup.lookup.dictionaryValue.getAllByValueType(ValueTypeModules.costCenters).done(function (data) {
                $('#buCostCentersLoader').slideUp(100);
                $('#divCostCentersLoader').slideUp(100);
                $('#depCostCentersLoader').slideUp(100);
                divCostCenters = data;
                buCostCenters = data;
                depCostCenters = data;
                populateCostCenterTemplates();
            });
        }

        let buPositionsGrid;
        let divPositionsGrid;
        let depPositionsGrid;
        function populatePositionTemplates() {
            try {
                buPositions = buPositions.filter(function (y) {
                    return buPositionsGrid.dataSource.filter(function (x) { return x.id == y.id }).length == 0
                });
                divPositions = divPositions.filter(function (y) {
                    return divPositionsGrid.dataSource.filter(function (x) { return x.id == y.id }).length == 0
                });
                depPositions = depPositions.filter(function (y) {
                    return depPositionsGrid.dataSource.filter(function (x) { return x.id == y.id }).length == 0
                });
            } catch (e) {

            }
            let _dataMS = [];
            for (let i = 0; i < buPositionsGrid.dataSource.length; i++) {
                let item = buPositionsGrid.dataSource[i];
                _dataMS.push({ label: `${item.code} - ${item.name}`, value: item.id, data: item });
            }
            $('#buHead').multiselect('dataprovider', rfdc()(_dataMS));
            _dataMS = [];
            for (let i = 0; i < divPositionsGrid.dataSource.length; i++) {
                let item = divPositionsGrid.dataSource[i];
                _dataMS.push({ label: `${item.code} - ${item.name}`, value: item.id, data: item });
            }
            $('#divHead').multiselect('dataprovider', rfdc()(_dataMS));
            _dataMS = [];
            for (let i = 0; i < depPositionsGrid.dataSource.length; i++) {
                let item = depPositionsGrid.dataSource[i];
                _dataMS.push({ label: `${item.code} - ${item.name}`, value: item.id, data: item });
            }
            $('#depHead').multiselect('dataprovider', rfdc()(_dataMS));

            let dataMS = [];
            for (let i = 0; i < buPositions.length; i++) {
                let item = buPositions[i];
                dataMS.push({ label: `${item.code} - ${item.name}`, value: item.id, data: item });
            }
            $('#buPositionsIds').multiselect('dataprovider', rfdc()(dataMS));
            dataMS = [];
            for (let i = 0; i < divPositions.length; i++) {
                let item = divPositions[i];
                dataMS.push({ label: `${item.code} - ${item.name}`, value: item.id, data: item });
            }
            $('#divPositionsIds').multiselect('dataprovider', rfdc()(dataMS));
            dataMS = [];
            for (let i = 0; i < depPositions.length; i++) {
                let item = depPositions[i];
                dataMS.push({ label: `${item.code} - ${item.name}`, value: item.id, data: item });
            }
            $('#depPositionsIds').multiselect('dataprovider', rfdc()(dataMS));
        }
        function loadPositionTemplates() {
            $('#buPositionsLoader').slideDown(100);
            $('#divPositionsLoader').slideDown(100);
            $('#depPositionsLoader').slideDown(100);
            cERP.appServices.hR.organizationalManagement.organizationStructure.oS_PositionTemplate.getAllPositionTemplates().done(function (data) {
                $('#buPositionsLoader').slideUp(100);
                $('#divPositionsLoader').slideUp(100);
                $('#depPositionsLoader').slideUp(100);
                buPositions = data;
                divPositions = data;
                depPositions = data;
                populatePositionTemplates();
            });
        }

        let buLocations;
        let divLocations;
        function populateLocationTemplates() {
            //try {
            //    buLocations = buLocations.filter(function (y) {
            //        return buPositionsGrid.dataSource.filter(function (x) { return x.id == y.id }).length == 0
            //    });
            //    divLocations = divLocations.filter(function (y) {
            //        return divPositionsGrid.dataSource.filter(function (x) { return x.id == y.id }).length == 0
            //    });
            //} catch (e) {

            //}

            let dataMS = [];
            for (let i = 0; i < buLocations.length; i++) {
                let item = buLocations[i];
                dataMS.push({ label: `${item.location.locationCode} - ${item.location.locationName}`, value: item.location.id, data: item });
            }
            $('#buLocationsIds').multiselect('dataprovider', rfdc()(dataMS));
            $('#divLocationsIds').multiselect('dataprovider', rfdc()(dataMS));
            $('#depLocationsIds').multiselect('dataprovider', rfdc()(dataMS));
        }
        let curLegalEntity;
        function loadLocationTemplates() {
            console.log($('#structureLegalEntity').val());
            curLegalEntity = legalEntities.filter(function (x) { return x.id == $('#structureLegalEntity').val() })[0];
            console.log(curLegalEntity);
            cERP.appServices.setup.companySetup.company.getCompanyLocations(curLegalEntity.id).done(function (data) {
                buLocations = data;
                divLocations = data;

                populateLocationTemplates();
            });
        }

        let usedBusinessUnits = [];
        let usedDivisions = [];
        let usedDepartments = [];
        let posJobGrid;
        var $ocJs;
        $(document).ready(function () {
            $ocJs = $('#orgChartJs').orgchart({ data: [], nodeTitle: 'type', nodeContent: 'name'});
            let options = {
                buttonWidth: '100%',
                includeSelectAllOption: true,
                enableFiltering: false,
                enableClickableOptGroups: true,
                includeResetOption: true,
                includeResetDivider: true,
                enableCollapsibleOptGroups: true
            };
            $('#reviewPeriod').multiselect(options);
            $('#structureLegalEntity').multiselect(options);
            $('#buCostCentersIds').multiselect(options);
            $('#buPositionsIds').multiselect(options);
            $('#buLocationsIds').multiselect(options);
            $('#buHead').multiselect(options);

            $('#divCostCentersIds').multiselect(options);
            $('#divPositionsIds').multiselect(options);
            $('#divHead').multiselect(options);
            $('#divLocationsIds').multiselect(options);

            $('#depCostCentersIds').multiselect(options);
            $('#depPositionsIds').multiselect(options);
            $('#depHead').multiselect(options);
            $('#depLocationsIds').multiselect(options);

            //$('#posType').multiselect(options);
            //$('#posStatus').multiselect(options);
            $.each($('.paygroup'), function (i, x) { $(x).multiselect(options) });
            $.each($('.paygrade'), function (i, x) { $(x).multiselect(options) });

            let gridObj = $("#OrganizationStructuresGrid")[0].ej2_instances[0];
            let structureTGrid = $("#StructureTreeGrid")[0].ej2_instances[0];
            posJobGrid = $("#PositionJobsDetailsGrid")[0].ej2_instances[0];
            //let positionsGrid = $("#PositionsGrid")[0].ej2_instances[0];
            //let subDGrid = $("#SubOrganizationStructuresGrid")[0].ej2_instances[0];
            $('#addBUCostCenterBtn').on('click', function () {
                loadCostCenterTemplates();
            });
            buCostCentersGrid = $('#BUCostCenterReferenceGrid')[0].ej2_instances[0];
            $('#submitBUCostCenterBtn').on('click', function () {
                if (ValidateForm('buCostCentersForm')) {
                    let selectedCostCenters = $('#buCostCentersIds').val();
                    for (var i = 0; i < selectedCostCenters.length; i++) {
                        let _function = buCostCenters.filter(function (x) { return x.id == selectedCostCenters[i] })[0];
                        _function.percentage = parseInt($('#buCostCenterPercentage').val());

                        let curSum = 0;
                        for (var i = 0; i < buCostCentersGrid.dataSource.length; i++) {
                            curSum += buCostCentersGrid.dataSource[i].percentage;
                        }
                        console.log(curSum);
                        if (curSum + _function.percentage <= 100)
                            buCostCentersGrid.dataSource.push(_function);
                        else {
                            toastr.error(`Sum of all percentages exceed 100`);
                            buCostCentersGrid.hideSpinner();
                        }

                        buCostCentersGrid.refresh();
                    }
                    populateCostCenterTemplates();
                }
            });

            $('#addBUPositionBtn').on('click', function () {
                loadPositionTemplates();
            });
            buPositionsGrid = $('#BUPositionReferenceGrid')[0].ej2_instances[0];
            $('#submitBUPositionBtn').on('click', function () {
                if (ValidateForm('buPositionsForm')) {
                    let selectedPositions = $('#buPositionsIds').val();
                    for (var i = 0; i < selectedPositions.length; i++) {
                        let _function = buPositions.filter(function (x) { return x.id == selectedPositions[i] })[0];
                        //_function.percentage = parseInt($('#buPositionPercentage').val());

                        buPositionsGrid.dataSource.push(_function);
                        //let curSum = 0;
                        //for (var i = 0; i < buPositionsGrid.dataSource.length; i++) {
                        //    curSum += buPositionsGrid.dataSource[i].percentage;
                        //}
                        //console.log(curSum);
                        //if (curSum + _function.percentage <= 100)
                        //else {
                        //    toastr.error(`Sum of all percentages exceed 100`);
                        //    buPositionsGrid.hideSpinner();
                        //}

                        buPositionsGrid.refresh();
                    }
                    populatePositionTemplates();
                }
            });


            $('#addDIVCostCenterBtn').on('click', function () {
                loadCostCenterTemplates();
            });
            divCostCentersGrid = $('#DIVCostCenterReferenceGrid')[0].ej2_instances[0];
            $('#submitDIVCostCenterBtn').on('click', function () {
                if (ValidateForm('divCostCentersForm')) {
                    let selectedCostCenters = $('#divCostCentersIds').val();
                    for (var i = 0; i < selectedCostCenters.length; i++) {
                        let _function = divCostCenters.filter(function (x) { return x.id == selectedCostCenters[i] })[0];
                        _function.percentage = parseInt($('#divCostCenterPercentage').val());

                        let curSum = 0;
                        for (var i = 0; i < divCostCentersGrid.dataSource.length; i++) {
                            curSum += divCostCentersGrid.dataSource[i].percentage;
                        }
                        console.log(curSum);
                        if (curSum + _function.percentage <= 100)
                            divCostCentersGrid.dataSource.push(_function);
                        else {
                            toastr.error(`Sum of all percentages exceed 100`);
                            divCostCentersGrid.hideSpinner();
                        }

                        divCostCentersGrid.refresh();
                    }
                    populateCostCenterTemplates();
                }
            });

            $('#addDIVPositionBtn').on('click', function () {
                loadPositionTemplates();
            });
            divPositionsGrid = $('#DIVPositionReferenceGrid')[0].ej2_instances[0];
            $('#submitDIVPositionBtn').on('click', function () {
                if (ValidateForm('divPositionsForm')) {
                    let selectedPositions = $('#divPositionsIds').val();
                    for (var i = 0; i < selectedPositions.length; i++) {
                        let _function = divPositions.filter(function (x) { return x.id == selectedPositions[i] })[0];
                        //_function.percentage = parseInt($('#divPositionPercentage').val());
                        divPositionsGrid.dataSource.push(_function);
                        //let curSum = 0;
                        //for (var i = 0; i < divPositionsGrid.dataSource.length; i++) {
                        //    curSum += divPositionsGrid.dataSource[i].percentage;
                        //}
                        //console.log(curSum);
                        //if (curSum + _function.percentage <= 100)
                        //    
                        //else {
                        //    toastr.error(`Sum of all percentages exceed 100`);
                        //    divPositionsGrid.hideSpinner();
                        //}

                        divPositionsGrid.refresh();
                    }
                    populatePositionTemplates();
                }
            });


            $('#addDEPCostCenterBtn').on('click', function () {
                loadCostCenterTemplates();
            });
            depCostCentersGrid = $('#DEPCostCenterReferenceGrid')[0].ej2_instances[0];
            $('#submitDEPCostCenterBtn').on('click', function () {
                if (ValidateForm('depCostCentersForm')) {
                    let selectedCostCenters = $('#depCostCentersIds').val();
                    for (var i = 0; i < selectedCostCenters.length; i++) {
                        let _function = depCostCenters.filter(function (x) { return x.id == selectedCostCenters[i] })[0];
                        _function.percentage = parseInt($('#depCostCenterPercentage').val());

                        let curSum = 0;
                        for (var i = 0; i < depCostCentersGrid.dataSource.length; i++) {
                            curSum += depCostCentersGrid.dataSource[i].percentage;
                        }
                        console.log(curSum);
                        if (curSum + _function.percentage <= 100)
                            depCostCentersGrid.dataSource.push(_function);
                        else {
                            toastr.error(`Sum of all percentages exceed 100`);
                            depCostCentersGrid.hideSpinner();
                        }

                        depCostCentersGrid.refresh();
                    }
                    populateCostCenterTemplates();
                }
            });

            $('#addDEPPositionBtn').on('click', function () {
                loadPositionTemplates();
            });
            depPositionsGrid = $('#DEPPositionReferenceGrid')[0].ej2_instances[0];
            $('#submitDEPPositionBtn').on('click', function () {
                if (ValidateForm('depPositionsForm')) {
                    let selectedPositions = $('#depPositionsIds').val();
                    for (var i = 0; i < selectedPositions.length; i++) {
                        let _function = depPositions.filter(function (x) { return x.id == selectedPositions[i] })[0];
                        //_function.percentage = parseInt($('#depPositionPercentage').val());
                        depPositionsGrid.dataSource.push(_function);
                        //let curSum = 0;
                        //for (var i = 0; i < depPositionsGrid.dataSource.length; i++) {
                        //    curSum += depPositionsGrid.dataSource[i].percentage;
                        //}
                        //console.log(curSum);
                        //if (curSum + _function.percentage <= 100)
                        //    
                        //else {
                        //    toastr.error(`Sum of all percentages exceed 100`);
                        //    depPositionsGrid.hideSpinner();
                        //}

                    }
                    depPositionsGrid.refresh();
                    populatePositionTemplates();
                }
            });


            $('#structureLegalEntity').on('change', function () {
                loadLocationTemplates();
            });

            cERP.appServices.setup.companySetup.company.getAllCompanies().done(function (data) {
                legalEntities = data;
                let dataMS = [];
                for (let i = 0; i < legalEntities.length; i++) {
                    let item = legalEntities[i];
                    dataMS.push({ label: `${item.clientID} - ${item.companyName}`, value: item.id, data: item });
                }
                $('#structureLegalEntity').multiselect('dataprovider', rfdc()(dataMS));

                loadLocationTemplates();
            });
            cERP.appServices.hR.organizationalManagement.organizationStructure.oS_DepartmentTemplate.getAllDepartmentTemplates().done(function (data) {
                for (var i = 0; i < data.length; i++) {
                    data[i].unitType = "Department";
                }
                departments = data;
            });
            cERP.appServices.hR.organizationalManagement.organizationStructure.oS_PositionTemplate.getAllPositionTemplates().done(function (data) {
                for (var i = 0; i < data.length; i++) {
                    data[i].unitType = "Position";
                }
                positions = data;

                //let dataMS = [];
                //for (let i = 0; i < positions.length; i++) {
                //    let item = positions[i];
                //    dataMS.push({ label: `${item.code} - ${item.name}`, value: item.id, data: item });
                //}
                //$('#buHead').multiselect('dataprovider', rfdc()(dataMS));
                //$('#divHead').multiselect('dataprovider', rfdc()(dataMS));
                //$('#depHead').multiselect('dataprovider', rfdc()(dataMS));
            });
            cERP.appServices.hR.organizationalManagement.payrollStructure.pS_PayGrade.getAllPayGrades({}).done(function (data) {
                console.log(data);
                paygrades = data;

                let dataMS = [];
                for (let i = 0; i < paygrades.length; i++) {
                    let item = paygrades[i];
                    dataMS.push({ label: `${item.code} - ${item.name}`, value: item.id, data: item });
                }

                $.each($('#Paygrade'), function (x) { $(x).multiselect('dataprovider', rfdc()(dataMS)); });
            });
            cERP.appServices.setup.lookup.dictionaryValue.getAllByValueType(ValueTypeModules.OrganizationPositionStatus).done(function (d) {
                positionStatuses = d;
                $('#posStatus')
                    .find('option')
                    .remove();
                for (let i = 0; i < positionStatuses.length; i++) {
                    let item = positionStatuses[i];
                    $('#posStatus').append(`<option value="${item.id}">${item.value}</option>`);
                }
            });
            cERP.appServices.setup.lookup.dictionaryValue.getAllByValueType(ValueTypeModules.OrganizationPositionType).done(function (d) {
                positionTypes = d;
                $('#posType')
                    .find('option')
                    .remove()
                for (let i = 0; i < positionTypes.length; i++) {
                    let item = positionTypes[i];
                    $('#posType').append(`<option value="${item.id}">${item.value}</option>`);
                }
            });
            cERP.appServices.setup.lookup.dictionaryValue.getAllByValueType(ValueTypeModules.OrganizationPositionJobLevels).done(function (d) {
                posJobLevels = d;

                posJobGrid.columns[3].edit.params.dataSource = posJobLevels;
            });
            cERP.appServices.setup.lookup.dictionaryValue.getAllByValueType(ValueTypeModules.OrganizationPositionJobEmployeeClasses).done(function (d) {
                posJobEmployeeClasses = d;

                posJobGrid.columns[4].edit.params.dataSource = posJobEmployeeClasses;
            });
            cERP.appServices.setup.lookup.dictionaryValue.getAllByValueType(ValueTypeModules.OrganizationPositionJobContractTypes).done(function (d) {
                posJobContractTypes = d;

                posJobGrid.columns[5].edit.params.dataSource = posJobContractTypes;
            });
            cERP.appServices.hR.organizationalManagement.organizationStructure.oS_DivisionTemplate.getAllDivisionTemplates().done(function (data) {
                for (var i = 0; i < data.length; i++) {
                    data[i].unitType = "Division";
                }
                divisions = data;
            });
            cERP.appServices.hR.organizationalManagement.organizationStructure.oS_BusinessUnitTemplate.getAllBusinessUnitTemplates().done(function (data) {
                for (var i = 0; i < data.length; i++) {
                    data[i].unitType = "Business Unit";
                }
                businessUnits = data;
            });

            cERP.appServices.hR.organizationalManagement.payrollStructure.pS_PayGroup.getList({}).done(function (data) {
                let dataMS = [];
                for (let i = 0; i < data.items.length; i++) {
                    let item = data.items[i];
                    dataMS.push({ label: `${item.code} - ${item.name}`, value: item.id, data: item });
                }
                $.each($('.paygroup'), function (i, x) { $(x).multiselect('dataprovider', dataMS) });
            });
            
            cERP.appServices.hR.organizationalManagement.payrollStructure.pS_PayGrade.getList({}).done(function (data) {
                let dataMS = [];
                for (let i = 0; i < data.items.length; i++) {
                    let item = data.items[i];
                    dataMS.push({ label: `${item.code} - ${item.name}`, value: item.id, data: item });
                }
                $.each($('.paygrade'), function (i, x) { $(x).multiselect('dataprovider', dataMS) });
            });

            gridObj.showSpinner();
            $('#organizationStructuresLoader').slideDown(100);
            cERP.appServices.hR.organizationalManagement.organizationStructure.oS_OrganizationStructureTemplate.getAllOrganizationStructureTemplates({}).done(function (data) {
                gridObj.hideSpinner();
                $('#organizationStructuresLoader').slideUp(100);

                organizationStructures = data;
                gridObj.dataSource = organizationStructures;
                setTimeout(function () { gridObj.hideSpinner() }, 200);

                possibleSubOrganizationStructures = rfdc()(organizationStructures);

                let dataMS = [];
                for (let i = 0; i < data.length; i++) {
                    let item = data[i];
                    dataMS.push({ label: `${item.code} - ${item.name}`, value: item.id, data: item });
                }
                $('#subOrganizationStructuresField').multiselect('dataprovider', dataMS);
                $('#subOrganizationStructuresField').change();
            });

            $('#submitBUUnitBtn').on('click', function () {
                console.log(curUnitEditRow);
                if (ValidateForm('businessUnitForm')) {
                    structureTGrid.showSpinner();

                    let form = [];
                    let details = $('#businessUnitForm').find("textarea, input, select").serializeArray();
                    form = form.concat(details);

                    let params = objectifyForm(form);
                    curUnitEditRow._unit.unitDetails = params;

                    curUnitEditRow._unit.unitDetails.costCenters = rfdc()(buCostCentersGrid.dataSource);
                    curUnitEditRow._unit.unitDetails.associations = { positions: rfdc()(buPositionsGrid.dataSource) };

                    console.log(params);
                    console.log(curUnitEditRow);

                    structureTGrid.hideSpinner();
                    structureTGrid.refresh();
                    toastr.info(`${curUnitEditRow.type}: ${curUnitEditRow._unit.name} has been updated`);
                }
                else {
                    toastr.error(`${curUnitEditRow.type}: ${curUnitEditRow._unit.name} could not be updated`);
                }
            });
            $('#submitDIVUnitBtn').on('click', function () {
                console.log(curUnitEditRow);
                if (ValidateForm('divisionForm')) {
                    structureTGrid.showSpinner();

                    let form = [];
                    let details = $('#divisionForm').find("textarea, input, select").serializeArray();
                    form = form.concat(details);

                    let params = objectifyForm(form);
                    curUnitEditRow._unit.unitDetails = params;

                    curUnitEditRow._unit.unitDetails.costCenters = rfdc()(divCostCentersGrid.dataSource);
                    curUnitEditRow._unit.unitDetails.associations = { positions: rfdc()(divPositionsGrid.dataSource) };

                    console.log(params);
                    console.log(curUnitEditRow);

                    structureTGrid.hideSpinner();
                    structureTGrid.refresh();

                    toastr.info(`${curUnitEditRow.type}: ${curUnitEditRow._unit.name} has been updated`);
                }
                else {
                    toastr.error(`${curUnitEditRow.type}: ${curUnitEditRow._unit.name} could not be updated`);
                }
            });
            $('#submitDEPUnitBtn').on('click', function () {
                console.log(curUnitEditRow);
                if (ValidateForm('depisionForm')) {
                    structureTGrid.showSpinner();

                    let form = [];
                    let details = $('#departmentForm').find("textarea, input, select").serializeArray();
                    form = form.concat(details);

                    let params = objectifyForm(form);
                    curUnitEditRow._unit.unitDetails = params;

                    curUnitEditRow._unit.unitDetails.costCenters = rfdc()(depCostCentersGrid.dataSource);
                    curUnitEditRow._unit.unitDetails.associations = { positions: rfdc()(depPositionsGrid.dataSource) };

                    console.log(params);
                    console.log(curUnitEditRow);

                    structureTGrid.hideSpinner();
                    structureTGrid.refresh();

                    toastr.info(`${curUnitEditRow.type}: ${curUnitEditRow._unit.name} has been updated`);
                }
                else {
                    toastr.error(`${curUnitEditRow.type}: ${curUnitEditRow._unit.name} could not be updated`);
                }
            });
            $('#submitPOSUnitBtn').on('click', function () {
                console.log(curUnitEditRow);
                if (ValidateForm('positionForm')) {
                    structureTGrid.showSpinner();

                    let generalForm = [];
                    let generalDetails = $('#generalPOSDetailsTab *:not([readonly])').find("textarea, input, select").serializeArray();
                    console.log(generalDetails);
                    generalForm = generalForm.concat(generalDetails);

                    let generalParams = objectifyForm(generalForm);
                    delete generalParams.Code;
                    delete generalParams.Name;
                    delete generalParams.NameLocalized;

                    let jobDetails = $('#PositionJobsDetailsGrid')[0].ej2_instances[0].dataSource;
                    console.log(jobDetails);

                    let orgForm = [];
                    let orgDetails = $('#POSOrgDetailsTab *:not([readonly])').find("textarea, input, select").serializeArray();
                    console.log(orgDetails);
                    orgForm = orgForm.concat(orgDetails);

                    let orgParams = objectifyForm(orgForm);
                    delete orgParams.Code;
                    delete orgParams.Name;
                    delete orgParams.NameLocalized;

                    if (!curUnitEditRow._unit.unitDetails)
                        curUnitEditRow._unit.unitDetails = {};

                    curUnitEditRow._unit.unitDetails.generalDetails = generalParams;
                    curUnitEditRow._unit.unitDetails.jobDetails = jobDetails;
                    //curUnitEditRow._unit.unitDetails.orgDetails = orgParams;

                    //curUnitEditRow._unit.unitDetails.costCenters = rfdc()(depCostCentersGrid.dataSource);
                    //curUnitEditRow._unit.unitDetails.associations = { positions: rfdc()(depPositionsGrid.dataSource) };

                    console.log(generalParams);
                    console.log(curUnitEditRow);

                    structureTGrid.hideSpinner();
                    structureTGrid.refresh();

                    toastr.info(`${curUnitEditRow.type}: ${curUnitEditRow._unit.name} has been updated`);
                }
                else {
                    toastr.error(`${curUnitEditRow.type}: ${curUnitEditRow._unit.name} could not be updated`);
                }
            });
            
            $('#addOrganizationStructuresBtn').on('click', function () {
                isEditingOrganizationStructures = false;
                //structureTGrid.dataSource = [];
                //structureTGrid.refresh();
                usedBusinessUnits = [];
                usedDivisions = [];
                usedDepartments = [];

                emptyTGDS = true;
                $('#submitOrganizationStructureBtn').val('Create Organization Structure');
            });

            $('#submitOrganizationStructureBtn').on('click', function (e) {
                e.preventDefault();
                if (ValidateForm('organizationStructureSpecificForm')) {
                    gridObj.showSpinner();
                    Swal.showLoading();

                    let form = [];
                    let organizationStructureDetails = $('#organizationStructureSpecificForm').find("textarea, input, select").serializeArray();
                    form = form.concat(organizationStructureDetails);

                    let params = objectifyForm(form);

                    let id = 0;
                    if (gridObj.dataSource.length > 0)
                        id = gridObj.dataSource[gridObj.dataSource.length - 1].id;

                    params.isEditing = isEditingOrganizationStructures;

                    if (isEditingOrganizationStructures) {
                        params.id = curOrganizationStructuresEditRow.id;

                        //cERP.appServices.hR.leaveRequestTemplates.update()
                    }
                    else {

                        //cERP.appServices.hR.leaveRequestTemplates.update()
                    }

                    //let selectedPositions = $('#positionIds').val();
                    //console.log(selectedPositions);
                    //let selectedPositionTemplates = [];

                    //params.Structure = $('#StructureTreeGrid')[0].ej2_instances[0].dataSource;

                    //for (var i = 0; i < selectedPositions.length; i++) {
                    //    selectedPositionTemplates.push(positions.filter(x => x.id == selectedPositions[i])[0]);
                    //    params.positionTemplates.push(selectedPositionTemplates[i]);
                    //}

                    //let selectedDepHead = $('#depHeadId').val();
                    //let selectedDepHeadTemplate = selectedPositionTemplates.push(positions.filter(x => x.id == selectedDepHead)[0]);
                    //params.organizationStructureHead = { positionTemplate: selectedDepHeadTemplate };

                    //params.subOrganizationStructureTemplates = subDGrid.dataSource;

                    let formData = new FormData();
                    formData.append("info", JSON.stringify(params));
                    formData.append("structure", JSON.stringify($('#StructureTreeGrid')[0].ej2_instances[0].dataSource));
                    let xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
                    formData.append("__RequestVerificationToken", xhrToken);
                    console.log(params);

                    $.ajax({
                        url: "?handler=OrganizationStructureTemplate",
                        async: true,
                        type: "POST",
                        data: formData,
                        contentType: false,
                        processData: false,
                        success: function (data) {
                            Swal.hideLoading();
                            console.log(data);
                            if (isEditingOrganizationStructures) {
                                gridObj.refresh(); // refresh the Grid.

                                swal.fire("Success", "Organization Structure has successfully been updated", "success");

                                for (let i = 0; i < gridObj.dataSource.length; i++) {
                                    if (gridObj.dataSource[i].id == data.id) {
                                        gridObj.dataSource[i] = data;
                                    }
                                }
                                gridObj.refresh();
                            }
                            else {
                                gridObj.dataSource.push(data);

                                gridObj.refresh(); // refresh the Grid.

                                swal.fire("Success", "Organization Structure has successfully been added", "success");
                            }
                            gridObj.hideSpinner();
                        },
                        error: function (err) {
                            Swal.hideLoading();
                            console.log(err);
                            let errMsg = typeof err !== 'undefined' ? err.responseJSON.Message : '';
                            if (isEditingOrganizationStructures)
                                swal.fire("Failed", errMsg + " \nOrganization Structure couldn't be updated, please fix all errors and try again.", "error");
                            else
                                swal.fire("Failed", errMsg + " \nOrganization Structure couldn't be added, please fix all errors and try again.", "error");

                            console.log(err);
                            gridObj.hideSpinner();
                        }
                    });
                }
                else {
                    Swal.close();
                    Swal.hideLoading();
                }
            });
        });
    </script>
}
<partial name="_DefaultPageHeader" />
<div class="site-content customContentArea">
    <div class="control-section">
        <div class="areaHeader" style="display:flex;">
            <div id="organizationStructuresLoader" class="pull-left loader-inline" style="display:none"></div>
            <div class="areaHeaderTitle">
                <span id="areHeadertitle" class="areaHeaderTitleNode menu-text">Current Organization Structures</span>
                @*<span id="" class="areaHeaderTitleInNode menu-text"> > </span>*@
                @*<span id="subTitle" class="menu-text" style="padding-left:15px; font-size: 28px; font-family:Roboto; font-weight:200;">@ViewData["SubTitle"]</span>*@
            </div>
            @*<h3 class="control-label" style="flex-grow: 1; margin:0">Approval Route</h3>*@
            <div class="pull-right text-right p-r-20 areaHeaderBtnSec">
                @*<div class="clearfix margin-15"></div>*@
                <a id="addOrganizationStructuresBtn" onclick="areaHeaderBtnClick(event); isEditingOrganizationStructures = false;" class="btn btn-outline-dark areaHeaderBtn"><i class="fa fa-plus fa-fw"></i> Add New</a>
            </div>
        </div>
        <form id="organizationStructuresForm" onkeydown="return event.key != 'Enter';" class="row areaForm" method="post" data-toggle="validator" style="display: none; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
            <ejs-accordion id="organizationStructureFormAccordion">
                <e-accordion-accordionitems>
                    <e-accordion-accordionitem expanded="true" header="General Details" content="#generalFieldsInfo"></e-accordion-accordionitem>
                    <e-accordion-accordionitem header="Structure Details" content="#structureInfo"></e-accordion-accordionitem>
                </e-accordion-accordionitems>
            </ejs-accordion>

            <div id="generalFieldsInfo" style="display:none">
                <div id="organizationStructureSpecificForm">
                    <div class="col-sm-2">

                    </div>
                    <div class="col-sm-7" style="padding:0">
                        <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                            <div class="form-group" style="padding: 15px">
                                <div class="col-sm-4" style="">
                                    <label class="p-t-5 control-label pull-right">Code:</label>
                                </div>
                                <div class="col-sm-7" style="">
                                    <input type="text" id="organizationStructureCode" name="Code" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" required>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                            <div class="form-group" style="padding: 15px">
                                <div class="col-sm-4" style="">
                                    <label class="p-t-5 control-label pull-right">Title:</label>
                                </div>
                                <div class="col-sm-7" style="">
                                    <input type="text" id="organizationStructureTitle" name="Name" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" required>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                            <div class="form-group" style="padding: 15px">
                                <div class="col-sm-4" style="">
                                    <label class="p-t-5 control-label pull-right">Title (In Arabic):</label>
                                </div>
                                <div class="col-sm-7" style="">
                                    <input type="text" id="organizationStructureTitleLocalized" name="NameLocalized" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" required>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                            <div class="form-group" style="padding: 15px">
                                <div class="col-sm-4" style="">
                                    <label class="p-t-5 control-label pull-right ">Valid From:</label>
                                </div>
                                <div class="col-sm-7" style="">
                                    <input type="date" id="validityFromDate" name="ValidityFromDate" class="text-left form-control inline pull-left" required>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                            <div class="form-group" style="padding: 15px">
                                <div class="col-sm-4" style="">
                                    <label class="p-t-5 control-label pull-right ">Valid To:</label>
                                </div>
                                <div class="col-sm-7" style="">
                                    <input type="date" id="validityToDate" name="ValidityToDate" class="text-left form-control inline pull-left" required>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                            <div class="form-group" style="padding: 15px">
                                <div class="col-sm-4" style="">
                                    <label class="p-t-5 control-label pull-right ">Review Period:</label>
                                </div>
                                <div class="col-sm-7" style="">
                                    <div id="reviewPeriodTypeField" class="col-sm-12" style="padding:0">
                                        <div class="form-group">
                                            <select id="reviewPeriod" name="ReviewPeriod" onchange="
                                                    if (typeof $('option:selected', '#reviewPeriod').attr('data-value') !== 'undefined' && $('option:selected', '#reviewPeriod').attr('data-value').includes('Day')) {
                                                        $('#reviewPeriodTypeField').removeClass('col-sm-12');
                                                        $('#reviewPeriodTypeField').addClass('col-sm-6');
                                                        setTimeout(function () {
                                                            $('#reviewPeriodDaysField').slideDown(0);
                                                        }, 520);
                                                    } else {
                                                        $('#reviewPeriodDaysField').slideUp(0);
                                                        $('#reviewPeriodTypeField').removeClass('col-sm-6');
                                                        $('#reviewPeriodTypeField').addClass('col-sm-12');
                                                    }
                                                " class="form-control" required>
                                                @for (int i = 0; i < reviewPeriods.Count; i++)
                                                {
                                                    <option value="@((int)reviewPeriods[i])" data-value="@EnumExtensions.GetDescription(reviewPeriods[i])">@EnumExtensions.GetDescription(reviewPeriods[i])</option>
                                                }
                                            </select>
                                        </div>
                                    </div>
                                    <div id="reviewPeriodDaysField" class="col-sm-6" style="display:none; padding:0">
                                        <div class="form-group">
                                            <div class="col-sm-3" style="">
                                                <label class="margin-bottom-5 control-label">Period Days:</label>
                                            </div>
                                            <div class="col-sm-9" style="">
                                                <input type="number" min="0" id="reviewPeriodDays" name="ReviewPeriodDays" value="0" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                            <hr />
                            <div class="form-group" style="padding: 15px">
                                <div class="col-sm-4" style="">
                                    <label class="p-t-5 control-label pull-right ">Legal Entity:</label>
                                </div>
                                <div class="col-sm-7" style="">
                                    <select id="structureLegalEntity" name="LegalEntityId" class="form-control" required>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-2">

                    </div>
                    @*<div class="col-lg-3 col-md-3 col-sm-3 col-12">
                        <div class="form-group">
                            <label class="margin-bottom-5 control-label">OrganizationStructure Head:</label>
                            <select id="depHeadId" name="OrganizationStructureHeadId" class="form-control">
                            </select>
                        </div>
                    </div>*@
                </div>
            </div>
            <div id="structureInfo" style="display:none">
                <ejs-tab id="OSSpecificFormTabs" animation="ViewBag.animation" selected="osSpecificTabSelected">
                    <e-tab-tabitems>
                        <e-tab-tabitem header="@(new TabHeader { Text = "Organization Structure" })" content="#orgStructureTab"></e-tab-tabitem>
                        <e-tab-tabitem header="@(new TabHeader { Text = "Overview Diagram" })" content="#diagramOverviewTab"></e-tab-tabitem>
                    </e-tab-tabitems>
                </ejs-tab>
                <div id="orgStructureTab" class="areaForm" style="display:none;">
                    <div id="osFormsHeader" style="display:none">
                        <div class="areaHeader" style="display:flex;">
                            <div id="organizationStructuresLoader" class="pull-left loader-inline" style="display:none"></div>
                            <div class="areaHeaderTitle">
                                <span id="areaHeadertitle" class="areaHeaderTitleNode menu-text"></span>
                                <span id="" class="areaHeaderTitleInNode menu-text"> > </span>
                                <span id="areaHeaderValue" class="areaHeaderTitleNode menu-text"></span>
                            </div>
                            <div class="pull-right text-right p-r-20 areaHeaderBtnSec">
                                @*<div class="clearfix margin-15"></div>*@
                                @*<a id="saveUnitDetailsBtn" onclick="areaHeaderBtnClick(event); isEditingUnit = false;" class="btn btn-outline-dark areaHeaderBtn"><i class="fa fa-save fa-fw"></i> Save Unit</a>*@
                            </div>
                            @*<h3 class="control-label" style="flex-grow: 1; margin:0">Approval Route</h3>*@
                        </div>
                    </div>
                    <div id="businessUnitForm" role="form" class="row areaForm" method="post" data-toggle="validator" style="display: none; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
                        <ejs-tab id="businessUnitFormTabs" animation="ViewBag.animation">
                            <e-tab-tabitems>
                                <e-tab-tabitem header="@(new TabHeader { Text = "General" })" content="#generalBUDetailsTab"></e-tab-tabitem>
                                <e-tab-tabitem header="@(new TabHeader { Text = "Cost Centers" })" content="#BUCostCentersTab"></e-tab-tabitem>
                                <e-tab-tabitem header="@(new TabHeader { Text = "Associations" })" content="#BUAssociationsTab"></e-tab-tabitem>
                            </e-tab-tabitems>
                        </ejs-tab>
                        <div id="generalBUDetailsTab" class="areaForm">
                            <div class="row">
                                <div class="col-sm-2">

                                </div>
                                <div class="col-sm-7" style="padding:0">
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-4" style="">
                                                <label class="p-t-5 control-label pull-right ">Head of BU:</label>
                                            </div>
                                            <div class="col-sm-7" style="">
                                                <select id="buHead" name="HeadOfBUId" class="form-control">
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-4" style="">
                                                <label class="p-t-5 control-label pull-right ">Location:</label>
                                            </div>
                                            <div class="col-sm-7" style="">
                                                <select id="buLocationsIds" name="BULocationId" class="form-control">
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-4" style="">
                                                <label class="p-t-5 control-label pull-right ">Validity Start Date:</label>
                                            </div>
                                            <div class="col-sm-7" style="">
                                                <input id="buValidityStart" name="ValidityFromDate" type="date" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-4" style="">
                                                <label class="p-t-5 control-label pull-right ">Validity End Date:</label>
                                            </div>
                                            <div class="col-sm-7" style="">
                                                <input id="buValidityEnd" name="ValidityToDate" type="date" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-4" style="">
                                                <label class="p-t-5 control-label pull-right ">Pay Group:</label>
                                            </div>
                                            <div class="col-sm-7" style="">
                                                <select id="buPaygroup" name="BUPaygroupId" class="paygroup form-control">
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-2">

                                </div>
                            </div>
                        </div>
                        <div id="BUCostCentersTab" class="areaForm" style="display:none">
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="panel-body p-t-0" style="">
                                        <div class="areaHeader" style="display:flex;">
                                            <div id="buCostCentersLoader" class="pull-left loader-inline" style="display:none"></div>
                                            <div class="areaHeaderTitle">
                                                <span id="areHeadertitle" class="areaHeaderTitleNode menu-text">Cost Centers</span>
                                            </div>
                                            <div class="pull-right text-right p-r-20 areaHeaderBtnSec">
                                                <a id="addBUCostCenterBtn" onclick="areaHeaderBtnClick(event);" class="btn btn-outline-dark areaHeaderBtn"><i class="fa fa-plus fa-fw"></i> Add New</a>
                                            </div>
                                        </div>
                                        <div role="form" id="buCostCentersForm" class="row areaForm" method="post" data-toggle="validator" style="display: none; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
                                            <div class="row">
                                                <div class="col-lg-4 col-md-4 col-sm-4 col-12">
                                                    <div class="form-group">
                                                        <label class="margin-bottom-5 control-label">Cost Centers:</label>
                                                        <select id="buCostCentersIds" name="CostCentersIds" multiple="multiple" class="form-control">
                                                        </select>
                                                    </div>
                                                </div>
                                                <div class="col-lg-4 col-md-4 col-sm-4 col-12">
                                                    <div class="form-group">
                                                        <label class="margin-bottom-5 control-label">Percentage:</label>
                                                        <input type="number" min="1" max="100" value="" id="buCostCenterPercentage" name="Percentage" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                                    </div>
                                                </div>
                                                <div class="col-lg-3 col-md-3 col-sm-3 col-12">
                                                    <label class="control-label m-b-5 "></label>
                                                    <button id="submitBUCostCenterBtn" type="button" class="btn btn-success btn-block">Add Cost Center(s)</button>
                                                </div>
                                            </div>
                                        </div>
                                        <div id="buCostCentersCS" class="control-section">
                                            <ejs-grid id="BUCostCenterReferenceGrid" enableAutoFill="true" dataBound="dataBoundResponsive"
                                                      allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true"
                                                      hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true"
                                                      allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" dataSource="new List<dynamic>()"
                                                      toolbar="@initialToolBar" toolbarClick="defaultToolbarClick" actionBegin="referenceActionBegin" actionComplete="referenceActionComplete"
                                                      allowPaging="true" allowResizing="true">

                                                <e-grid-columns>
                                                    <e-grid-column field="id" headerText="Id" textAlign="Center" visible="false" isPrimaryKey="true" showInColumnChooser="false"></e-grid-column>
                                                    <e-grid-column field="key" allowEditing="false" headerText="Code" textAlign="Center"></e-grid-column>
                                                    <e-grid-column field="value" allowEditing="false" headerText="Name" textAlign="Center"></e-grid-column>
                                                    <e-grid-column field="percentage" allowEditing="true" headerText="Percentage" textAlign="Center"></e-grid-column>
                                                    <e-grid-column headerText="Actions" textAlign="Center" commands="referenceCommands"></e-grid-column>
                                                </e-grid-columns>

                                                <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                                <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true"></e-grid-editSettings>
                                                <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                                <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                            </ejs-grid>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="BUAssociationsTab" class="areaForm" style="display:none">
                            @*<ejs-accordion id="buAssociationsFormAccordion">
                                <e-accordion-accordionitems>
                                    <e-accordion-accordionitem expanded="true" header="Positions" content="#buPosAssociations"></e-accordion-accordionitem>
                                   </e-accordion-accordionitems>
                            </ejs-accordion>*@

                            <div id="buPosAssociations">
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="panel-body p-t-0" style="">
                                            <div class="areaHeader" style="display:flex;">
                                                <div id="buPositionsLoader" class="pull-left loader-inline" style="display:none"></div>
                                                <div class="areaHeaderTitle">
                                                    <span id="areHeadertitle" class="areaHeaderTitleNode menu-text">Positions</span>
                                                </div>
                                                <div class="pull-right text-right p-r-20 areaHeaderBtnSec">
                                                    <a id="addBUPositionBtn" onclick="areaHeaderBtnClick(event);" class="btn btn-outline-dark areaHeaderBtn"><i class="fa fa-plus fa-fw"></i> Add New</a>
                                                </div>
                                            </div>
                                            <div role="form" id="buPositionsForm" class="row areaForm" method="post" data-toggle="validator" style="display: none; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
                                                <div class="row">
                                                    <div class="col-lg-9 col-md-9 col-sm-9 col-12">
                                                        <div class="form-group">
                                                            <label class="margin-bottom-5 control-label">Positions:</label>
                                                            <select id="buPositionsIds" name="PositionsIds" multiple="multiple" class="form-control">
                                                            </select>
                                                        </div>
                                                    </div>
                                                    <div class="col-lg-3 col-md-3 col-sm-3 col-12">
                                                        <label class="control-label m-b-5 "></label>
                                                        <button id="submitBUPositionBtn" type="button" class="btn btn-success btn-block">Add Position(s)</button>
                                                    </div>
                                                </div>
                                            </div>
                                            <div id="buPositionsCS" class="control-section">
                                                <ejs-grid id="BUPositionReferenceGrid" enableAutoFill="true" dataBound="dataBoundResponsive"
                                                          allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true"
                                                          hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true"
                                                          allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" dataSource="new List<dynamic>()"
                                                          toolbar="@initialToolBar" toolbarClick="defaultToolbarClick" actionBegin="referenceActionBegin" actionComplete="referenceActionComplete"
                                                          allowPaging="true" allowResizing="true">

                                                    <e-grid-columns>
                                                        <e-grid-column field="id" headerText="Id" textAlign="Center" visible="false" isPrimaryKey="true" showInColumnChooser="false"></e-grid-column>
                                                        <e-grid-column field="code" allowEditing="false" headerText="Code" textAlign="Center"></e-grid-column>
                                                        <e-grid-column field="name" allowEditing="false" headerText="Name" textAlign="Center"></e-grid-column>
                                                        <e-grid-column field="percentage" allowEditing="true" headerText="Percentage" textAlign="Center"></e-grid-column>
                                                        <e-grid-column headerText="Actions" textAlign="Center" commands="referenceCommands"></e-grid-column>
                                                    </e-grid-columns>

                                                    <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                                    <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true"></e-grid-editSettings>
                                                    <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                                    <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                                </ejs-grid>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row m-t-20">
                            <div class="col-lg-12">
                                <input id="submitBUUnitBtn" type="button" class="btn btn-success btn-block" value="Update Business Unit" required />
                            </div>
                        </div>
                    </div>
                    <div id="divisionForm" role="form" class="row areaForm" method="post" data-toggle="validator" style="display: none; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
                        <ejs-tab id="divisionFormTabs" animation="ViewBag.animation">
                            <e-tab-tabitems>
                                <e-tab-tabitem header="@(new TabHeader { Text = "General" })" content="#generalDIVDetailsTab"></e-tab-tabitem>
                                <e-tab-tabitem header="@(new TabHeader { Text = "Cost Centers" })" content="#DIVCostCentersTab"></e-tab-tabitem>
                                <e-tab-tabitem header="@(new TabHeader { Text = "Associations" })" content="#DIVAssociationsTab"></e-tab-tabitem>
                            </e-tab-tabitems>
                        </ejs-tab>
                        <div id="generalDIVDetailsTab" class="areaForm">
                            <div class="row">
                                <div class="col-sm-2">

                                </div>
                                <div class="col-sm-7" style="padding:0">
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-4" style="">
                                                <label class="p-t-5 control-label pull-right ">Head of DIV:</label>
                                            </div>
                                            <div class="col-sm-7" style="">
                                                <select id="divHead" name="HeadOfDIVId" class="form-control">
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-4" style="">
                                                <label class="p-t-5 control-label pull-right ">Location:</label>
                                            </div>
                                            <div class="col-sm-7" style="">
                                                <select id="divLocationsIds" name="DIVLocationId" class="form-control">
                                                </select>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-4" style="">
                                                <label class="p-t-5 control-label pull-right ">Validity Start Date:</label>
                                            </div>
                                            <div class="col-sm-7" style="">
                                                <input id="divValidityStart" name="ValidityFromDate" type="date" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-4" style="">
                                                <label class="p-t-5 control-label pull-right ">Validity End Date:</label>
                                            </div>
                                            <div class="col-sm-7" style="">
                                                <input id="divValidityEnd" name="ValidityToDate" type="date" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-4" style="">
                                                <label class="p-t-5 control-label pull-right ">Paygroup:</label>
                                            </div>
                                            <div class="col-sm-7" style="">
                                                <select id="divPayroup" name="DIVPaygroupId" class="paygroup form-control">
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-2">

                                </div>
                            </div>
                        </div>
                        <div id="DIVCostCentersTab" class="areaForm" style="display:none">
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="panel-body p-t-0" style="">
                                        <div class="areaHeader" style="display:flex;">
                                            <div id="divCostCentersLoader" class="pull-left loader-inline" style="display:none"></div>
                                            <div class="areaHeaderTitle">
                                                <span id="areHeadertitle" class="areaHeaderTitleNode menu-text">Cost Centers</span>
                                            </div>
                                            <div class="pull-right text-right p-r-20 areaHeaderBtnSec">
                                                <a id="addDIVCostCenterBtn" onclick="areaHeaderBtnClick(event);" class="btn btn-outline-dark areaHeaderBtn"><i class="fa fa-plus fa-fw"></i> Add New</a>
                                            </div>
                                        </div>
                                        <div role="form" id="divCostCentersForm" class="row areaForm" method="post" data-toggle="validator" style="display: none; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
                                            <div class="row">
                                                <div class="col-lg-4 col-md-4 col-sm-4 col-12">
                                                    <div class="form-group">
                                                        <label class="margin-bottom-5 control-label">Cost Centers:</label>
                                                        <select id="divCostCentersIds" name="CostCentersIds" multiple="multiple" class="form-control">
                                                        </select>
                                                    </div>
                                                </div>
                                                <div class="col-lg-4 col-md-4 col-sm-4 col-12">
                                                    <div class="form-group">
                                                        <label class="margin-bottom-5 control-label">Percentage:</label>
                                                        <input type="number" min="1" max="100" value="" id="divCostCenterPercentage" name="Percentage" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                                    </div>
                                                </div>
                                                <div class="col-lg-3 col-md-3 col-sm-3 col-12">
                                                    <label class="control-label m-b-5 "></label>
                                                    <button id="submitDIVCostCenterBtn" type="button" class="btn btn-success btn-block">Add Cost Center(s)</button>
                                                </div>
                                            </div>
                                        </div>
                                        <div id="divCostCentersCS" class="control-section">
                                            <ejs-grid id="DIVCostCenterReferenceGrid" enableAutoFill="true" dataBound="dataBoundResponsive"
                                                      allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true"
                                                      hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true"
                                                      allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" dataSource="new List<dynamic>()"
                                                      toolbar="@initialToolBar" toolbarClick="defaultToolbarClick" actionBegin="referenceActionBegin" actionComplete="referenceActionComplete"
                                                      allowPaging="true" allowResizing="true">

                                                <e-grid-columns>
                                                    <e-grid-column field="id" headerText="Id" textAlign="Center" visible="false" isPrimaryKey="true" showInColumnChooser="false"></e-grid-column>
                                                    <e-grid-column field="key" allowEditing="false" headerText="Code" textAlign="Center"></e-grid-column>
                                                    <e-grid-column field="value" allowEditing="false" headerText="Name" textAlign="Center"></e-grid-column>
                                                    <e-grid-column field="percentage" allowEditing="true" headerText="Percentage" textAlign="Center"></e-grid-column>
                                                    <e-grid-column headerText="Actions" textAlign="Center" commands="referenceCommands"></e-grid-column>
                                                </e-grid-columns>

                                                <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                                <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true"></e-grid-editSettings>
                                                <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                                <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                            </ejs-grid>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="DIVAssociationsTab" class="areaForm" style="display:none">
                            @*<ejs-accordion id="divAssociationsFormAccordion">
                                <e-accordion-accordionitems>
                                    <e-accordion-accordionitem expanded="true" header="Positions" content="#divPosAssociations"></e-accordion-accordionitem>
                                    <e-accordion-accordionitem header="Companies" content="#divCompsAssociations"></e-accordion-accordionitem>
                                    <e-accordion-accordionitem header="Divisions" content="#divDivisionsAssociations"></e-accordion-accordionitem>
                                </e-accordion-accordionitems>
                            </ejs-accordion>*@

                            <div id="divPosAssociations">
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="panel-body p-t-0" style="">
                                            <div class="areaHeader" style="display:flex;">
                                                <div id="divPositionsLoader" class="pull-left loader-inline" style="display:none"></div>
                                                <div class="areaHeaderTitle">
                                                    <span id="areHeadertitle" class="areaHeaderTitleNode menu-text">Positions</span>
                                                </div>
                                                <div class="pull-right text-right p-r-20 areaHeaderBtnSec">
                                                    <a id="addDIVPositionBtn" onclick="areaHeaderBtnClick(event);" class="btn btn-outline-dark areaHeaderBtn"><i class="fa fa-plus fa-fw"></i> Add New</a>
                                                </div>
                                            </div>
                                            <div role="form" id="divPositionsForm" class="row areaForm" method="post" data-toggle="validator" style="display: none; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
                                                <div class="row">
                                                    <div class="col-lg-9 col-md-9 col-sm-9 col-12">
                                                        <div class="form-group">
                                                            <label class="margin-bottom-5 control-label">Positions:</label>
                                                            <select id="divPositionsIds" name="PositionsIds" multiple="multiple" class="form-control">
                                                            </select>
                                                        </div>
                                                    </div>
                                                    <div class="col-lg-3 col-md-3 col-sm-3 col-12">
                                                        <label class="control-label m-b-5 "></label>
                                                        <button id="submitDIVPositionBtn" type="button" class="btn btn-success btn-block">Add Position(s)</button>
                                                    </div>
                                                </div>
                                            </div>
                                            <div id="divPositionsCS" class="control-section">
                                                <ejs-grid id="DIVPositionReferenceGrid" enableAutoFill="true" dataBound="dataBoundResponsive"
                                                          allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true"
                                                          hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true"
                                                          allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" dataSource="new List<dynamic>()"
                                                          toolbar="@initialToolBar" toolbarClick="defaultToolbarClick" actionBegin="referenceActionBegin" actionComplete="referenceActionComplete"
                                                          allowPaging="true" allowResizing="true">

                                                    <e-grid-columns>
                                                        <e-grid-column field="id" headerText="Id" textAlign="Center" visible="false" isPrimaryKey="true" showInColumnChooser="false"></e-grid-column>
                                                        <e-grid-column field="code" allowEditing="false" headerText="Code" textAlign="Center"></e-grid-column>
                                                        <e-grid-column field="name" allowEditing="false" headerText="Name" textAlign="Center"></e-grid-column>
                                                        <e-grid-column field="percentage" allowEditing="true" headerText="Percentage" textAlign="Center"></e-grid-column>
                                                        <e-grid-column headerText="Actions" textAlign="Center" commands="referenceCommands"></e-grid-column>
                                                    </e-grid-columns>

                                                    <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                                    <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true"></e-grid-editSettings>
                                                    <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                                    <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                                </ejs-grid>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row m-t-20">
                            <div class="col-lg-12">
                                <input id="submitDIVUnitBtn" type="button" class="btn btn-success btn-block" value="Update Division" required />
                            </div>
                        </div>
                    </div>
                    <div id="departmentForm" role="form" class="row areaForm" method="post" data-toggle="validator" style="display: none; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
                        <ejs-tab id="departmentFormTabs" animation="ViewBag.animation">
                            <e-tab-tabitems>
                                <e-tab-tabitem header="@(new TabHeader { Text = "General" })" content="#generalDEPDetailsTab"></e-tab-tabitem>
                                <e-tab-tabitem header="@(new TabHeader { Text = "Cost Centers" })" content="#DEPCostCentersTab"></e-tab-tabitem>
                                <e-tab-tabitem header="@(new TabHeader { Text = "Associations" })" content="#DEPAssociationsTab"></e-tab-tabitem>
                            </e-tab-tabitems>
                        </ejs-tab>
                        <div id="generalDEPDetailsTab" class="areaForm">
                            <div class="row">
                                <div class="col-sm-2">

                                </div>
                                <div class="col-sm-7" style="padding:0">
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-4" style="">
                                                <label class="p-t-5 control-label pull-right ">Head of Department:</label>
                                            </div>
                                            <div class="col-sm-7" style="">
                                                <select id="depHead" name="HeadOfDEPId" class="form-control" required>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-4" style="">
                                                <label class="p-t-5 control-label pull-right ">Location:</label>
                                            </div>
                                            <div class="col-sm-7" style="">
                                                <select id="depLocationsIds" name="DEPLocationId" class="form-control" required>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-4" style="">
                                                <label class="p-t-5 control-label pull-right ">Validity Start Date:</label>
                                            </div>
                                            <div class="col-sm-7" style="">
                                                <input id="depValidityStart" name="ValidityFromDate" type="date" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-4" style="">
                                                <label class="p-t-5 control-label pull-right ">Validity End Date:</label>
                                            </div>
                                            <div class="col-sm-7" style="">
                                                <input id="depValidityEnd" name="ValidityToDate" type="date" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-4" style="">
                                                <label class="p-t-5 control-label pull-right ">Pay Group:</label>
                                            </div>
                                            <div class="col-sm-7" style="">
                                                <select id="depPayroup" name="PayGroupId" class="paygroup form-control" required>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-4" style="">
                                                <label class="p-t-5 control-label pull-right ">Pay Grade:</label>
                                            </div>
                                            <div class="col-sm-7" style="">
                                                <select id="depPayrade" name="PayGradeId" class="paygrade form-control" required>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-2">

                                </div>
                            </div>
                        </div>
                        <div id="DEPCostCentersTab" class="areaForm" style="display:none">
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="panel-body p-t-0" style="">
                                        <div class="areaHeader" style="display:flex;">
                                            <div id="depCostCentersLoader" class="pull-left loader-inline" style="display:none"></div>
                                            <div class="areaHeaderTitle">
                                                <span id="areHeadertitle" class="areaHeaderTitleNode menu-text">Cost Centers</span>
                                            </div>
                                            <div class="pull-right text-right p-r-20 areaHeaderBtnSec">
                                                <a id="addDEPCostCenterBtn" onclick="areaHeaderBtnClick(event);" class="btn btn-outline-dark areaHeaderBtn"><i class="fa fa-plus fa-fw"></i> Add New</a>
                                            </div>
                                        </div>
                                        <div role="form" id="depCostCentersForm" class="row areaForm" method="post" data-toggle="validator" style="display: none; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
                                            <div class="row">
                                                <div class="col-lg-4 col-md-4 col-sm-4 col-12">
                                                    <div class="form-group">
                                                        <label class="margin-bottom-5 control-label">Cost Centers:</label>
                                                        <select id="depCostCentersIds" name="CostCentersIds" multiple="multiple" class="form-control">
                                                        </select>
                                                    </div>
                                                </div>
                                                <div class="col-lg-4 col-md-4 col-sm-4 col-12">
                                                    <div class="form-group">
                                                        <label class="margin-bottom-5 control-label">Percentage:</label>
                                                        <input type="number" min="1" max="100" value="" id="depCostCenterPercentage" name="Percentage" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                                    </div>
                                                </div>
                                                <div class="col-lg-3 col-md-3 col-sm-3 col-12">
                                                    <label class="control-label m-b-5 "></label>
                                                    <button id="submitDEPCostCenterBtn" type="button" class="btn btn-success btn-block">Add Cost Center(s)</button>
                                                </div>
                                            </div>
                                        </div>
                                        <div id="depCostCentersCS" class="control-section">
                                            <ejs-grid id="DEPCostCenterReferenceGrid" enableAutoFill="true" dataBound="dataBoundResponsive"
                                                      allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true"
                                                      hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true"
                                                      allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" dataSource="new List<dynamic>()"
                                                      toolbar="@initialToolBar" toolbarClick="defaultToolbarClick" actionBegin="referenceActionBegin" actionComplete="referenceActionComplete"
                                                      allowPaging="true" allowResizing="true">

                                                <e-grid-columns>
                                                    <e-grid-column field="id" headerText="Id" textAlign="Center" visible="false" isPrimaryKey="true" showInColumnChooser="false"></e-grid-column>
                                                    <e-grid-column field="key" allowEditing="false" headerText="Code" textAlign="Center"></e-grid-column>
                                                    <e-grid-column field="value" allowEditing="false" headerText="Name" textAlign="Center"></e-grid-column>
                                                    <e-grid-column field="percentage" allowEditing="true" headerText="Percentage" textAlign="Center"></e-grid-column>
                                                    <e-grid-column headerText="Actions" textAlign="Center" commands="referenceCommands"></e-grid-column>
                                                </e-grid-columns>

                                                <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                                <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true"></e-grid-editSettings>
                                                <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                                <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                            </ejs-grid>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="DEPAssociationsTab" class="areaForm" style="display:none">
                            @*<ejs-accordion id="depAssociationsFormAccordion">
                                <e-accordion-accordionitems>
                                    <e-accordion-accordionitem expanded="true" header="Positions" content="#depPosAssociations"></e-accordion-accordionitem>
                                    <e-accordion-accordionitem header="Companies" content="#depCompsAssociations"></e-accordion-accordionitem>
                                    <e-accordion-accordionitem header="Departments" content="#depDepartmentsAssociations"></e-accordion-accordionitem>
                                </e-accordion-accordionitems>
                            </ejs-accordion>*@

                            <div id="depPosAssociations">
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="panel-body p-t-0" style="">
                                            <div class="areaHeader" style="display:flex;">
                                                <div id="depPositionsLoader" class="pull-left loader-inline" style="display:none"></div>
                                                <div class="areaHeaderTitle">
                                                    <span id="areHeadertitle" class="areaHeaderTitleNode menu-text">Positions</span>
                                                </div>
                                                <div class="pull-right text-right p-r-20 areaHeaderBtnSec">
                                                    <a id="addDEPPositionBtn" onclick="areaHeaderBtnClick(event);" class="btn btn-outline-dark areaHeaderBtn"><i class="fa fa-plus fa-fw"></i> Add New</a>
                                                </div>
                                            </div>
                                            <div role="form" id="depPositionsForm" class="row areaForm" method="post" data-toggle="validator" style="display: none; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
                                                <div class="row">
                                                    <div class="col-lg-9 col-md-9 col-sm-9 col-12">
                                                        <div class="form-group">
                                                            <label class="margin-bottom-5 control-label">Positions:</label>
                                                            <select id="depPositionsIds" name="PositionsIds" multiple="multiple" class="form-control">
                                                            </select>
                                                        </div>
                                                    </div>
                                                    <div class="col-lg-3 col-md-3 col-sm-3 col-12">
                                                        <label class="control-label m-b-5 "></label>
                                                        <button id="submitDEPPositionBtn" type="button" class="btn btn-success btn-block">Add Position(s)</button>
                                                    </div>
                                                </div>
                                            </div>
                                            <div id="depPositionsCS" class="control-section">
                                                <ejs-grid id="DEPPositionReferenceGrid" enableAutoFill="true" dataBound="dataBoundResponsive"
                                                          allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true"
                                                          hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true"
                                                          allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" dataSource="new List<dynamic>()"
                                                          toolbar="@initialToolBar" toolbarClick="defaultToolbarClick" actionBegin="referenceActionBegin" actionComplete="referenceActionComplete"
                                                          allowPaging="true" allowResizing="true">

                                                    <e-grid-columns>
                                                        <e-grid-column field="id" headerText="Id" textAlign="Center" visible="false" isPrimaryKey="true" showInColumnChooser="false"></e-grid-column>
                                                        <e-grid-column field="code" allowEditing="false" headerText="Code" textAlign="Center"></e-grid-column>
                                                        <e-grid-column field="name" allowEditing="false" headerText="Name" textAlign="Center"></e-grid-column>
                                                        @*<e-grid-column field="percentage" allowEditing="true" headerText="Percentage" textAlign="Center"></e-grid-column>*@
                                                        <e-grid-column headerText="Actions" textAlign="Center" commands="referenceCommands"></e-grid-column>
                                                    </e-grid-columns>

                                                    <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                                    <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true"></e-grid-editSettings>
                                                    <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                                    <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                                </ejs-grid>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row m-t-20">
                            <div class="col-lg-12">
                                <input id="submitDEPUnitBtn" type="button" class="btn btn-success btn-block" value="Update Department" required />
                            </div>
                        </div>
                    </div>
                    
                    <div id="positionForm" role="form" class="row areaForm" method="post" data-toggle="validator" style="display: none; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
                        <ejs-tab id="positionFormTabs" animation="ViewBag.animation">
                            <e-tab-tabitems>
                                <e-tab-tabitem header="@(new TabHeader { Text = "General" })" content="#generalPOSDetailsTab"></e-tab-tabitem>
                                <e-tab-tabitem header="@(new TabHeader { Text = "Job Details" })" content="#POSJobDetailsTab"></e-tab-tabitem>
                                <e-tab-tabitem header="@(new TabHeader { Text = "Organization Details" })" content="#POSOrgDetailsTab"></e-tab-tabitem>
                            </e-tab-tabitems>
                        </ejs-tab>
                        <div id="generalPOSDetailsTab" class="areaForm">

                            <div class="row">
                                <div class="col-sm-1">

                                </div>
                                <div class="col-sm-9" style="padding:0">
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-5" style="">
                                                <label class="p-t-5 control-label pull-right ">Type:</label>
                                            </div>
                                            <div class="col-sm-7" style="">
                                                <select id="posType" name="PositionTypeId" class="form-control">
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-5" style="">
                                                <label class="p-t-5 control-label pull-right ">Position Code:</label>
                                            </div>
                                            <div class="col-sm-7" style="">
                                                <input id="posCode" name="Code" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" readonly>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-5" style="">
                                                <label class="p-t-5 control-label pull-right ">Position Name:</label>
                                            </div>
                                            <div class="col-sm-7" style="">
                                                <input id="posName" name="Name" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" readonly>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-5" style="">
                                                <label class="p-t-5 control-label pull-right ">Position Local Name:</label>
                                            </div>
                                            <div class="col-sm-7" style="">
                                                <input id="posNameLocalized" name="NameLocalized" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" readonly>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-5" style="">
                                                <label class="p-t-5 control-label pull-right ">Status:</label>
                                            </div>
                                            <div class="col-sm-7" style="">
                                                <select id="posStatus" name="PositionStatusId" class="form-control">
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-5" style="">
                                                <label class="p-t-5 control-label pull-right ">Validity Start Date:</label>
                                            </div>
                                            <div class="col-sm-7" style="">
                                                <input id="posValidityStart" name="ValidityFromDate" type="date" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-5" style="">
                                                <label class="p-t-5 control-label pull-right ">Validity End Date:</label>
                                            </div>
                                            <div class="col-sm-7" style="">
                                                <input id="posValidityStart" name="ValidityToDate" type="date" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-5" style="">
                                                <label class="p-t-5 control-label pull-right ">Target FTE:</label>
                                            </div>
                                            <div class="col-sm-7" style="">
                                                <input type="number" min="1" value="" id="posTargetFTE" name="TargetFTE" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                            </div>
                                        </div>
                                    </div>


                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-5" style="">
                                                <label class="p-t-5 control-label pull-right ">Capacity Controlled:</label>
                                            </div>
                                            <div class="col-sm-1" style="">
                                                <input type="checkbox" style="max-height: 20px; min-height: 20px; max-width: 20px; min-width: 20px" id="posCapControlled" name="IsCapacityControlled" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-5" style="">
                                                <label class="p-t-5 control-label pull-right ">Multiple Incumbents Allowed:</label>
                                            </div>
                                            <div class="col-sm-1" style="">
                                                <input type="checkbox" style="max-height: 20px; min-height: 20px; max-width: 20px; min-width: 20px" id="posMultipleIncumbentsAllowed" name="IsMultipleIncumbentsAllowed" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-5" style="">
                                                <label class="p-t-5 control-label pull-right ">To Be Bired:</label>
                                            </div>
                                            <div class="col-sm-1" style="">
                                                <input type="checkbox" style="max-height: 20px; min-height: 20px; max-width: 20px; min-width: 20px" id="posToBeHired" name="IsToBeHired" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-5" style="">
                                                <label class="p-t-5 control-label pull-right ">Standard Working Hours:</label>
                                            </div>
                                            <div class="col-sm-7" style="">
                                                <input type="number" min="1" id="posStandardWorkingHours" name="sStandardWorkingHours" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-5" style="">
                                                <label class="p-t-5 control-label pull-right ">Pay Grade:</label>
                                            </div>
                                            <div class="col-sm-7" style="">
                                                <select id="PosPaygrade" name="PayGradeId" class="paygrade form-control">
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-2">

                                </div>
                            </div>
                        </div>
                        <div id="POSJobDetailsTab" class="areaForm" style="display:none">
                            
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="panel-body p-t-0" style="">
                                        <div class="areaHeader" style="display:flex;">
                                            <div id="posJobsLoader" class="pull-left loader-inline" style="display:none"></div>
                                            <div class="areaHeaderTitle">
                                                <span id="areHeadertitle" class="areaHeaderTitleNode menu-text">Jobs</span>
                                            </div>
                                        </div>
                                        <div role="form" id="posJobsForm" class="row areaForm" method="post" data-toggle="validator" style="display: none; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
                                            <div class="row">
                                                <div class="col-sm-1">

                                                </div>
                                                <div class="col-sm-9" style="padding:0">
                                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                                        <div class="form-group" style="padding: 15px">
                                                            <div class="col-sm-5" style="">
                                                                <label class="p-t-5 control-label pull-right ">Job Code:</label>
                                                            </div>
                                                            <div class="col-sm-7" style="">
                                                                <input id="jobCode" name="Code" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" readonly>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                                        <div class="form-group" style="padding: 15px">
                                                            <div class="col-sm-5" style="">
                                                                <label class="p-t-5 control-label pull-right ">Job Title:</label>
                                                            </div>
                                                            <div class="col-sm-7" style="">
                                                                <input id="jobName" name="JobName" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" readonly>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                                        <div class="form-group" style="padding: 15px">
                                                            <div class="col-sm-5" style="">
                                                                <label class="p-t-5 control-label pull-right ">Job Local Title:</label>
                                                            </div>
                                                            <div class="col-sm-7" style="">
                                                                <input id="jobNameLocalized" name="NameLocalized" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" readonly>
                                                            </div>
                                                        </div>
                                                    </div>

                                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                                        <div class="form-group" style="padding: 15px">
                                                            <div class="col-sm-5" style="">
                                                                <label class="p-t-5 control-label pull-right ">Job Level:</label>
                                                            </div>
                                                            <div class="col-sm-7" style="">
                                                                <select id="jobLevel" name="LevelId" class="form-control">
                                                                </select>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                                        <div class="form-group" style="padding: 15px">
                                                            <div class="col-sm-5" style="">
                                                                <label class="p-t-5 control-label pull-right ">Validity Start Date:</label>
                                                            </div>
                                                            <div class="col-sm-7" style="">
                                                                <input id="jobValidityStart" name="ValidityFromDate" type="date" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                                        <div class="form-group" style="padding: 15px">
                                                            <div class="col-sm-5" style="">
                                                                <label class="p-t-5 control-label pull-right ">Validity End Date:</label>
                                                            </div>
                                                            <div class="col-sm-7" style="">
                                                                <input id="jobValidityStart" name="ValidityToDate" type="date" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                                        <div class="form-group" style="padding: 15px">
                                                            <div class="col-sm-5" style="">
                                                                <label class="p-t-5 control-label pull-right ">Contract Type:</label>
                                                            </div>
                                                            <div class="col-sm-7" style="">
                                                                <select id="jobContractType" name="ContractTypeId" class="form-control">
                                                                </select>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                                        <div class="form-group" style="padding: 15px">
                                                            <div class="col-sm-5" style="">
                                                                <label class="p-t-5 control-label pull-right ">Employee Class:</label>
                                                            </div>
                                                            <div class="col-sm-7" style="">
                                                                <select id="jobEmployeeClass" name="EmployeeClassId" class="form-control">
                                                                </select>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-sm-2">

                                                </div>
                                            </div>
                                            <div class="row m-t-20">
                                                <div class="col-lg-12">
                                                    <input id="submitPosJobBtn" type="button" class="btn btn-success btn-block" value="Update Job" required />
                                                </div>
                                            </div>
                                        </div>
                                        <div id="posJobsCS" class="control-section">
                                            <ejs-grid id="PositionJobsDetailsGrid" enableAutoFill="true" dataBound="dataBoundResponsive"
                                                      allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true"
                                                      hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true" commandClick="positionJobsCommandClick"
                                                      allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" dataSource="new List<dynamic>()"
                                                      toolbar="@initialToolBar" toolbarClick="defaultToolbarClick" actionBegin="posJobActionBegin" actionComplete="referenceActionComplete"
                                                      allowPaging="true" allowResizing="true">

                                                @{
                                                    var jobLevelEdit = new
                                                    {
                                                        @@params = new Syncfusion.EJ2.DropDowns.DropDownList() { Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Text = "value", Value = "id" }, DataSource = new List<object>(), Query = "new ej.data.Query()", AllowFiltering = true }
                                                    };
                                                    var jobEmployeeClassEdit = new
                                                    {
                                                        @@params = new Syncfusion.EJ2.DropDowns.DropDownList() { Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Text = "value", Value = "id" }, DataSource = new List<object>(), Query = "new ej.data.Query()", AllowFiltering = true }
                                                    };
                                                    var jobContractypeEdit = new
                                                    {
                                                        @@params = new Syncfusion.EJ2.DropDowns.DropDownList() { Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Text = "value", Value = "id" }, DataSource = new List<object>(), Query = "new ej.data.Query()", AllowFiltering = true }
                                                    };
                                                }

                                                <e-grid-columns>
                                                    <e-grid-column field="jobTemplate.id" headerText="Id" textAlign="Center" visible="false" isPrimaryKey="true" showInColumnChooser="false"></e-grid-column>
                                                    <e-grid-column field="jobTemplate.code" allowEditing="false" headerText="Code" textAlign="Center"></e-grid-column>
                                                    <e-grid-column field="jobTemplate.name" allowEditing="false" headerText="Name" textAlign="Center"></e-grid-column>
                                                    <e-grid-column field="level.value" allowEditing="true" headerText="Job Level" validationRules="@(new { required=true})" edit="jobLevelEdit" editType="dropdownedit" textAlign="Center"></e-grid-column>
                                                    <e-grid-column field="employeeClass.value" allowEditing="true" headerText="Employee Class" validationRules="@(new { required=true})" edit="jobEmployeeClassEdit" editType="dropdownedit" textAlign="Center"></e-grid-column>
                                                    <e-grid-column field="contractType.value" allowEditing="true" headerText="Contract Type" validationRules="@(new { required=true})" edit="jobContractypeEdit" editType="dropdownedit" textAlign="Center"></e-grid-column>
                                                    <e-grid-column headerText="Actions" textAlign="Center" commands="posJobCommands"></e-grid-column>
                                                </e-grid-columns>

                                                <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                                <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true"></e-grid-editSettings>
                                                <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                                <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                            </ejs-grid>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="POSOrgDetailsTab" class="areaForm" style="display:none">
                            <div class="row">
                                <div class="col-sm-1">

                                </div>
                                <div class="col-sm-9" style="padding:0">
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-5" style="">
                                                <label class="p-t-5 control-label pull-right ">Business Unit:</label>
                                            </div>
                                            <div class="col-sm-7" style="">
                                                <input id="jobBU" name="BUName" class="form-control" readonly>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-5" style="">
                                                <label class="p-t-5 control-label pull-right ">Division:</label>
                                            </div>
                                            <div class="col-sm-7" style="">
                                                <input id="jobDIV" name="DivName" class="form-control" readonly>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-5" style="">
                                                <label class="p-t-5 control-label pull-right ">Department:</label>
                                            </div>
                                            <div class="col-sm-7" style="">
                                                <input id="jobDEP" name="DepName" class="form-control" readonly>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-5" style="">
                                                <label class="p-t-5 control-label pull-right ">Cost Center:</label>
                                            </div>
                                            <div class="col-sm-7" style="">
                                                <input id="jobCostCenter" name="CostCenterName" class="form-control" readonly>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-5" style="">
                                                <label class="p-t-5 control-label pull-right ">Location:</label>
                                            </div>
                                            <div class="col-sm-7" style="">
                                                <input id="jobLocation" name="LocName" class="form-control" readonly>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-5" style="">
                                                <label class="p-t-5 control-label pull-right ">Parent Position:</label>
                                            </div>
                                            <div class="col-sm-7" style="">
                                                <input id="jobParent" name="ParentPosName" class="form-control" readonly>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-2">

                                </div>
                            </div>
                        </div>
                        <div class="row m-t-20">
                            <div class="col-lg-12">
                                <input id="submitPOSUnitBtn" type="button" class="btn btn-success btn-block" value="Update Position" required />
                            </div>
                        </div>
                    </div>

                    <ejs-treegrid id="StructureTreeGrid" dataSource="new List<dynamic>()" load="structureLoad" height="380px" rowSelected="structureTreeRowSelected"
                                  toolbarClick="structureToolbarClick" toolbar="@initialStructureToolBar" queryCellInfo="OnStructureQueryCellInfo"
                                  actionBegin="structureTreeActionBegin" actionComplete="structureTreeActionComplete"
                                  idMapping="id" parentIdMapping="parentId" childMapping="Children" treeColumnIndex="1" allowSelection="true" allowResizing="true"
                                  allowRowDragAndDrop="false" rowDeselected="structureTreeRowDeselected">
                        <e-treegrid-selectionsettings type="Multiple"></e-treegrid-selectionsettings>
                        <e-treegrid-editsettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="false"></e-treegrid-editsettings>

                        @{
                            List<string> unitTypes = new List<string>() { "Business Unit", "Division", "Department", "Position" };
                            var typeEdit = new
                            {
                                @@params = new Syncfusion.EJ2.DropDowns.DropDownList() { Change = "loadTypeUnitsDropdown", CssClass = "unitTypeDropDown", BeforeOpen = "loadUnitTypesDropdown", DataSource = unitTypes, Query = "new ej.data.Query()", AllowFiltering = true }
                            };
                            var unitEdit = new
                            {
                                @@params = new Syncfusion.EJ2.DropDowns.DropDownList() { Change = "selectedTypeUnit", Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Text = "name", Value = "id" }, DataSource = new List<object>(), CssClass = "typeUnitDropDown", Query = "new ej.data.Query()", AllowFiltering = true }
                            };

                        }
                        <e-treegrid-columns>
                            <e-treegrid-column textAlign="Center" field="id" isPrimaryKey="true" headerText="Id" visible="false"></e-treegrid-column>
                            <e-treegrid-column validationRules="@(new { required=true})" textAlign="Center" field="type" headerText="Type" edit="typeEdit" editType="dropdownedit"></e-treegrid-column>
                            <e-treegrid-column validationRules="@(new { required=true})" textAlign="Center" field="_unit.name" headerText="Unit Name" edit="unitEdit" editType="dropdownedit"></e-treegrid-column>
                            <e-treegrid-column textAlign="Center" field="_unit.code" headerText="Unit Code" allowEditing="false"></e-treegrid-column>
                            <e-treegrid-column headerText="Validity" textAlign="Center" columns='new List<Syncfusion.EJ2.TreeGrid.TreeGridColumn>() {
                            new Syncfusion.EJ2.TreeGrid.TreeGridColumn() { Field= "_unit.validityFromDate", Type="date", Format="E, MMMM d, y", AllowEditing=false, EditType="datepicker", HeaderText = "From", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center },
                            new Syncfusion.EJ2.TreeGrid.TreeGridColumn() { Field= "_unit.validityToDate", Type="date", Format="E, MMMM d, y", AllowEditing=false, EditType="datepicker", HeaderText = "To", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center }
                        }'></e-treegrid-column>
                            <e-treegrid-column headerText="Actions" textAlign="Center" commands="osTreeCommands"></e-treegrid-column>

                        </e-treegrid-columns>
                    </ejs-treegrid>
                </div>
                <div id="diagramOverviewTab" class="areaForm" style="display:none">
                    <div class="control-section" style="display:none">
                        <div style="width: 100%;height: 10%">
                            @*Initializes ToolBar control.*@
                            @*<ejs-toolbar id="toolbar" clicked="posDGToolbarClick" created="posDGToolbarCreate">
                    <e-toolbar-items>
                        <e-toolbar-item id="Add" tooltipText="Add" prefixIcon="e-icons e-add" text="Add"></e-toolbar-item>
                        <e-toolbar-item type="Separator"></e-toolbar-item>
                        <e-toolbar-item id="Edit" tooltipText="Edit" prefixIcon="e-icons e-update" text="Edit"></e-toolbar-item>
                        <e-toolbar-item type="Separator"></e-toolbar-item>
                        <e-toolbar-item id="Delete" tooltipText="Delete" prefixIcon="e-icons e-delete" text="Delete"></e-toolbar-item>
                        <e-toolbar-item type="Separator"></e-toolbar-item>
                    </e-toolbar-items>
                </ejs-toolbar>*@
                        </div>
                        <div style="width: 100%;height: 80%;border-width: 0 1px 1px 1px; border-style: solid; border-color:#D7D7D7">
                            <div id="diagram-space" class="sb-mobile-diagram">
                                @*Initializes Diagram control.*@
                                <ejs-diagram id="PosManagementDiagram" width="100%" height="550px" selectionChange="selectionChange" sourcePointChange="connectionChange" targetPointChange="connectionChange" getNodeDefaults='"getNodeDefaults"' getConnectorDefaults='"getConnectorDefaults"' created="diagramCreated">
                                    <e-diagram-snapsettings constraints="None"></e-diagram-snapsettings>
                                    <e-diagram-datasourcesettings id="id" parentId="parentId" dataSource="new DataManager() { Data = new List<object>() }"></e-diagram-datasourcesettings>
                                    <e-diagram-layout type="HierarchicalTree" enableAnimation="true" horizontalSpacing="60" verticalSpacing="60"></e-diagram-layout>
                                </ejs-diagram>
                            </div>
                            <ejs-dialog id="editDialog" width="300px" visible="false" isModal="true" showCloseIcon="true">
                                <e-content-template>
                                    <div class="showLabel">
                                        @*Initialize Textbox control*@
                                        <ejs-textbox id="Description" placeholder="Enter Description"></ejs-textbox>
                                    </div>
                                    <div class="showLabel" style="padding-top: 14px">
                                        @*Initialize Textbox control*@
                                        <ejs-textbox id="Color" placeholder="Enter Color"></ejs-textbox>
                                    </div>
                                    <div class="showDropdown">
                                        @*Initialize Dropdownlist control to display an sourceNodes in diagram.*@
                                        <ejs-dropdownlist id="SourceId" placeholder="select sourceId" created="sourceDropdownCreate" popupHeight="220px" change="sourceDropdownChange">
                                            <e-dropdownlist-fields text="Label" value="Name"></e-dropdownlist-fields>
                                        </ejs-dropdownlist>
                                    </div>
                                    <div class="showDropdown" style="padding-top: 14px">
                                        @*Initialize Dropdownlist control to display an targetNodes in diagram.*@
                                        <ejs-dropdownlist id="TargetId" placeholder="select targetId" created="targetDropdownCreate" popupHeight="220px" change="targetDropdownChange">
                                            <e-dropdownlist-fields text="Label" value="Name"></e-dropdownlist-fields>
                                        </ejs-dropdownlist>
                                    </div>
                                </e-content-template>
                                <e-dialog-buttons>
                                    @*Initialize Button control to update the node label and node color.*@
                                    <e-dialog-dialogbutton buttonModel="@(new { content = "Update", isPrimary = true })" click="dlgButtonClick"></e-dialog-dialogbutton>
                                </e-dialog-buttons>
                            </ejs-dialog>
                        </div>
                    </div>
                    <div id="orgChartJs" style="width: 100%; height: 100%">

                    </div>
                </div>
            </div>
            <div class="row m-t-20">
                <div class="col-lg-12">
                    <input id="submitOrganizationStructureBtn" type="button" class="btn btn-success btn-block" value="Create Organization Structure" required />
                </div>
            </div>
        </form>
        <div id="organizationStructuresCS" class="control-section">
            <ejs-grid id="OrganizationStructuresGrid" enableAutoFill="true" dataBound="dataBoundResponsive" commandClick="commandClick"
                      showColumnChooser="true" allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true"
                      hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true" actionBegin="organizationStructureActionBegin" actionComplete="organizationStructureActionComplete"
                      allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" allowTextWrap="true" textWrapSettings="@(new Syncfusion.EJ2.Grids.GridTextWrapSettings() { WrapMode = Syncfusion.EJ2.Grids.WrapMode.Header })"
                      toolbarClick="toolbarClick" toolbar="@initialToolBar" queryCellInfo="OnStructureQueryCellInfo"
                      allowPaging="true" allowResizing="true" dataSource="new List<dynamic>()">

                <e-grid-columns>
                    <e-grid-column field="id" headerText="Id" textAlign="Center" visible="false" isPrimaryKey="true" showInColumnChooser="false"></e-grid-column>
                    <e-grid-column headerText="Name" textAlign="Center" columns='new List<Syncfusion.EJ2.Grids.GridColumn>() {
                        new Syncfusion.EJ2.Grids.GridColumn() { Field= "name", HeaderText = "English", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center },
                        new Syncfusion.EJ2.Grids.GridColumn() { Field= "nameLocalized", HeaderText = "Local", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center }
                    }'></e-grid-column>
                    <e-grid-column field="code" headerText="Code" textAlign="Center"></e-grid-column>
                    @*<e-grid-column field="organizationStructureHead.name" headerText="Head" textAlign="Center"></e-grid-column>*@
                    <e-grid-column field="reviewPeriodDescription" headerText="Review period" textAlign="Center"></e-grid-column>
                    <e-grid-column headerText="Validity" textAlign="Center" columns='new List<Syncfusion.EJ2.Grids.GridColumn>() {
                        new Syncfusion.EJ2.Grids.GridColumn() { Field= "validityFromDate", Type="date", Format="E, MMMM d, y", AllowEditing=true, EditType="datepicker", HeaderText = "From", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center },
                        new Syncfusion.EJ2.Grids.GridColumn() { Field= "validityToDate", Type="date", Format="E, MMMM d, y", AllowEditing=true, EditType="datepicker", HeaderText = "To", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center }
                    }'></e-grid-column>

                    <e-grid-column headerText="Actions" textAlign="Center" commands="organizationStructuresCommands"></e-grid-column>
                </e-grid-columns>

                <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="false"></e-grid-editSettings>
                <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
            </ejs-grid>
        </div>

        <div id="auditTrail" style="display:none;">
            <partial name="_DataAuditTrailPartialView" model="@Model.GetDataAuditTrailModel()" />
        </div>
    </div>

</div>
<ejs-dialog id="alert_dialog" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy with Header" content="Atleast one row should be selected to copy with header">
    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
    </e-dialog-buttons>
</ejs-dialog>
<ejs-dialog id="alert_dialog_1" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy" content="Atleast one row should be selected to copy">
    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
    </e-dialog-buttons>
</ejs-dialog>

<script>
    function diagramCreated() {

    }
    function getNodeDefaults(obj, data, diagram) {
        //Initialize shape
        console.log("Started");
        console.log(obj);
        console.log(data);
        let unitType = obj.data.unit.unitType;
        let widthConst = 3;
        if (unitType == 'Business Unit') {
            obj.annotations = [{
                /* tslint:disable:no-string-literal */
                content: obj.data.unit.name, margin: { top: 10, left: 10, right: 10, bottom: 10 },
                style: { color: 'black' }
            }];
            obj.style = {
                fill: '#20cde8', strokeColor: '#22b3c9', strokeWidth: 3
            };
            obj.shape = {
                type: 'Basic', shape: 'Rectangle'
            };
            obj.width = 80 + widthConst * obj.data.unit.name.length;
            obj.height = 60;
        }
        else if (unitType == 'Division') {
            obj.annotations = [{
                /* tslint:disable:no-string-literal */
                content: obj.data.unit.name, margin: { top: 10, left: 10, right: 10, bottom: 10 },
                style: { color: 'black', size: 20 }
            }];
            obj.style = {
                fill: '#ded11d', strokeColor: '#c7bb1c', strokeWidth: 2
            };
            obj.shape = {
                type: 'Basic', shape: 'Rectangle'
            };
            obj.width = 65 + widthConst * obj.data.unit.name.length;
            obj.height = 45;
        }
        else if (unitType == 'Department') {
            obj.annotations = [{
                /* tslint:disable:no-string-literal */
                content: obj.data.unit.name, margin: { top: 10, left: 10, right: 10, bottom: 10 },
                style: { color: 'black' }
            }];
            obj.style = {
                fill: '#f0b01d', strokeColor: '#d69e1c', strokeWidth: 1
            };
            obj.shape = {
                type: 'Basic', shape: 'Rectangle'
            };
            obj.width = 60 + widthConst * obj.data.unit.name.length;
            obj.height = 40;
        }
        else if (unitType == 'Position') {
            obj.annotations = [{
                /* tslint:disable:no-string-literal */
                content: obj.data.unit.name, margin: { top: 10, left: 10, right: 10, bottom: 10 },
                style: { color: 'black' }
            }];
            obj.style = {
                fill: '#28eb83', strokeColor: '#22c970', strokeWidth: 1
            };
            obj.shape = {
                type: 'Basic', shape: 'Rectangle'
            };
            obj.width = 60 + widthConst * obj.data.unit.name.length;
            obj.height = 40;
        }

        return obj;
    }
    function getConnectorDefaults(connector, diagram) {
        connector.type = 'Orthogonal';
        connector.style.fill = '#707070';
        connector.style.strokeColor = '#707070';
        connector.targetDecorator = {
            style: {
                strokeColor: '#707070',
                fill: '#707070'
            },
        };
        return connector;
    }

    function osSpecificTabSelected(args) {
        console.log(args);
        let structureTG = $('#StructureTreeGrid')[0].ej2_instances[0];
        let posManDG = $('#PosManagementDiagram')[0].ej2_instances[0];
        if (args.selectedIndex == 1) {
            let ds = structureTG.dataSource;
            if (ds) {
                //let diagramDS = [];
                //for (var i = 0; i < ds.length; i++) {
                //    let node = { id: ds[i].id, unit: ds[i]._unit };
                //    if (ds[i].parentId)
                //        node.parentId = ds[i].parentId;
                //    diagramDS.push(node);

                //}
                //posManDG.nodes = [];
                //posManDG.connectors = [];
                //posManDG.dataSourceSettings.dataSource.dataSource.data = diagramDS;
                //posManDG.refresh();
                let diagramDS = {};
                let indegree0 = ds.filter(function (x) { return typeof x.parentId == 'undefined' || x.parentId == null });
                for (var i = 0; i < indegree0.length; i++) {
                    let curNode = indegree0[i];
                    if (i == 0) {
                        diagramDS = {
                            id: curNode.id,
                            type: curNode._unit.unitType,
                            name: curNode._unit.name,
                            children: []
                        };
                    }

                    let children = getAllChildren(ds, curNode);
                    diagramDS.children = children;
                }
                $ocJs.init({ pan: true, parentNodeSymbol: '', data: diagramDS, nodeTitle: 'type', nodeContent: 'name' });
            }
            console.log(ds);
        }
    }

    var diagram;
    var dialog;
    var toolbarObj;
    var sourceDropdown;
    var targetDropdown;
    var sourceID;
    var targetID;
    var nodeData = [];
    @* custom code start *@
    function dlgButtonClick(args) {
        diagram = document.getElementById('PosManagementDiagram').ej2_instances[0];
        dialog = document.getElementById("editDialog").ej2_instances[0];

        var dialogHeader = dialog.header;

        var description = document.getElementById("Description").value;
        var color = document.getElementById("Color").value;

        var selectedItem;
        if (diagram.selectedItems.nodes.length > 0) {
            selectedItem = diagram.selectedItems.nodes[0];
        }
        if (diagram.selectedItems.connectors.length > 0) {
            selectedItem = diagram.selectedItems.connectors[0];
        }

        //Add new node and connector in diagram at runtime.
        if (dialogHeader === "Add") {
            var node = {
                id: 'node' + ej.diagrams.randomId(), style: { fill: color },
                data: { id: Math.floor((Math.random() * 1000)), unit: { name: description, unitType: 'Position' }, type: 'Position', parentId: selectedItem.data.id }
            };
            var connector = {
                id: 'connector' + ej.diagrams.randomId(), sourceID: selectedItem.id, targetID: node.id, Id: Math.floor((Math.random() * 1000) + 100),
            };
            diagram.add(node);
            diagram.add(connector);
            diagram.doLayout();
            //Insert newly added elements into the database.
            //diagram.insertData();
            //nodeData.push({ Name: node.id, Label: description });
        }
        else {
            if (selectedItem instanceof ej.diagrams.Connector) {
                //Update sourceNode and targetNode at runtime.
                selectedItem.sourceID = sourceID ? sourceID : selectedItem.sourceID;
                selectedItem.targetID = targetID ? targetID : selectedItem.targetID;
                diagram.dataBind();
                diagram.doLayout();
            }
            else {
                //update an node text and node bgColor.
                selectedItem.Description = description;
                selectedItem.Color = color;
                selectedItem.annotations[0].content = description;
                selectedItem.style.fill = color;
                diagram.dataBind();
            }
            //diagram.updateData();
        }
        dialog.hide();
    };
    @* custom code start *@
        //Displays nodes name in dropdown.
    function sourceDropdownCreate(args) {
        var sourceDropdown = document.getElementById('SourceId').ej2_instances[0];
        sourceDropdown.dataSource = getDataSource();
        sourceDropdown.dataBind();
    }

    //Displays nodes name in dropdown.
    function targetDropdownCreate(args) {
        var targetDropdown = document.getElementById('TargetId').ej2_instances[0];
        targetDropdown.dataSource = getDataSource();
        targetDropdown.dataBind();
    }

    //Set an sourceId of an selected Connector.
    function sourceDropdownChange(args) {
        sourceID = args.value;
    }

    //Set an targetId of an selected Connector.
    function targetDropdownChange(args) {
        targetID = args.value;
    }
    function posDGToolbarCreate(args) {
        enableToolbarItems(false);
    }
    @* custom code end *@
    //Disable or Enable the toolbar items based on element selection.
    function selectionChange(args) {
        console.log(args);
        if (args.state === 'Changing') {
            toolbarObj = document.getElementById("toolbar").ej2_instances[0];
            if (args.newValue.length > 0) {
                if (args.newValue[0] instanceof ej.diagrams.Node) {
                    if (args.newValue.length == 1) {
                        if (args.newValue[0].properties.data.unit.unitType != 'Position') {
                            toolbarObj.enableItems(document.getElementById(toolbarObj.items[0].id).parentElement, true);
                            toolbarObj.enableItems(document.getElementById(toolbarObj.items[2].id).parentElement, false);
                            toolbarObj.enableItems(document.getElementById(toolbarObj.items[4].id).parentElement, false);
                        }
                        else
                            enableToolbarItems(true);
                    }
                    else
                        enableToolbarItems(false);

                }
                else {
                    toolbarObj.enableItems(document.getElementById(toolbarObj.items[0].id).parentElement, false);
                    toolbarObj.enableItems(document.getElementById(toolbarObj.items[2].id).parentElement, true);
                    toolbarObj.enableItems(document.getElementById(toolbarObj.items[4].id).parentElement, false);
                }
            }
            else {
                enableToolbarItems(false);
            }
        }
    }
    @* custom code start *@
    //Enable or disable the toolbar items.
    function enableToolbarItems(isEnableItem) {
        toolbarObj = document.getElementById("toolbar").ej2_instances[0];
        toolbarObj.enableItems(document.getElementById(toolbarObj.items[0].id).parentElement, isEnableItem);
        toolbarObj.enableItems(document.getElementById(toolbarObj.items[2].id).parentElement, isEnableItem);
        toolbarObj.enableItems(document.getElementById(toolbarObj.items[4].id).parentElement, isEnableItem);
    }
    @* custom code end *@
    function connectionChange(args) {
            if (args.state === 'Completed') {
                if (!args.connector.targetID || !args.connector.sourceID) {
                    args.cancel = true;
                }
            }
        }

    //Set an label for each node.
    function setNodeTemplate(obj) {
        obj.annotations = [{ style: { color: 'black' } }];
        obj.annotations[0].content = obj.Description;
        obj.style = { fill: obj.Color };
        if (obj.Id === 1) {
            //Restrict Delete Constraints for root node.
            obj.constraints = ej.diagrams.NodeConstraints.Default & ~ej.diagrams.NodeConstraints.Delete;
        }
    }
    @* custom code start *@
        //Opens a dialog with textbox and dropdown control based on toolbar clicked items.
    function posDGToolbarClick(args) {
        diagram = document.getElementById('PosManagementDiagram').ej2_instances[0];
        var selectedItem;
        if (diagram.selectedItems.nodes.length > 0) {
            selectedItem = diagram.selectedItems.nodes[0];
        }
        if (diagram.selectedItems.connectors.length > 0) {
            selectedItem = diagram.selectedItems.connectors[0];
        }
        if (selectedItem) {
            switch (args.item.tooltipText) {
                case 'Add':
                    openDialog("Add", "", "", true);
                    break;
                case 'Edit':
                    if (selectedItem instanceof ej.diagrams.Connector) {
                        var sourceNode = diagram.getObject(selectedItem.sourceID);
                        var targetNode = diagram.getObject(selectedItem.targetID);
                        openDialog("Edit", sourceNode.Description, targetNode.Description, false);
                    }
                    else {
                        openDialog("Edit", selectedItem.Description, selectedItem.Color, true);
                    }
                    break;
                case 'Delete':
                    diagram.remove(selectedItem);
                    diagram.doLayout();
                    diagram.removeData();
                    var element = { Name: selectedItem.id, Label: selectedItem.Description };
                    var index = nodeData.indexOf(element);
                    nodeData.splice(index, 1);
            }
        }
    }

    //Show or Hide the Textbox and Dropdown in dialog control
    function hideClassElement(className, display) {
        var i;
        var showDropdown = document.querySelectorAll(className);
        for (i = 0; i < showDropdown.length; i++) {
            showDropdown[i].style.display = display;
        }
    }

    function openDialog(title, description, color, isNode) {
        dialog = document.getElementById("editDialog").ej2_instances[0];
        dialog.header = title;
        if (isNode) {
            hideClassElement('.showDropdown', 'none');
            hideClassElement('.showLabel', 'block');
            document.getElementById("Description").value = description;
            document.getElementById("Color").value = color;
        }
        else {
            hideClassElement('.showDropdown', 'block');
            hideClassElement('.showLabel', 'none');
            document.getElementById("SourceId").value = description;
            document.getElementById("TargetId").value = color;
        }
        dialog.show();
    }
    @* custom code end *@
        //Returns an node text collection in diagram.
    function getDataSource() {
        diagram = document.getElementById('PosManagementDiagram').ej2_instances[0];
            var i;
            nodeData = [];
            for (i = 0; i < diagram.nodes.length; i++) {
                var node = diagram.nodes[i];
                var element = { Name: node.id, Label: node.Description };
                nodeData.push(element);
            }
            return nodeData;
        }

    let curSelectedRow;
    function structureLoad() {
        this.columns[5].commands[0].buttonOption.click = function (args) {     //click event for custom command button
            var treeGrid = document.getElementById('StructureTreeGrid').ej2_instances[0];  // treegrid instance
            var rowObj = treeGrid.grid.getRowObjectFromUID(ej.base.closest(args.target, '.e-row').getAttribute('data-uid'));
            let unitType = rowObj.data.type;
            $('#osFormsHeader').slideUp(100);
            setTimeout(function () {
                $('#osFormsHeader').slideDown(100);
                console.log(rowObj.data);
                $('#osFormsHeader').find('#areaHeaderValue').text(rowObj.data._unit.name);
            }, 100);

            isEditingUnit = true;
            curUnitEditRow = rowObj.data;
            switch (unitType) {
                case "Business Unit":
                    $('#osFormsHeader').find('#areaHeadertitle').text('Business Unit');

                    FillFormByObject(curUnitEditRow._unit, $('#businessUnitForm'));
                    if (curUnitEditRow._unit.unitDetails)
                        FillFormByObject(curUnitEditRow._unit.unitDetails, $('#businessUnitForm'));

                    try {
                        if (curUnitEditRow._unit.unitDetails) {
                            buCostCentersGrid.dataSource = rfdc()(curUnitEditRow._unit.unitDetails.costCenters);
                        }
                        else {
                            buCostCentersGrid.dataSource = rfdc()(curUnitEditRow._unit.buCostCenterTemplates.map(function (x) { return { percentage: x.percentage, ...x.costCenter} }));
                        }
                        buCostCentersGrid.refresh();

                        buPositionsGrid.dataSource = rfdc()(curUnitEditRow._unit.unitDetails.associations.positions);
                        buPositionsGrid.refresh();

                    } catch (e) {

                    }

                    $('#businessUnitForm').slideDown();
                    $('#divisionForm').slideUp();
                    $('#departmentForm').slideUp();
                    $('#positionForm').slideUp();
                    break;
                case "Division":
                    $('#osFormsHeader').find('#areaHeadertitle').text('Division');

                    FillFormByObject(curUnitEditRow._unit, $('#divisionForm'));
                    if (curUnitEditRow._unit.unitDetails)
                        FillFormByObject(curUnitEditRow._unit.unitDetails, $('#divisionForm'));


                    try {
                        if (curUnitEditRow._unit.unitDetails) {
                            divCostCentersGrid.dataSource = rfdc()(curUnitEditRow._unit.unitDetails.costCenters);
                        }
                        else {
                            divCostCentersGrid.dataSource = rfdc()(curUnitEditRow._unit.divisionCostCenterTemplates.map(function (x) { return { percentage: x.percentage, ...x.costCenter} }));
                        }
                        divCostCentersGrid.refresh();

                        divPositionsGrid.dataSource = rfdc()(curUnitEditRow._unit.unitDetails.associations.positions);
                        divPositionsGrid.refresh();

                    } catch (e) {

                    }

                    $('#divisionForm').slideDown();
                    $('#departmentForm').slideUp();
                    $('#businessUnitForm').slideUp();
                    $('#positionForm').slideUp();
                    break;
                case "Department":
                    $('#osFormsHeader').find('#areaHeadertitle').text('Department');

                    FillFormByObject(curUnitEditRow._unit, $('#departmentForm'));
                    if (curUnitEditRow._unit.unitDetails)
                        FillFormByObject(curUnitEditRow._unit.unitDetails, $('#departmentForm'));

                    try {
                        if (curUnitEditRow._unit.unitDetails) {
                            depCostCentersGrid.dataSource = rfdc()(curUnitEditRow._unit.unitDetails.costCenters);
                        }
                        else {
                            depCostCentersGrid.dataSource = rfdc()(curUnitEditRow._unit.departmentCostCenterTemplates.map(function (x) { return { percentage: x.percentage, ...x.costCenter} }));
                        }
                        depCostCentersGrid.refresh();

                        depPositionsGrid.dataSource = rfdc()(curUnitEditRow._unit.unitDetails.associations.positions);
                        depPositionsGrid.refresh();

                    } catch (e) {

                    }

                    $('#departmentForm').slideDown();
                    $('#divisionForm').slideUp();
                    $('#businessUnitForm').slideUp();
                    $('#positionForm').slideUp();
                    break;
                case "Position":
                    $('#osFormsHeader').find('#areaHeadertitle').text('Position');

                    let posVM;
                    if (curUnitEditRow._unit) {
                        if (curUnitEditRow._unit.unitDetails) {
                            posVM = {
                                generalDetails: { ...posVM, ...curUnitEditRow._unit.unitDetails.generalDetails }
                            };
                            if (curUnitEditRow._unit.unitDetails.jobDetails)
                                posVM.jobDetails = [...curUnitEditRow._unit.unitDetails.jobDetails];
                            if (curUnitEditRow._unit.unitDetails.orgDetails)
                                posVM.orgDetails = { ...curUnitEditRow._unit.unitDetails.orgDetails };
                            else {
                                let bu;
                                let div;
                                let dep;
                                let pos;
                                let loc;

                                let curLevel = -1;
                                let curLevelObj = curUnitEditRow.parentItem;
                                while (curLevel != 0) {
                                    if (curLevelObj) {
                                        let type = curLevelObj.type;
                                        switch (type) {
                                            case "Business Unit":
                                                bu = curLevelObj;
                                                break;
                                            case "Division":
                                                div = curLevelObj;
                                                break;
                                            case "Department":
                                                if(!dep) dep = curLevelObj;
                                                break;
                                            case "Position":
                                                if(!pos) pos = curLevelObj;
                                                break;
                                        }
                                        curLevel = curLevelObj.level;
                                        if (curLevelObj.parentItem) {
                                            curLevelObj = curLevelObj.parentItem;
                                        }
                                    }
                                    else
                                        break;
                                }

                                posVM.orgDetails = {};
                                if (bu) {
                                    posVM.orgDetails.buName = bu._unit.name;
                                    console.log(bu);
                                    let loc = buLocations.filter(function (x) { return x.location.id == bu._unit.unitDetails.BULocationId })[0];
                                    console.log(loc);
                                    posVM.orgDetails.LocName = loc.location.locationCode + ' - ' + loc.location.locationName;
                                }                                if (div) posVM.orgDetails.divName = div._unit.name;
                                if (dep) posVM.orgDetails.depName = dep._unit.name;
                                if (pos) posVM.orgDetails.parentPosName = pos._unit.name;
                            }
                        }
                        else {
                            let bu;
                            let div;
                            let dep;
                            let pos;
                            let loc;

                            let curLevel = -1; 
                            let curLevelObj = curUnitEditRow.parentItem;
                            while (curLevel != 0) {
                                if (curLevelObj) {
                                    let type = curLevelObj.type;
                                    switch (type) {
                                        case "Business Unit":
                                            bu = curLevelObj;
                                            break;
                                        case "Division":
                                            div = curLevelObj;
                                            break;
                                        case "Department":
                                            dep = curLevelObj;
                                            break;
                                        case "Position":
                                            pos = curLevelObj;
                                            break;
                                    }
                                    curLevel = curLevelObj.level;
                                    if (curLevelObj.parentItem) {
                                        curLevelObj = curLevelObj.parentItem;
                                    }
                                }
                                else
                                    break;
                            }

                            posVM = {
                                generalDetails: { ...curUnitEditRow._unit },
                            };
                            posVM.orgDetails = { };
                            if (bu) {
                                posVM.orgDetails.buName = bu._unit.name;
                                console.log(bu);
                                let loc = buLocations.filter(function (x) { return x.location.id == bu._unit.unitDetails.BULocationId })[0];
                                console.log(loc);
                                posVM.orgDetails.LocName = loc.location.locationCode + ' - ' + loc.location.locationName;
                            }
                            if (div) posVM.orgDetails.divName = div._unit.name;
                            if (dep) posVM.orgDetails.depName = dep._unit.name;
                            if (pos) posVM.orgDetails.parentPosName = pos._unit.name;

                            posVM.jobDetails = [];
                            for (var i = 0; i < curUnitEditRow._unit.positionJobTemplates.length; i++) {
                                posVM.jobDetails.push({ ...curUnitEditRow._unit.positionJobTemplates[i] });
                            }
                            console.log(posVM);
                        }
                    }

                    console.log("posVM");
                    console.log(posVM);

                    ClearForm($('#positionForm'));
                    if (posVM) {
                        FillFormByObject(posVM.generalDetails, $('#generalPOSDetailsTab'));
                        if (posVM.jobDetails) {
                            //FillFormByObject(posVM.jobDetails, $('#POSJobDetailsTab'));
                            posJobGrid.dataSource = posVM.jobDetails;
                            posJobGrid.refresh();
                        }
                        if (posVM.orgDetails)
                            FillFormByObject(posVM.orgDetails, $('#POSOrgDetailsTab'));
                    }

                    //try {
                    //    depCostCentersGrid.dataSource = rfdc()(curUnitEditRow._unit.unitDetails.costCenters);
                    //    depCostCentersGrid.refresh();

                    //    depPositionsGrid.dataSource = rfdc()(curUnitEditRow._unit.unitDetails.associations.positions);
                    //    depPositionsGrid.refresh();

                    //} catch (e) {

                    //}

                    $('#positionForm').slideDown();
                    $('#departmentForm').slideUp();
                    $('#divisionForm').slideUp();
                    $('#businessUnitForm').slideUp();
                    break;
            }
        }
    }
    function selectedTypeUnit() {
        let curType = this.itemData.unitType;
        console.log(curType);
        if (curType == "Department") {
            usedDepartments.push(this.itemData);
        }
        else if (curType == "Division") {
            usedDivisions.push(this.itemData);
        }
        else if (curType == "Business Unit") {
            usedBusinessUnits.push(this.itemData);
        }
        else if (curType == "Position") {
            if (curSelectedRow) {
                if (curSelectedRow.type == 'Position') {

                    let curLevelObj = curSelectedRow.parentItem;
                    while (curLevelObj.type == 'Position') {
                        if (curLevelObj) {
                            let type = curLevelObj.type;
                            switch (type) {
                                case "Business Unit":
                                    bu = curLevelObj;
                                    break;
                                case "Division":
                                    div = curLevelObj;
                                    break;
                                case "Department":
                                    dep = curLevelObj;
                                    break;
                                case "Position":
                                    pos = curLevelObj;
                                    break;
                            }
                            if (curLevelObj.parentItem) {
                                curLevelObj = curLevelObj.parentItem;
                            }
                        }
                        else
                            break;
                    }

                    if (curSelectedRow._unit.subPositions)
                        curSelectedRow._unit.subPositions.push(this.itemData);
                    else {
                        curSelectedRow._unit.subPositions = [this.itemData];
                    }

                    curLevelObj._unit.unitDetails.associations.usedPositions.push(this.itemData);
                } else {
                    if (typeof curSelectedRow._unit.unitDetails.associations.usedPositions == 'undefined') {
                        curSelectedRow._unit.unitDetails.associations.usedPositions = [this.itemData];
                    }
                    else {
                        curSelectedRow._unit.unitDetails.associations.usedPositions.push(this.itemData);
                    }
                }
            }
        }
    }
    function getUnitLevel(type) {
        switch (type) {
            case "Business Unit":
                return 0;
            case "Division":
                return 1;
            case "Department":
                return 2;
            case "Position":
                return 3;
        }
    }
    
    function posJobActionBegin(args) {
        if (args.requestType == "save") {
            console.log('tre');
            console.log(args);

            args.data.level = posJobLevels.filter(function (x) { return x.id == args.data.level.value })[0];
            args.data.employeeClass = posJobEmployeeClasses.filter(function (x) { return x.id == args.data.employeeClass.value })[0];
            args.data.contractType = posJobContractTypes.filter(function (x) { return x.id == args.data.contractType.value })[0];

            console.log("--fsd--");
            //curSelectedRow = undefined;
            //else
            //    
        }

    }
    function structureTreeActionBegin(args) {
        console.log(args);
        if (args.requestType == "add") {
            curSelectedRow = this.getSelectedRecords()[0];
            console.log('-----');
            console.log(curSelectedRow);
        }
        else if (args.requestType == "edit") {
            
        }
        else if (args.requestType == "save") {
            let curType = args.data.type;

            if (typeof curSelectedRow !== 'undefined') {
                args.cancel = true;
                if (getUnitLevel(curType) < getUnitLevel(curSelectedRow.type)) {

                    this.refresh();
                }
                else if (getUnitLevel(curType) == getUnitLevel(curSelectedRow.type) && curSelectedRow.type != "Department" && curSelectedRow.type != "Position") {
                    this.refresh();
                }
                else
                {
                    args.cancel = false;
                    args.data.parentId = curSelectedRow.id;

                    this.refresh();
                }
            }

            if (curType == "Department") {
                args.data._unit = usedDepartments.filter(function (x) { return x.id == args.data._unit.name })[0];
            }
            else if (curType == "Division") {
                args.data._unit = usedDivisions.filter(function (x) { return x.id == args.data._unit.name })[0];
            }
            else if (curType == "Business Unit") {
                args.data._unit = usedBusinessUnits.filter(function (x) { return x.id == args.data._unit.name })[0];
            }
            else if (curType == "Position" && typeof curSelectedRow !== 'undefined') {
                if (curSelectedRow.type == 'Position') {
                    args.data._unit = curSelectedRow._unit.subPositions.filter(function (x) { return x.id == args.data._unit.name })[0];
                } else {
                    args.data._unit = curSelectedRow._unit.unitDetails.associations.usedPositions.filter(function (x) { return x.id == args.data._unit.name })[0];

                }
            }

            args.data.id = this.dataSource.length + 1;

            console.log("----");
            console.log(curSelectedRow);
            //curSelectedRow = undefined;
            //else
            //    
        }
    }

    let emptyTGDS = false;
    function structureTreeActionComplete(args) {
        console.log(args);
        if (args.requestType == "add") {

        }
        else if (args.requestType == "save") {
            if (emptyTGDS && this.dataSource.length > 0) {
                this.dataSource = [this.dataSource[0]];
                emptyTGDS = false;
            }
            let ds = ($("#StructureTreeGrid")[0].ej2_instances[0].dataSource);
            console.log('this.dataSource');
            console.log(this.dataSource);
            this.dataSource = [];
            this.dataSource = ds;
            console.log(ds);
            //this.refresh();

            //curSelectedRow = undefined;
        }
    }
    function structureTreeRowSelected(args) {
        //console.log(args);
        //curSelectedRow = args.data;
    }
    function structureTreeRowDeselected(args) {
        //console.log(args);
        //curSelectedRow = undefined;
    }
    function OnStructureQueryCellInfo(args) {
        //if (args.column.field == "unit") {
        //    let curType = args.data.type;
        //    console.log(curType);
        //    if (curType == "Department") {
        //    if (curType == "Department") {
        //        for (var i = 0; i < usedDepartments.length; i++) {

        //            if (args.data.unit == usedDepartments[i].id) {
        //                args.cell.innerText = usedDepartments[i].name; // assign the foreignkey field value to the innertext
        //            }

        //        }
        //    }
        //    else if (curType == "Business Unit") {
        //        for (var i = 0; i < usedBusinessUnits.length; i++) {

        //            if (args.data.unit == usedBusinessUnits[i].id) {
        //                args.cell.innerText = usedBusinessUnits[i].name; // assign the foreignkey field value to the innertext
        //            }

        //        }
        //    }
        //    else if (curType == "Division") {
        //        for (var i = 0; i < usedDivisions.length; i++) {

        //            if (args.data.unit == usedDivisions[i].id) {
        //                args.cell.innerText = usedDivisions[i].name; // assign the foreignkey field value to the innertext
        //            }

        //        }
        //    }
        //}
        //if (args.column.field == "code") {
        //    let curType = args.data.type;
        //    if (curType == "Department") {
        //        for (var i = 0; i < usedDepartments.length; i++) {

        //            if (args.data.unit == usedDepartments[i].id) {
        //                args.cell.innerText = usedDepartments[i].code; // assign the foreignkey field value to the innertext
        //            }

        //        }
        //    }
        //    else if (curType == "Business Unit") {
        //        for (var i = 0; i < usedBusinessUnits.length; i++) {

        //            if (args.data.unit == usedBusinessUnits[i].id) {
        //                args.cell.innerText = usedBusinessUnits[i].code; // assign the foreignkey field value to the innertext
        //            }

        //        }
        //    }
        //    else if (curType == "Division") {
        //        for (var i = 0; i < usedDivisions.length; i++) {

        //            if (args.data.unit == usedDivisions[i].id) {
        //                args.cell.innerText = usedDivisions[i].code; // assign the foreignkey field value to the innertext
        //            }

        //        }
        //    }
        //}
        console.log(args.column.field);
        if (args.data.type == 'Position') {
            if (args.column.field == "_unit.validityFromDate") {
                if (args.data._unit.unitDetails) {
                    args.cell.innerText = args.data._unit.unitDetails.generalDetails.ValidityFromDate; // assign the foreignkey field value to the innertext
                }
                else
                    args.cell.innerText = args.data._unit.validityFromDate; // assign the foreignkey field value to the innertext
            }

            if (args.column.field == "_unit.validityToDate") {
                if (args.data._unit.unitDetails) {
                    args.cell.innerText = args.data._unit.unitDetails.generalDetails.ValidityToDate; // assign the foreignkey field value to the innertext
                }
                else
                    args.cell.innerText = args.data._unit.validityToDate; // assign the foreignkey field value to the innertext
            }
        }
        else {
            if (args.column.field == "_unit.validityFromDate") {
                if (args.data._unit.unitDetails) {
                    args.cell.innerText = args.data._unit.unitDetails.ValidityFromDate; // assign the foreignkey field value to the innertext
                }
                else
                    args.cell.innerText = args.data._unit.validityFromDate; // assign the foreignkey field value to the innertext
            }

            if (args.column.field == "_unit.validityToDate") {
                if (args.data._unit.unitDetails) {
                    args.cell.innerText = args.data._unit.unitDetails.ValidityToDate; // assign the foreignkey field value to the innertext
                }
                else
                    args.cell.innerText = args.data._unit.validityToDate; // assign the foreignkey field value to the innertext
            }
        }

    }

    function getUnusedDepartments() {
        return departments.filter(function (x) { return usedDepartments.filter(function (y) { return y.id == x.id }).length == 0 });
    }
    function getUnusedDivisions() {
        return divisions.filter(function (x) { return usedDivisions.filter(function (y) { return y.id == x.id }).length == 0 });
    }
    function getUnusedBusinessUnits() {
        return businessUnits.filter(function (x) { return usedBusinessUnits.filter(function (y) { return y.id == x.id }).length == 0 });
    }
    function getUnusedPositions(unitRow) {
        console.log('getUnusedPositions');
        try {
            console.log(unitRow);
            let positions = [];
            if (unitRow.type == 'Position') {
                let curLevelObj = unitRow.parentItem;
                while (curLevelObj.type == 'Position') {
                    if (curLevelObj.parentItem) {
                        curLevelObj = curLevelObj.parentItem;
                    }
                }
                positions = curLevelObj._unit.unitDetails.associations.positions;
                console.log(curLevelObj);

                if (typeof positions !== 'undefined' && positions.length > 0 && typeof curLevelObj._unit.unitDetails.associations.usedPositions !== 'undefined' && curLevelObj._unit.unitDetails.associations.usedPositions.length > 0) {
                    positions = positions.filter(function (x) { return curLevelObj._unit.unitDetails.associations.usedPositions.filter(function (y) { return y.id == x.id; }).length == 0 });
                }
            }
            else {
                positions = unitRow._unit.unitDetails.associations.positions;

                if (typeof positions !== 'undefined' && positions.length > 0 && typeof unitRow._unit.unitDetails.associations.usedPositions !== 'undefined' && unitRow._unit.unitDetails.associations.usedPositions.length > 0) {
                    positions = positions.filter(function (x) { return unitRow._unit.unitDetails.associations.usedPositions.filter(function (y) { return y.id == x.id; }).length == 0 });
                }
            }

            for (var i = 0; i < positions.length; i++) {
                positions[i].unitType = 'Position';
            }

            console.log(positions);

            return positions;
        }
        catch (ex) {
            console.log(ex);
        }
    }

    function loadTypeUnitsDropdown() {
        console.log(this);
        let structureGrid = $('#StructureTreeGrid')[0].ej2_instances[0];
        if (this.itemData == "Division") {
            structureGrid.columns[2].edit.params.dataSource = getUnusedDivisions();
        }
        else if (this.itemData == "Department") {
            structureGrid.columns[2].edit.params.dataSource = getUnusedDepartments();
        }
        else if (this.itemData == "Business Unit") {
            structureGrid.columns[2].edit.params.dataSource = getUnusedBusinessUnits();
        }
        else if (this.itemData == "Position") {
            structureGrid.columns[2].edit.params.dataSource = getUnusedPositions(curSelectedRow);
        }

        console.log(structureGrid.columns[2].edit);
        $('#StructureTreeGrid_gridcontrol_unit___name')[0].ej2_instances[0].dataSource = structureGrid.columns[2].edit.params.dataSource;
    }
    function loadUnitTypesDropdown() {

    }
    let isAuditTrail = false;
    function alertBtnClick() {
        let dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
        let dialogObj1 = document.getElementById('alert_dialog_1').ej2_instances[0];
        dialogObj.hide();
        dialogObj1.hide();
    }

    function toolbarClick(args) {
        let gridObj = document.getElementById("OrganizationStructuresGrid").ej2_instances[0];

        if (args.item.id === 'OrganizationStructuresGrid_pdfexport') {
            gridObj.pdfExport();
        }
        if (args.item.id === 'OrganizationStructuresGrid_excelexport') {
            gridObj.excelExport();
        }
        if (args.item.id === 'OrganizationStructuresGrid_csvexport') {
            gridObj.csvExport();
        }
        if (this.getSelectedRecords().length > 0) {
            let withHeader = false;
            if (args.item.id === 'copyHeader') {
                withHeader = true;
            }
            this.copy(withHeader);
        }
        else {
            if (args.item.id === 'copyHeader') {
                let dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                dialogObj.show();
            }
            else if (args.item.id === 'copy') {
                let dialogObj = document.getElementById('alert_dialog_1').ej2_instances[0];
                dialogObj.show();
            }
        }
        if (args.item.id === 'showActions') {
            gridObj.toolbar = [{ text: "Hide Actions", tooltipText: "Actions", prefixIcon: "e-custom-hide-actions", id: "hideActions" }, { text: "Toggle Grouping", tooltipText: "Grouping", prefixIcon: "e-custom-group-toggle", id: "toggleGrouping" }, { text: "Audit Trail", tooltipText: "View Audit Trail", prefixIcon: "e-custom-audit-trail", id: "toggleaudittrail" }, { text: "Toggle Detailed", tooltipText: "Toggle Detailed", prefixIcon: "e-toggledetailed", id: "toggleDetailed" }, { text: "ExcelExport", tooltipText: "Excel Export", prefixIcon: "e-excelexport", id: this.element.id + "_excelexport", align: 'Right' }, { text: this.element.id + "_PdfExport", tooltipText: "Pdf Export", prefixIcon: "e-pdfexport", id: "pdfexport", align: 'Right' }, { text: "CsvExport", tooltipText: "Csv Export", prefixIcon: "e-csvexport", id: this.element.id + "_csvexport", align: 'Right' }, { text: "Print", tooltipText: "Print", prefixIcon: "e-print", id: this.element.id + "_print", align: 'Right' }, { text: "Copy", tooltipText: "Copy", prefixIcon: "e-copy", id: "copy" }, "Search", { text: "Copy With Header", tooltipText: "Copy With Header", prefixIcon: "e-copy", id: "copyHeader" }, "ColumnChooser"];
            gridObj.refresh();
        }
        if (args.item.id === 'hideActions') {
            gridObj.toolbar = [{ text: "Show Actions", tooltipText: "Actions", prefixIcon: "e-custom-show-actions", id: "showActions" }, "Search", "ColumnChooser"];
            gridObj.showColumnChooser = true;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleGrouping') {
            gridObj.allowGrouping = !gridObj.allowGrouping;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleDetailed') {
            let visCount = 0;
            for (let i = 0; i < gridObj.columns.length; i++) {
                if (gridObj.columns[i].visible) visCount++;
            }
            if (visCount == gridObj.columns.length) {
                for (let i = 0; i < gridObj.columns.length; i++) {
                    let col = gridObj.columns[i];
                    if (typeof col.customAttributes != 'undefined' && typeof col.customAttributes.id != 'undefined' && col.customAttributes.id == 'detailed')
                        gridObj.showHider.hide(col.headerText, 'headerText');
                    else if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
            else {
                for (let i = 0; i < gridObj.columns.length; i++) {
                    let col = gridObj.columns[i];
                    if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
        }
        if (args.item.id === 'toggleaudittrail') {

            if (!isAuditTrail) {
                var agtGrid = $("#AuditTrailGrid")[0].ej2_instances[0];
                gridObj.showSpinner();

                $.ajax({
                    url: '?handler=DataAuditTrail',
                    async: true,
                    type: "GET",
                    data: {},
                    success: function (data) {
                        gridObj.hideSpinner();

                        //agtGrid.childGrid.childGrid.dataSource = data.tertiaryDS;
                        //agtGrid.childGrid.dataSource = data.secondaryDS;
                        agtGrid.dataSource = data.ds;
                        agtGrid.refresh();

                        $(".customContentArea").css('position', 'unset');
                        $("#auditTrail").slideDown(200);
                    },
                    error: function (data) {
                        gridObj.hideSpinner();

                        $(".customContentArea").css('position', 'absolute');
                        $("#auditTrail").slideUp(200);

                        swal.fire('Failed', `An error occured while generating the audit trail`, 'error');
                    }
                });

            }
            else {
                $(".customContentArea").css('position', 'absolute');
                $("#auditTrail").slideUp(200);
            }

            isAuditTrail = !isAuditTrail;
        }
        setTimeout(function () { gridObj.hideSpinner() }, 200);
    }
    function positionJobsCommandClick(args) {
        let gridObj = document.getElementById("PositionJobsDetailsGrid").ej2_instances[0];
        
        if (args.commandColumn.type == "Edit") {
            isEditingPositionJob = true;
            let params = args.rowData;
            curPosJobEditRow = params;

            toggleAreaFormBtn('posJobsForm', false);

            setTimeout(function () {
                toggleAreaFormBtn('posJobsForm', true);
            }, 200);

            FillFormByObject(params, $('#posJobsForm'));
        }
        else if (args.commandColumn.type == "Copy") {
            this.copy(false);
        }

        setTimeout(function () { gridObj.hideSpinner() }, 200);
    }
    function commandClick(args) {
        let gridObj = document.getElementById("OrganizationStructuresGrid").ej2_instances[0];

        if (args.commandColumn.type == "Edit") {
            isEditingOrganizationStructures = true;
            let params = args.rowData;
            curOrganizationStructuresEditRow = params;

            toggleAreaFormBtn('organizationStructuresForm', false);

            setTimeout(function () {
                $('#submitOrganizationStructureBtn').val('Update Organization Structure');
                toggleAreaFormBtn('organizationStructuresForm', true);
            }, 200);

            FillFormByObject(params, $('#organizationStructuresForm'));

            emptyTGDS = false;
            let treeGrid = $("#StructureTreeGrid")[0].ej2_instances[0];
            treeGrid.dataSource = JSON.parse(params.extraProperties['Structure'][0]);
            treeGrid.refresh();

            $('#organizationStructuresLoader').slideDown();
           
            cERP.appServices.hR.organizationalManagement.organizationStructure.oS_OrganizationStructureTemplate.getOrganizationStructureTemplate(params.id).done(function (data) {
                console.log(data);
                $('#organizationStructuresLoader').slideUp();
                curOrganizationStructuresEditRow = data;

                //for (var i = 0; i < data.positionTemplates.length; i++) {
                //    let posTemplate = data.positionTemplates[i];
                //    cERP.appServices.setup.lookup.dictionaryValue.get(data.costCenterId).done(function (d) {
                //        posTemplate.costCenter = d;
                //        positionsGrid.refresh();
                //    });
                //}

                //let positionIds = [];
                //for (var i = 0; i < data.positionTemplates.length; i++) {
                //    positionIds.push(data.positionTemplates[i].id);
                //}
                //$('#depHeadId').multiselect('select', data.organizationStructureHeadId);
            });
        }
        else if (args.commandColumn.type == "Copy") {
            this.copy(false);
        }

        setTimeout(function () { gridObj.hideSpinner() }, 200);
    }
    function organizationStructureActionComplete(args) {
        let gridObj = document.getElementById("OrganizationStructuresGrid").ej2_instances[0];
        setTimeout(function () { gridObj.hideSpinner() }, 200)
    }
    function organizationStructureActionBegin(args) {
        if (args.requestType == "delete") {
            let gridObj = document.getElementById("OrganizationStructuresGrid").ej2_instances[0];
            Swal.showLoading();

            let formData = new FormData();
            formData.append("organizationStructures", JSON.stringify(args.data));
            let xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
            formData.append("__RequestVerificationToken", xhrToken);

            $.ajax({
                url: '?handler=OrganizationStructureTemplate',
                async: true,
                type: "DELETE",
                data: formData,
                contentType: false,
                processData: false,
                success: function (data) {
                    gridObj.refresh();
                    setTimeout(function () { gridObj.hideSpinner() }, 200);
                    swal.fire("Success", "Organization Structure(s) has successfully been deleted", "success");

                    if ($('#organizationStructuresForm').css('display') !== 'none') {
                        $('#organizationStructuresForm').slideUp();
                    }
                },
                error: function (err) {
                    gridObj.refresh();
                    setTimeout(function () { gridObj.hideSpinner() }, 200);
                    swal.fire("Failed", "Organization Structure(s) couldn't be deleted, please fix all errors and try again.", "error");

                    console.log(err);
                }
            });
            //gridObj.refresh();
            //setTimeout(function () { gridObj.hideSpinner() }, 200);

            return true;
        }
    }

    function structureToolbarClick(args) {
        let gridObj = this;
        let id = this.element.id;

        if (args.item.id === `${id}_pdfexport`) {
            gridObj.pdfExport();
        }
        if (args.item.id === `${id}_excelexport`) {
            gridObj.excelExport();
        }
        if (args.item.id === `${id}_csvexport`) {
            gridObj.csvExport();
        }
        if (this.getSelectedRecords().length > 0) {
            let withHeader = false;
            if (args.item.id === 'copyHeader') {
                withHeader = true;
            }
            this.copy(withHeader);
        }
        else {
            if (args.item.id === 'copyHeader') {
                let dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                dialogObj.show();
            }
            else if (args.item.id === 'copy') {
                let dialogObj = document.getElementById('alert_dialog_1').ej2_instances[0];
                dialogObj.show();
            }
        }
        if (args.item.id === 'showActions') {
            gridObj.toolbar = [{ text: "Hide Actions", tooltipText: "Actions", prefixIcon: "e-custom-hide-actions", id: "hideActions" }, "Add", "Cancel", "Delete", { text: "ExcelExport", tooltipText: "Excel Export", prefixIcon: "e-excelexport", id: this.element.id + "_excelexport", align: 'Right' }, { text: this.element.id + "_PdfExport", tooltipText: "Pdf Export", prefixIcon: "e-pdfexport", id: "pdfexport", align: 'Right' }, { text: "CsvExport", tooltipText: "Csv Export", prefixIcon: "e-csvexport", id: this.element.id + "_csvexport", align: 'Right' }, { text: "Print", tooltipText: "Print", prefixIcon: "e-print", id: this.element.id + "_print", align: 'Right' }, { text: "Copy", tooltipText: "Copy", prefixIcon: "e-copy", id: "copy" }, "Search", { text: "Copy With Header", tooltipText: "Copy With Header", prefixIcon: "e-copy", id: "copyHeader" }];
            gridObj.refresh();
        }
        if (args.item.id === 'hideActions') {
            gridObj.toolbar = [{ text: "Show Actions", tooltipText: "Actions", prefixIcon: "e-custom-show-actions", id: "showActions" }, "Add", "Cancel", "Delete"];
            gridObj.showColumnChooser = true;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleGrouping') {
            gridObj.allowGrouping = !gridObj.allowGrouping;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleDetailed') {
            let visCount = 0;
            for (let i = 0; i < gridObj.columns.length; i++) {
                if (gridObj.columns[i].visible) visCount++;
            }
            if (visCount == gridObj.columns.length) {
                for (let i = 0; i < gridObj.columns.length; i++) {
                    let col = gridObj.columns[i];
                    if (typeof col.customAttributes != 'undefined' && typeof col.customAttributes.id != 'undefined' && col.customAttributes.id == 'detailed')
                        gridObj.showHider.hide(col.headerText, 'headerText');
                    else if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
            else {
                for (let i = 0; i < gridObj.columns.length; i++) {
                    let col = gridObj.columns[i];
                    if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
        }
        if (args.item.id === 'toggleaudittrail') {

        }
        setTimeout(function () { gridObj.hideSpinner() }, 200);
    }


    function referenceActionComplete(args) {
        if (args.requestType == "delete") {
            populateCostCenterTemplates();
        }
    }
    function referenceActionBegin(args) {
        if (args.requestType == "delete") {
            populateCostCenterTemplates();
        }
    }
</script>

