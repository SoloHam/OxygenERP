@page "/HR/OrganizationStructure/OrganizationStructures"
@using CERP.Localization;
@using Microsoft.AspNetCore.Mvc.Localization;
@using CERP.App;
@using CERP;
@using CERP.HR.Setup.OrganizationalManagement.OrganizationStructure;
@inject IHtmlLocalizer<CERPResource> L
@inject Volo.Abp.Json.IJsonSerializer JsonSerializer
@using CERP.App.Helpers;
@using EJ2CoreSampleBrowser.Models;
@using Syncfusion.EJ2.Navigations;

@model CERP.Web.Areas.HR.Setup.OrganizationalManagement.OrganizationStructure.Pages.OrganizationStructures.ListModel
@{
    ViewData["IsEditing"] = false;
    bool IsEditing = (bool)ViewData["IsEditing"];

    ViewData["Title"] = L["OrganizationStructures"].Name;
    ViewData["IconClass"] = "far fa-building";
    ViewData["HeaderTitle"] = L["OrganizationStructures"].Name.ToUpper();
    ViewData["SubTitle"] = $"{L["ListOf"]} {L["OrganizationStructures"]}";
    ViewData["Area"] = "Setup";

    ViewData["IsList"] = false;
    ViewData["IsCreate"] = false;
    string cNT = $"{L["Add"].Name} {L["OrganizationStructure"].Name}";
    ViewData["CreateNewText"] = cNT;
    ViewData["CreateNewLink"] = "/OrganizationStructures/OrganizationStructure";

    string TabPlaceholder = (bool)ViewData["IsEditing"] ? L["Area"].Name : L["Step"].Name;

    var alertanimation = new Syncfusion.EJ2.Popups.DialogAnimationSettings { Effect = Syncfusion.EJ2.Popups.DialogEffect.None };

    var initialToolBar = new List<object>() { new { text = "Show Actions", tooltipText = "Actions", prefixIcon = "e-custom-show-actions", id = "showActions" }, "Search", "ColumnChooser" };
    var initialStructureToolBar = new List<object>() { new { text = "Show Actions", tooltipText = "Actions", prefixIcon = "e-custom-show-actions", id = "showActions" }, "Search", "ColumnChooser" };
    var fullToolBar = new List<object>() { new { text = "Hide Actions", tooltipText = "Actions", prefixIcon = "e-custom-hide-actions", id = "hideActions" }, new { text = "Toggle Grouping", tooltipText = "Grouping", prefixIcon = "zmdi-chevron-up", id = "toggleGrouping" }, new { text = "Audit Trail", tooltipText = "View Audit Trail", prefixIcon = "e-toggleaudittrail", id = "toggleaudittrail" }, new { text = "Toggle Detailed", tooltipText = "Toggle Detailed", prefixIcon = "e-toggledetailed", id = "toggleDetailed" }, "ExcelExport", "CsvExport", "Print", "Search", new { text = "Copy", tooltipText = "Copy", prefixIcon = "e-copy", id = "copy" }, new { text = "Copy With Header", tooltipText = "Copy With Header", prefixIcon = "e-copy", id = "copyHeader" }, "ColumnChooser" };

    List<object> osTreeCommands = new List<object>();
    osTreeCommands.Add(new { type = "Edit", buttonOption = new { iconCss = "e-icons e-edit", cssClass = "e-flat" } });
    osTreeCommands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "e-flat" } });
    osTreeCommands.Add(new { type = "Cancel", buttonOption = new { iconCss = "e-icons e-cancel-icon", cssClass = "e-flat" } });

    List<object> organizationStructuresCommands = new List<object>();
    organizationStructuresCommands.Add(new { type = "Edit", buttonOption = new { iconCss = "e-icons e-edit", cssClass = "e-flat" } });
    organizationStructuresCommands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "e-flat" } });
    organizationStructuresCommands.Add(new { type = "Cancel", buttonOption = new { iconCss = "e-icons e-cancel-icon", cssClass = "e-flat" } });


    List<OS_PositionLevel> positionLevels = Enum.GetValues(typeof(OS_PositionLevel)).Cast<OS_PositionLevel>().ToList();

    List<OS_ReviewPeriod> reviewPeriods = Enum.GetValues(typeof(OS_ReviewPeriod)).Cast<OS_ReviewPeriod>().ToList();

    //var order = TreeData.GetDefaultData();

    List<object> referenceCommands = new List<object>();
    referenceCommands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "e-flat" } });
}
@section styles {
    @if ((bool)ViewData["IsEditing"])
    {
        <link href="~/libs/smartwizard/dist/css/smart_wizard_theme_circles.min.css" rel="stylesheet" />
    }

    <style>
        .customContentArea {
            position: unset !important;
        }
    </style>
}
@section scripts {

    <script>
        let isEditingOrganizationStructures = false;
        let curOrganizationStructuresEditRow;

        let isEditingPositions = false;
        let curPositionsEditRow;

        let isEditingUnit = false;
        let curUnitEditRow;

        let departments = [];
        let positions = [];
        let businessUnits = [];
        let divisions = [];
        let legalEntities = [];

        let buCostCenters = [];
        let buPositions = [];
        let divCostCenters = [];
        let divPositions = [];
        let depCostCenters = [];
        let depPositions = [];

        let buCostCentersGrid;
        let divCostCentersGrid;
        let depCostCentersGrid;
        function populateCostCenterTemplates() {
            try {
                buCostCenters = buCostCenters.filter(function (y) {
                    return buCostCentersGrid.dataSource.filter(function (x) { return x.id == y.id }).length == 0
                });
                divCostCenters = divCostCenters.filter(function (y) {
                    return divCostCentersGrid.dataSource.filter(function (x) { return x.id == y.id }).length == 0
                });
                depCostCenters = depCostCenters.filter(function (y) {
                    return depCostCentersGrid.dataSource.filter(function (x) { return x.id == y.id }).length == 0
                });
            } catch (e) {

            }

            let dataMS = [];
            for (let i = 0; i < buCostCenters.length; i++) {
                let item = buCostCenters[i];
                dataMS.push({ label: `${item.key} - ${item.value}`, value: item.id, data: item });
            }
            $('#buCostCentersIds').multiselect('dataprovider', dataMS);

            dataMS = [];
            for (let i = 0; i < divCostCenters.length; i++) {
                let item = divCostCenters[i];
                dataMS.push({ label: `${item.key} - ${item.value}`, value: item.id, data: item });
            }
            $('#divCostCentersIds').multiselect('dataprovider', dataMS);

            dataMS = [];
            for (let i = 0; i < depCostCenters.length; i++) {
                let item = depCostCenters[i];
                dataMS.push({ label: `${item.key} - ${item.value}`, value: item.id, data: item });
            }
            $('#depCostCentersIds').multiselect('dataprovider', dataMS);
            console.log(dataMS);
        }
        function loadCostCenterTemplates() {
            $('#buCostCentersLoader').slideDown(100);
            $('#divCostCentersLoader').slideDown(100);
            $('#depCostCentersLoader').slideDown(100);
            cERP.appServices.setup.lookup.dictionaryValue.getAllByValueType(ValueTypeModules.costCenters).done(function (data) {
                $('#buCostCentersLoader').slideUp(100);
                $('#divCostCentersLoader').slideUp(100);
                $('#depCostCentersLoader').slideUp(100);
                divCostCenters = data;
                buCostCenters = data;
                depCostCenters = data;
                populateCostCenterTemplates();
            });
        }

        let buPositionsGrid;
        let divPositionsGrid;
        let depPositionsGrid;
        function populatePositionTemplates() {
            try {
                buPositions = buPositions.filter(function (y) {
                    return buPositionsGrid.dataSource.filter(function (x) { return x.id == y.id }).length == 0
                });
                divPositions = divPositions.filter(function (y) {
                    return divPositionsGrid.dataSource.filter(function (x) { return x.id == y.id }).length == 0
                });
                depPositions = depPositions.filter(function (y) {
                    return depPositionsGrid.dataSource.filter(function (x) { return x.id == y.id }).length == 0
                });
            } catch (e) {

            }

            let dataMS = [];
            for (let i = 0; i < buPositions.length; i++) {
                let item = buPositions[i];
                dataMS.push({ label: `${item.code} - ${item.name}`, value: item.id, data: item });
            }
            $('#buPositionsIds').multiselect('dataprovider', rfdc()(dataMS));
            dataMS = [];
            for (let i = 0; i < divPositions.length; i++) {
                let item = divPositions[i];
                dataMS.push({ label: `${item.code} - ${item.name}`, value: item.id, data: item });
            }
            $('#divPositionsIds').multiselect('dataprovider', rfdc()(dataMS));
            dataMS = [];
            for (let i = 0; i < depPositions.length; i++) {
                let item = depPositions[i];
                dataMS.push({ label: `${item.code} - ${item.name}`, value: item.id, data: item });
            }
            $('#depPositionsIds').multiselect('dataprovider', rfdc()(dataMS));
        }
        function loadPositionTemplates() {
            $('#buPositionsLoader').slideDown(100);
            $('#divPositionsLoader').slideDown(100);
            $('#depPositionsLoader').slideDown(100);
            cERP.appServices.hR.organizationalManagement.organizationStructure.oS_PositionTemplate.getAllPositionTemplates().done(function (data) {
                $('#buPositionsLoader').slideUp(100);
                $('#divPositionsLoader').slideUp(100);
                $('#depPositionsLoader').slideUp(100);
                buPositions = data;
                divPositions = data;
                depPositions = data;
                populatePositionTemplates();
            });
        }

        let buLocations;
        let divLocations;
        function populateLocationTemplates() {
            //try {
            //    buLocations = buLocations.filter(function (y) {
            //        return buPositionsGrid.dataSource.filter(function (x) { return x.id == y.id }).length == 0
            //    });
            //    divLocations = divLocations.filter(function (y) {
            //        return divPositionsGrid.dataSource.filter(function (x) { return x.id == y.id }).length == 0
            //    });
            //} catch (e) {

            //}

            let dataMS = [];
            for (let i = 0; i < buLocations.length; i++) {
                let item = buLocations[i];
                dataMS.push({ label: `${item.location.locationCode} - ${item.location.locationName}`, value: item.location.id, data: item });
            }
            $('#buLocationsIds').multiselect('dataprovider', rfdc()(dataMS));
            $('#divLocationsIds').multiselect('dataprovider', rfdc()(dataMS));
            $('#depLocationsIds').multiselect('dataprovider', rfdc()(dataMS));
        }
        let curLegalEntity;
        function loadLocationTemplates() {
            console.log($('#structureLegalEntity').val());
            curLegalEntity = legalEntities.filter(function (x) { return x.id == $('#structureLegalEntity').val() })[0];
            console.log(curLegalEntity);
            cERP.appServices.setup.companySetup.company.getCompanyLocations(curLegalEntity.id).done(function (data) {
                buLocations = data;
                divLocations = data;

                populateLocationTemplates();
            });
        }

        let usedBusinessUnits = [];
        let usedDivisions = [];
        let usedDepartments = [];
        $(document).ready(function () {
            let options = {
                buttonWidth: '100%',
                includeSelectAllOption: true,
                enableFiltering: false,
                enableClickableOptGroups: true,
                includeResetOption: true,
                includeResetDivider: true,
                enableCollapsibleOptGroups: true
            };
            $('#reviewPeriod').multiselect(options);
            $('#structureLegalEntity').multiselect(options);
            $('#buCostCentersIds').multiselect(options);
            $('#buPositionsIds').multiselect(options);
            $('#buLocationsIds').multiselect(options);
            $('#buHead').multiselect(options);
            $('#divCostCentersIds').multiselect(options);
            $('#divPositionsIds').multiselect(options);
            $('#divHead').multiselect(options);
            $('#divLocationsIds').multiselect(options);
            $('#depCostCentersIds').multiselect(options);
            $('#depPositionsIds').multiselect(options);
            $('#depHead').multiselect(options);
            $('#depLocationsIds').multiselect(options);

            let gridObj = $("#OrganizationStructuresGrid")[0].ej2_instances[0];
            let structureTGrid = $("#StructureTreeGrid")[0].ej2_instances[0];
            //let positionsGrid = $("#PositionsGrid")[0].ej2_instances[0];
            //let subDGrid = $("#SubOrganizationStructuresGrid")[0].ej2_instances[0];
            $('#addBUCostCenterBtn').on('click', function () {
                loadCostCenterTemplates();
            });
            buCostCentersGrid = $('#BUCostCenterReferenceGrid')[0].ej2_instances[0];
            $('#submitBUCostCenterBtn').on('click', function () {
                if (ValidateForm('buCostCentersForm')) {
                    let selectedCostCenters = $('#buCostCentersIds').val();
                    for (var i = 0; i < selectedCostCenters.length; i++) {
                        let _function = buCostCenters.filter(function (x) { return x.id == selectedCostCenters[i] })[0];
                        _function.percentage = parseInt($('#buCostCenterPercentage').val());

                        let curSum = 0;
                        for (var i = 0; i < buCostCentersGrid.dataSource.length; i++) {
                            curSum += buCostCentersGrid.dataSource[i].percentage;
                        }
                        console.log(curSum);
                        if (curSum + _function.percentage <= 100)
                            buCostCentersGrid.dataSource.push(_function);
                        else {
                            toastr.error(`Sum of all percentages exceed 100`);
                            buCostCentersGrid.hideSpinner();
                        }

                        buCostCentersGrid.refresh();
                    }
                    populateCostCenterTemplates();
                }
            });

            $('#addBUPositionBtn').on('click', function () {
                loadPositionTemplates();
            });
            buPositionsGrid = $('#BUPositionReferenceGrid')[0].ej2_instances[0];
            $('#submitBUPositionBtn').on('click', function () {
                if (ValidateForm('buPositionsForm')) {
                    let selectedPositions = $('#buPositionsIds').val();
                    for (var i = 0; i < selectedPositions.length; i++) {
                        let _function = buPositions.filter(function (x) { return x.id == selectedPositions[i] })[0];
                        _function.percentage = parseInt($('#buPositionPercentage').val());

                        let curSum = 0;
                        for (var i = 0; i < buPositionsGrid.dataSource.length; i++) {
                            curSum += buPositionsGrid.dataSource[i].percentage;
                        }
                        console.log(curSum);
                        if (curSum + _function.percentage <= 100)
                            buPositionsGrid.dataSource.push(_function);
                        else {
                            toastr.error(`Sum of all percentages exceed 100`);
                            buPositionsGrid.hideSpinner();
                        }

                        buPositionsGrid.refresh();
                    }
                    populatePositionTemplates();
                }
            });


            $('#addDIVCostCenterBtn').on('click', function () {
                loadCostCenterTemplates();
            });
            divCostCentersGrid = $('#DIVCostCenterReferenceGrid')[0].ej2_instances[0];
            $('#submitDIVCostCenterBtn').on('click', function () {
                if (ValidateForm('divCostCentersForm')) {
                    let selectedCostCenters = $('#divCostCentersIds').val();
                    for (var i = 0; i < selectedCostCenters.length; i++) {
                        let _function = divCostCenters.filter(function (x) { return x.id == selectedCostCenters[i] })[0];
                        _function.percentage = parseInt($('#divCostCenterPercentage').val());

                        let curSum = 0;
                        for (var i = 0; i < divCostCentersGrid.dataSource.length; i++) {
                            curSum += divCostCentersGrid.dataSource[i].percentage;
                        }
                        console.log(curSum);
                        if (curSum + _function.percentage <= 100)
                            divCostCentersGrid.dataSource.push(_function);
                        else {
                            toastr.error(`Sum of all percentages exceed 100`);
                            divCostCentersGrid.hideSpinner();
                        }

                        divCostCentersGrid.refresh();
                    }
                    populateCostCenterTemplates();
                }
            });

            $('#addDIVPositionBtn').on('click', function () {
                loadPositionTemplates();
            });
            divPositionsGrid = $('#DIVPositionReferenceGrid')[0].ej2_instances[0];
            $('#submitDIVPositionBtn').on('click', function () {
                if (ValidateForm('divPositionsForm')) {
                    let selectedPositions = $('#divPositionsIds').val();
                    for (var i = 0; i < selectedPositions.length; i++) {
                        let _function = divPositions.filter(function (x) { return x.id == selectedPositions[i] })[0];
                        _function.percentage = parseInt($('#divPositionPercentage').val());

                        let curSum = 0;
                        for (var i = 0; i < divPositionsGrid.dataSource.length; i++) {
                            curSum += divPositionsGrid.dataSource[i].percentage;
                        }
                        console.log(curSum);
                        if (curSum + _function.percentage <= 100)
                            divPositionsGrid.dataSource.push(_function);
                        else {
                            toastr.error(`Sum of all percentages exceed 100`);
                            divPositionsGrid.hideSpinner();
                        }

                        divPositionsGrid.refresh();
                    }
                    populatePositionTemplates();
                }
            });


            $('#addDEPCostCenterBtn').on('click', function () {
                loadCostCenterTemplates();
            });
            depCostCentersGrid = $('#DEPCostCenterReferenceGrid')[0].ej2_instances[0];
            $('#submitDEPCostCenterBtn').on('click', function () {
                if (ValidateForm('depCostCentersForm')) {
                    let selectedCostCenters = $('#depCostCentersIds').val();
                    for (var i = 0; i < selectedCostCenters.length; i++) {
                        let _function = depCostCenters.filter(function (x) { return x.id == selectedCostCenters[i] })[0];
                        _function.percentage = parseInt($('#depCostCenterPercentage').val());

                        let curSum = 0;
                        for (var i = 0; i < depCostCentersGrid.dataSource.length; i++) {
                            curSum += depCostCentersGrid.dataSource[i].percentage;
                        }
                        console.log(curSum);
                        if (curSum + _function.percentage <= 100)
                            depCostCentersGrid.dataSource.push(_function);
                        else {
                            toastr.error(`Sum of all percentages exceed 100`);
                            depCostCentersGrid.hideSpinner();
                        }

                        depCostCentersGrid.refresh();
                    }
                    populateCostCenterTemplates();
                }
            });

            $('#addDEPPositionBtn').on('click', function () {
                loadPositionTemplates();
            });
            depPositionsGrid = $('#DEPPositionReferenceGrid')[0].ej2_instances[0];
            $('#submitDEPPositionBtn').on('click', function () {
                if (ValidateForm('depPositionsForm')) {
                    let selectedPositions = $('#depPositionsIds').val();
                    for (var i = 0; i < selectedPositions.length; i++) {
                        let _function = depPositions.filter(function (x) { return x.id == selectedPositions[i] })[0];
                        _function.percentage = parseInt($('#depPositionPercentage').val());

                        let curSum = 0;
                        for (var i = 0; i < depPositionsGrid.dataSource.length; i++) {
                            curSum += depPositionsGrid.dataSource[i].percentage;
                        }
                        console.log(curSum);
                        if (curSum + _function.percentage <= 100)
                            depPositionsGrid.dataSource.push(_function);
                        else {
                            toastr.error(`Sum of all percentages exceed 100`);
                            depPositionsGrid.hideSpinner();
                        }

                        depPositionsGrid.refresh();
                    }
                    populatePositionTemplates();
                }
            });


            $('#structureLegalEntity').on('change', function () {
                loadLocationTemplates();
            });

            cERP.appServices.setup.companySetup.company.getAllCompanies().done(function (data) {
                legalEntities = data;
                let dataMS = [];
                for (let i = 0; i < legalEntities.length; i++) {
                    let item = legalEntities[i];
                    dataMS.push({ label: `${item.clientID} - ${item.companyName}`, value: item.id, data: item });
                }
                $('#structureLegalEntity').multiselect('dataprovider', rfdc()(dataMS));

                loadLocationTemplates();
            });
            cERP.appServices.hR.organizationalManagement.organizationStructure.oS_DepartmentTemplate.getAllDepartmentTemplates().done(function (data) {
                for (var i = 0; i < data.length; i++) {
                    data[i].unitType = "Department";
                }
                departments = data;
            });
            cERP.appServices.hR.organizationalManagement.organizationStructure.oS_PositionTemplate.getAllPositionTemplates().done(function (data) {
                for (var i = 0; i < data.length; i++) {
                    data[i].unitType = "Position";
                }
                positions = data;

                let dataMS = [];
                for (let i = 0; i < positions.length; i++) {
                    let item = positions[i];
                    dataMS.push({ label: `${item.code} - ${item.name}`, value: item.id, data: item });
                }
                $('#buHead').multiselect('dataprovider', rfdc()(dataMS));
                $('#divHead').multiselect('dataprovider', rfdc()(dataMS));
                $('#depHead').multiselect('dataprovider', rfdc()(dataMS));
            });
            cERP.appServices.hR.organizationalManagement.organizationStructure.oS_DivisionTemplate.getAllDivisionTemplates().done(function (data) {
                for (var i = 0; i < data.length; i++) {
                    data[i].unitType = "Division";
                }
                divisions = data;
            });
            cERP.appServices.hR.organizationalManagement.organizationStructure.oS_BusinessUnitTemplate.getAllBusinessUnitTemplates().done(function (data) {
                for (var i = 0; i < data.length; i++) {
                    data[i].unitType = "Business Unit";
                }
                businessUnits = data;
            });

            gridObj.showSpinner();
            $('#organizationStructuresLoader').slideDown(100);
            cERP.appServices.hR.organizationalManagement.organizationStructure.oS_OrganizationStructureTemplate.getAllOrganizationStructureTemplates({}).done(function (data) {
                gridObj.hideSpinner();
                $('#organizationStructuresLoader').slideUp(100);

                organizationStructures = data;
                gridObj.dataSource = organizationStructures;
                setTimeout(function () { gridObj.hideSpinner() }, 200);

                possibleSubOrganizationStructures = rfdc()(organizationStructures);

                let dataMS = [];
                for (let i = 0; i < data.length; i++) {
                    let item = data[i];
                    dataMS.push({ label: `${item.code} - ${item.name}`, value: item.id, data: item });
                }
                $('#subOrganizationStructuresField').multiselect('dataprovider', dataMS);
                $('#subOrganizationStructuresField').change();
            });

            $('#submitBUUnitBtn').on('click', function () {
                console.log(curUnitEditRow);
                if (ValidateForm('businessUnitForm')) {
                    structureTGrid.showSpinner();

                    let form = [];
                    let details = $('#businessUnitForm').find("textarea, input, select").serializeArray();
                    form = form.concat(details);

                    let params = objectifyForm(form);
                    curUnitEditRow.unitDetails = params;

                    curUnitEditRow.unitDetails.costCenters = rfdc()(buCostCentersGrid.dataSource);
                    curUnitEditRow.unitDetails.associations = { positions: rfdc()(buPositionsGrid.dataSource) };

                    console.log(params);
                    console.log(curUnitEditRow);

                    structureTGrid.hideSpinner();

                    toastr.info(`${curUnitEditRow.type}: ${curUnitEditRow._unit.name} has been updated`);
                }
                else {
                    toastr.error(`${curUnitEditRow.type}: ${curUnitEditRow._unit.name} could not be updated`);
                }
            });
            $('#submitDIVUnitBtn').on('click', function () {
                console.log(curUnitEditRow);
                if (ValidateForm('divisionForm')) {
                    structureTGrid.showSpinner();

                    let form = [];
                    let details = $('#divisionForm').find("textarea, input, select").serializeArray();
                    form = form.concat(details);

                    let params = objectifyForm(form);
                    curUnitEditRow.unitDetails = params;

                    curUnitEditRow.unitDetails.costCenters = rfdc()(divCostCentersGrid.dataSource);
                    curUnitEditRow.unitDetails.associations = { positions: rfdc()(divPositionsGrid.dataSource) };

                    console.log(params);
                    console.log(curUnitEditRow);

                    structureTGrid.hideSpinner();

                    toastr.info(`${curUnitEditRow.type}: ${curUnitEditRow._unit.name} has been updated`);
                }
                else {
                    toastr.error(`${curUnitEditRow.type}: ${curUnitEditRow._unit.name} could not be updated`);
                }
            });
            $('#submitDEPUnitBtn').on('click', function () {
                console.log(curUnitEditRow);
                if (ValidateForm('depisionForm')) {
                    structureTGrid.showSpinner();

                    let form = [];
                    let details = $('#departmentForm').find("textarea, input, select").serializeArray();
                    form = form.concat(details);

                    let params = objectifyForm(form);
                    curUnitEditRow.unitDetails = params;

                    curUnitEditRow.unitDetails.costCenters = rfdc()(depCostCentersGrid.dataSource);
                    curUnitEditRow.unitDetails.associations = { positions: rfdc()(depPositionsGrid.dataSource) };

                    console.log(params);
                    console.log(curUnitEditRow);

                    structureTGrid.hideSpinner();

                    toastr.info(`${curUnitEditRow.type}: ${curUnitEditRow._unit.name} has been updated`);
                }
                else {
                    toastr.error(`${curUnitEditRow.type}: ${curUnitEditRow._unit.name} could not be updated`);
                }
            });

            $('#addOrganizationStructuresBtn').on('click', function () {
                isEditingOrganizationStructures = false;

                $('#submitOrganizationStructureBtn').val('Create Organization Structure');
            });

            $('#submitOrganizationStructureBtn').on('click', function (e) {
                e.preventDefault();
                if (ValidateForm('organizationStructureSpecificForm')) {
                    gridObj.showSpinner();
                    Swal.showLoading();

                    let form = [];
                    let organizationStructureDetails = $('#organizationStructureSpecificForm').find("textarea, input, select").serializeArray();
                    form = form.concat(organizationStructureDetails);

                    let params = objectifyForm(form);

                    let id = 0;
                    if (gridObj.dataSource.length > 0)
                        id = gridObj.dataSource[gridObj.dataSource.length - 1].id;

                    params.isEditing = isEditingOrganizationStructures;

                    if (isEditingOrganizationStructures) {
                        params.id = curOrganizationStructuresEditRow.id;

                        //cERP.appServices.hR.leaveRequestTemplates.update()
                    }
                    else {

                        //cERP.appServices.hR.leaveRequestTemplates.update()
                    }

                    //let selectedPositions = $('#positionIds').val();
                    //console.log(selectedPositions);
                    //let selectedPositionTemplates = [];
                    params.positionTemplates = positionsGrid.dataSource;
                    //for (var i = 0; i < selectedPositions.length; i++) {
                    //    selectedPositionTemplates.push(positions.filter(x => x.id == selectedPositions[i])[0]);
                    //    params.positionTemplates.push(selectedPositionTemplates[i]);
                    //}

                    //let selectedDepHead = $('#depHeadId').val();
                    //let selectedDepHeadTemplate = selectedPositionTemplates.push(positions.filter(x => x.id == selectedDepHead)[0]);
                    //params.organizationStructureHead = { positionTemplate: selectedDepHeadTemplate };

                    //params.subOrganizationStructureTemplates = subDGrid.dataSource;

                    let formData = new FormData();
                    formData.append("info", JSON.stringify(params));
                    let xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
                    formData.append("__RequestVerificationToken", xhrToken);
                    console.log(params);

                    $.ajax({
                        url: "?handler=OrganizationStructureTemplate",
                        async: true,
                        type: "POST",
                        data: formData,
                        contentType: false,
                        processData: false,
                        success: function (data) {
                            Swal.hideLoading();
                            console.log(data);
                            if (isEditingOrganizationStructures) {
                                gridObj.refresh(); // refresh the Grid.

                                swal.fire("Success", "Organization Structure has successfully been updated", "success");

                                for (let i = 0; i < gridObj.dataSource.length; i++) {
                                    if (gridObj.dataSource[i].id == data.id) {
                                        gridObj.dataSource[i] = data;
                                    }
                                }
                                gridObj.refresh();
                            }
                            else {
                                gridObj.dataSource.push(data);

                                gridObj.refresh(); // refresh the Grid.

                                swal.fire("Success", "Organization Structure has successfully been added", "success");
                            }
                            gridObj.hideSpinner();
                        },
                        error: function (err) {
                            Swal.hideLoading();
                            console.log(err);
                            let errMsg = typeof err !== 'undefined' ? err.responseJSON.Message : '';
                            if (isEditingOrganizationStructures)
                                swal.fire("Failed", errMsg + " \nOrganization Structure couldn't be updated, please fix all errors and try again.", "error");
                            else
                                swal.fire("Failed", errMsg + " \nOrganization Structure couldn't be added, please fix all errors and try again.", "error");

                            console.log(err);
                            gridObj.hideSpinner();
                        }
                    });
                }
                else {
                    Swal.close();
                    Swal.hideLoading();
                }
            });
        });
    </script>
}
<partial name="_DefaultPageHeader" />
<div class="site-content customContentArea">
    <div class="control-section">
        <div class="areaHeader" style="display:flex;">
            <div id="organizationStructuresLoader" class="pull-left loader-inline" style="display:none"></div>
            <div class="areaHeaderTitle">
                <span id="areHeadertitle" class="areaHeaderTitleNode menu-text">Current Organization Structures</span>
                @*<span id="" class="areaHeaderTitleInNode menu-text"> > </span>*@
                @*<span id="subTitle" class="menu-text" style="padding-left:15px; font-size: 28px; font-family:Roboto; font-weight:200;">@ViewData["SubTitle"]</span>*@
            </div>
            @*<h3 class="control-label" style="flex-grow: 1; margin:0">Approval Route</h3>*@
            <div class="pull-right text-right p-r-20 areaHeaderBtnSec">
                @*<div class="clearfix margin-15"></div>*@
                <a id="addOrganizationStructuresBtn" onclick="areaHeaderBtnClick(event); isEditingOrganizationStructures = false;" class="btn btn-outline-dark areaHeaderBtn"><i class="fa fa-plus fa-fw"></i> Add New</a>
            </div>
        </div>
        <form id="organizationStructuresForm" onkeydown="return event.key != 'Enter';" class="row areaForm" method="post" data-toggle="validator" style="display: none; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
            <ejs-accordion id="organizationStructureFormAccordion">
                <e-accordion-accordionitems>
                    <e-accordion-accordionitem expanded="true" header="General Details" content="#generalFieldsInfo"></e-accordion-accordionitem>
                    <e-accordion-accordionitem header="Structure Details" content="#structureInfo"></e-accordion-accordionitem>
                </e-accordion-accordionitems>
            </ejs-accordion>

            <div id="generalFieldsInfo" style="display:none">
                <div id="organizationStructureSpecificForm">
                    <div class="row">
                        <div class="col-lg-3 col-md-3 col-sm-3 col-12">
                            <div class="form-group">
                                <label class="margin-bottom-5 control-label">Organization Structure Code:</label>
                                <input type="text" id="organizationStructureCode" name="Code" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" required>
                            </div>
                        </div>
                        <div class="col-lg-3 col-md-3 col-sm-3 col-12">
                            <div class="col-sm-6" style="padding:0">
                                <div class="form-group">
                                    <label class="control-label m-b-5 ">Title:</label>
                                    <input type="text" id="organizationStructureTitle" name="Name" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control " required>
                                </div>
                            </div>
                            <div class="col-sm-6" style="padding:0">
                                <div class="form-group">
                                    <label class="control-label m-b-5 ">Title (In Arabic):</label>
                                    <input type="text" id="organizationStructureTitleLocalized" name="NameLocalized" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                </div>
                            </div>
                        </div>
                        @*<div class="col-lg-3 col-md-3 col-sm-3 col-12">
                                <div class="form-group">
                                    <label class="margin-bottom-5 control-label">OrganizationStructure Head:</label>
                                    <select id="depHeadId" name="OrganizationStructureHeadId" class="form-control">
                                    </select>
                                </div>
                            </div>*@
                        <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                            <div class="col-sm-6" style="padding:0">
                                <div class="form-group">
                                    <label class="control-label m-b-5 ">Valid From:</label>
                                    <input type="date" id="validityFromDate" name="ValidityFromDate" class="text-left form-control inline pull-left" required>
                                </div>
                            </div>
                            <div class="col-sm-6" style="padding:0">
                                <div class="form-group">
                                    <label class="control-label m-b-5 ">Valid To:</label>
                                    <input type="date" id="validityToDate" name="ValidityToDate" class="text-left form-control inline pull-left" required>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                            <div id="reviewPeriodTypeField" class="col-sm-12" style="padding:0">
                                <div class="form-group">
                                    <label class="margin-bottom-5 control-label">Review Period:</label>
                                    <select id="reviewPeriod" name="ReviewPeriod" onchange="
                                                if (typeof $('option:selected', '#reviewPeriod').attr('data-value') !== 'undefined' && $('option:selected', '#reviewPeriod').attr('data-value').includes('Day')) {
                                                    $('#reviewPeriodTypeField').removeClass('col-sm-12');
                                                    $('#reviewPeriodTypeField').addClass('col-sm-6');
                                                    setTimeout(function () {
                                                        $('#reviewPeriodDaysField').slideDown(0);
                                                    }, 520);
                                                } else {
                                                    $('#reviewPeriodDaysField').slideUp(0);
                                                    $('#reviewPeriodTypeField').removeClass('col-sm-6');
                                                    $('#reviewPeriodTypeField').addClass('col-sm-12');
                                                }
                                            " class="form-control" required>
                                        @for (int i = 0; i < reviewPeriods.Count; i++)
                                        {
                                            <option value="@((int)reviewPeriods[i])" data-value="@EnumExtensions.GetDescription(reviewPeriods[i])">@EnumExtensions.GetDescription(reviewPeriods[i])</option>
                                        }
                                    </select>
                                </div>
                            </div>
                            <div id="reviewPeriodDaysField" class="col-sm-6" style="display:none; padding:0">
                                <div class="form-group">
                                    <label class="margin-bottom-5 control-label">Period Days:</label>
                                    <input type="number" min="0" id="reviewPeriodDays" name="ReviewPeriodDays" value="0" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                            <div class="form-group">
                                <label class="margin-bottom-5 control-label">Legal Entity:</label>
                                <select id="structureLegalEntity" name="LegalEntityId" class="form-control" required>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="structureInfo" style="display:none">
                <ejs-tab id="OSSpecificFormTabs" animation="ViewBag.animation">
                    <e-tab-tabitems>
                        <e-tab-tabitem header="@(new TabHeader { Text = "Organization Structure" })" content="#orgStructureTab"></e-tab-tabitem>
                        <e-tab-tabitem header="@(new TabHeader { Text = "Position Management" })" content="#posManagementTab"></e-tab-tabitem>
                    </e-tab-tabitems>
                </ejs-tab>
                <div id="orgStructureTab" class="areaForm" style="display:none;">
                    <div id="osFormsHeader" style="display:none">
                        <div class="areaHeader" style="display:flex;">
                            <div id="organizationStructuresLoader" class="pull-left loader-inline" style="display:none"></div>
                            <div class="areaHeaderTitle">
                                <span id="areaHeadertitle" class="areaHeaderTitleNode menu-text"></span>
                                <span id="" class="areaHeaderTitleInNode menu-text"> > </span>
                                <span id="areaHeaderValue" class="areaHeaderTitleNode menu-text"></span>
                            </div>
                            <div class="pull-right text-right p-r-20 areaHeaderBtnSec">
                                @*<div class="clearfix margin-15"></div>*@
                                @*<a id="saveUnitDetailsBtn" onclick="areaHeaderBtnClick(event); isEditingUnit = false;" class="btn btn-outline-dark areaHeaderBtn"><i class="fa fa-save fa-fw"></i> Save Unit</a>*@
                            </div>
                            @*<h3 class="control-label" style="flex-grow: 1; margin:0">Approval Route</h3>*@
                        </div>
                    </div>
                    <div id="businessUnitForm" role="form" class="row areaForm" method="post" data-toggle="validator" style="display: none; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
                        <ejs-tab id="businessUnitFormTabs" animation="ViewBag.animation">
                            <e-tab-tabitems>
                                <e-tab-tabitem header="@(new TabHeader { Text = "General" })" content="#generalBUDetailsTab"></e-tab-tabitem>
                                <e-tab-tabitem header="@(new TabHeader { Text = "Cost Centers" })" content="#BUCostCentersTab"></e-tab-tabitem>
                                <e-tab-tabitem header="@(new TabHeader { Text = "Associations" })" content="#BUAssociationsTab"></e-tab-tabitem>
                            </e-tab-tabitems>
                        </ejs-tab>
                        <div id="generalBUDetailsTab" class="areaForm">
                            <div class="row">
                                <div class="col-lg-4 col-md-4 col-sm-6 col-12">
                                    <div class="form-group">
                                        <label class="margin-bottom-5 control-label">Head of BU:</label>
                                        <select id="buHead" name="HeadOfBUId" class="form-control" required>
                                        </select>
                                    </div>
                                </div>
                                <div class="col-lg-4 col-md-4 col-sm-6 col-12">
                                    <div class="form-group">
                                        <label class="control-label m-b-5 ">Location:</label>
                                        <select id="buLocationsIds" name="BULocationId" class="form-control">
                                        </select>
                                    </div>
                                </div>
                                <div class="col-lg-4 col-md-4 col-sm-6 col-12">
                                    <div class="form-group">
                                        <label class="margin-bottom-5 control-label">Paygroup:</label>
                                        <select id="buPayroup" name="BUPaygroupId" class="form-control">
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="BUCostCentersTab" class="areaForm" style="display:none">
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="panel-body p-t-0" style="">
                                        <div class="areaHeader" style="display:flex;">
                                            <div id="buCostCentersLoader" class="pull-left loader-inline" style="display:none"></div>
                                            <div class="areaHeaderTitle">
                                                <span id="areHeadertitle" class="areaHeaderTitleNode menu-text">Cost Centers</span>
                                            </div>
                                            <div class="pull-right text-right p-r-20 areaHeaderBtnSec">
                                                <a id="addBUCostCenterBtn" onclick="areaHeaderBtnClick(event);" class="btn btn-outline-dark areaHeaderBtn"><i class="fa fa-plus fa-fw"></i> Add New</a>
                                            </div>
                                        </div>
                                        <div role="form" id="buCostCentersForm" class="row areaForm" method="post" data-toggle="validator" style="display: none; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
                                            <div class="row">
                                                <div class="col-lg-4 col-md-4 col-sm-4 col-12">
                                                    <div class="form-group">
                                                        <label class="margin-bottom-5 control-label">Cost Centers:</label>
                                                        <select id="buCostCentersIds" name="CostCentersIds" multiple="multiple" class="form-control">
                                                        </select>
                                                    </div>
                                                </div>
                                                <div class="col-lg-4 col-md-4 col-sm-4 col-12">
                                                    <div class="form-group">
                                                        <label class="margin-bottom-5 control-label">Percentage:</label>
                                                        <input type="number" min="1" max="100" value="" id="buCostCenterPercentage" name="Percentage" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                                    </div>
                                                </div>
                                                <div class="col-lg-3 col-md-3 col-sm-3 col-12">
                                                    <label class="control-label m-b-5 "></label>
                                                    <button id="submitBUCostCenterBtn" type="button" class="btn btn-success btn-block">Add Cost Center(s)</button>
                                                </div>
                                            </div>
                                        </div>
                                        <div id="buCostCentersCS" class="control-section">
                                            <ejs-grid id="BUCostCenterReferenceGrid" enableAutoFill="true" dataBound="dataBoundResponsive"
                                                      allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true"
                                                      hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true"
                                                      allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" dataSource="new List<dynamic>()"
                                                      toolbar="@initialToolBar" toolbarClick="defaultToolbarClick" actionBegin="referenceActionBegin" actionComplete="referenceActionComplete"
                                                      allowPaging="true" allowResizing="true">

                                                <e-grid-columns>
                                                    <e-grid-column field="id" headerText="Id" textAlign="Center" visible="false" isPrimaryKey="true" showInColumnChooser="false"></e-grid-column>
                                                    <e-grid-column field="key" allowEditing="false" headerText="Code" textAlign="Center"></e-grid-column>
                                                    <e-grid-column field="value" allowEditing="false" headerText="Name" textAlign="Center"></e-grid-column>
                                                    <e-grid-column field="percentage" allowEditing="true" headerText="Percentage" textAlign="Center"></e-grid-column>
                                                    <e-grid-column headerText="Actions" textAlign="Center" commands="referenceCommands"></e-grid-column>
                                                </e-grid-columns>

                                                <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                                <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true"></e-grid-editSettings>
                                                <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                                <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                            </ejs-grid>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="BUAssociationsTab" class="areaForm" style="display:none">
                            <ejs-accordion id="buAssociationsFormAccordion">
                                <e-accordion-accordionitems>
                                    <e-accordion-accordionitem expanded="true" header="Positions" content="#buPosAssociations"></e-accordion-accordionitem>
                                    <e-accordion-accordionitem header="Companies" content="#buCompsAssociations"></e-accordion-accordionitem>
                                    <e-accordion-accordionitem header="Divisions" content="#buDivisionsAssociations"></e-accordion-accordionitem>
                                </e-accordion-accordionitems>
                            </ejs-accordion>

                            <div id="buPosAssociations" style="display: none;">
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="panel-body p-t-0" style="">
                                            <div class="areaHeader" style="display:flex;">
                                                <div id="buPositionsLoader" class="pull-left loader-inline" style="display:none"></div>
                                                <div class="areaHeaderTitle">
                                                    <span id="areHeadertitle" class="areaHeaderTitleNode menu-text">Positions</span>
                                                </div>
                                                <div class="pull-right text-right p-r-20 areaHeaderBtnSec">
                                                    <a id="addBUPositionBtn" onclick="areaHeaderBtnClick(event);" class="btn btn-outline-dark areaHeaderBtn"><i class="fa fa-plus fa-fw"></i> Add New</a>
                                                </div>
                                            </div>
                                            <div role="form" id="buPositionsForm" class="row areaForm" method="post" data-toggle="validator" style="display: none; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
                                                <div class="row">
                                                    <div class="col-lg-4 col-md-4 col-sm-4 col-12">
                                                        <div class="form-group">
                                                            <label class="margin-bottom-5 control-label">Positions:</label>
                                                            <select id="buPositionsIds" name="PositionsIds" multiple="multiple" class="form-control">
                                                            </select>
                                                        </div>
                                                    </div>
                                                    <div class="col-lg-4 col-md-4 col-sm-4 col-12">
                                                        <div class="form-group">
                                                            <label class="margin-bottom-5 control-label">Percentage:</label>
                                                            <input type="number" min="1" max="100" value="" id="buPositionPercentage" name="Percentage" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                                        </div>
                                                    </div>
                                                    <div class="col-lg-3 col-md-3 col-sm-3 col-12">
                                                        <label class="control-label m-b-5 "></label>
                                                        <button id="submitBUPositionBtn" type="button" class="btn btn-success btn-block">Add Position(s)</button>
                                                    </div>
                                                </div>
                                            </div>
                                            <div id="buPositionsCS" class="control-section">
                                                <ejs-grid id="BUPositionReferenceGrid" enableAutoFill="true" dataBound="dataBoundResponsive"
                                                          allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true"
                                                          hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true"
                                                          allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" dataSource="new List<dynamic>()"
                                                          toolbar="@initialToolBar" toolbarClick="defaultToolbarClick" actionBegin="referenceActionBegin" actionComplete="referenceActionComplete"
                                                          allowPaging="true" allowResizing="true">

                                                    <e-grid-columns>
                                                        <e-grid-column field="id" headerText="Id" textAlign="Center" visible="false" isPrimaryKey="true" showInColumnChooser="false"></e-grid-column>
                                                        <e-grid-column field="code" allowEditing="false" headerText="Code" textAlign="Center"></e-grid-column>
                                                        <e-grid-column field="name" allowEditing="false" headerText="Name" textAlign="Center"></e-grid-column>
                                                        <e-grid-column field="percentage" allowEditing="true" headerText="Percentage" textAlign="Center"></e-grid-column>
                                                        <e-grid-column headerText="Actions" textAlign="Center" commands="referenceCommands"></e-grid-column>
                                                    </e-grid-columns>

                                                    <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                                    <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true"></e-grid-editSettings>
                                                    <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                                    <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                                </ejs-grid>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div id="buCompsAssociations" style="display: none;">
                            </div>
                            <div id="buDivisionsAssociations" style="display: none;">
                            </div>
                        </div>
                        <div class="row m-t-20">
                            <div class="col-lg-12">
                                <input id="submitBUUnitBtn" type="button" class="btn btn-success btn-block" value="Update Business Unit" required />
                            </div>
                        </div>
                    </div>
                    <div id="divisionForm" role="form" class="row areaForm" method="post" data-toggle="validator" style="display: none; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
                        <ejs-tab id="divisionFormTabs" animation="ViewBag.animation">
                            <e-tab-tabitems>
                                <e-tab-tabitem header="@(new TabHeader { Text = "General" })" content="#generalDIVDetailsTab"></e-tab-tabitem>
                                <e-tab-tabitem header="@(new TabHeader { Text = "Cost Centers" })" content="#DIVCostCentersTab"></e-tab-tabitem>
                                <e-tab-tabitem header="@(new TabHeader { Text = "Associations" })" content="#DIVAssociationsTab"></e-tab-tabitem>
                            </e-tab-tabitems>
                        </ejs-tab>
                        <div id="generalDIVDetailsTab" class="areaForm">
                            <div class="row">
                                <div class="col-lg-4 col-md-4 col-sm-6 col-12">
                                    <div class="form-group">
                                        <label class="margin-bottom-5 control-label">Head of DIV:</label>
                                        <select id="divHead" name="HeadOfDIVId" class="form-control" required>
                                        </select>
                                    </div>
                                </div>
                                <div class="col-lg-4 col-md-4 col-sm-6 col-12">
                                    <div class="form-group">
                                        <label class="control-label m-b-5 ">Location:</label>
                                        <select id="divLocationsIds" name="DIVLocationId" class="form-control">
                                        </select>
                                    </div>
                                </div>
                                <div class="col-lg-4 col-md-4 col-sm-6 col-12">
                                    <div class="form-group">
                                        <label class="margin-bottom-5 control-label">Paygroup:</label>
                                        <select id="divPayroup" name="DIVPaygroupId" class="form-control">
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="DIVCostCentersTab" class="areaForm" style="display:none">
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="panel-body p-t-0" style="">
                                        <div class="areaHeader" style="display:flex;">
                                            <div id="divCostCentersLoader" class="pull-left loader-inline" style="display:none"></div>
                                            <div class="areaHeaderTitle">
                                                <span id="areHeadertitle" class="areaHeaderTitleNode menu-text">Cost Centers</span>
                                            </div>
                                            <div class="pull-right text-right p-r-20 areaHeaderBtnSec">
                                                <a id="addDIVCostCenterBtn" onclick="areaHeaderBtnClick(event);" class="btn btn-outline-dark areaHeaderBtn"><i class="fa fa-plus fa-fw"></i> Add New</a>
                                            </div>
                                        </div>
                                        <div role="form" id="divCostCentersForm" class="row areaForm" method="post" data-toggle="validator" style="display: none; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
                                            <div class="row">
                                                <div class="col-lg-4 col-md-4 col-sm-4 col-12">
                                                    <div class="form-group">
                                                        <label class="margin-bottom-5 control-label">Cost Centers:</label>
                                                        <select id="divCostCentersIds" name="CostCentersIds" multiple="multiple" class="form-control">
                                                        </select>
                                                    </div>
                                                </div>
                                                <div class="col-lg-4 col-md-4 col-sm-4 col-12">
                                                    <div class="form-group">
                                                        <label class="margin-bottom-5 control-label">Percentage:</label>
                                                        <input type="number" min="1" max="100" value="" id="divCostCenterPercentage" name="Percentage" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                                    </div>
                                                </div>
                                                <div class="col-lg-3 col-md-3 col-sm-3 col-12">
                                                    <label class="control-label m-b-5 "></label>
                                                    <button id="submitDIVCostCenterBtn" type="button" class="btn btn-success btn-block">Add Cost Center(s)</button>
                                                </div>
                                            </div>
                                        </div>
                                        <div id="divCostCentersCS" class="control-section">
                                            <ejs-grid id="DIVCostCenterReferenceGrid" enableAutoFill="true" dataBound="dataBoundResponsive"
                                                      allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true"
                                                      hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true"
                                                      allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" dataSource="new List<dynamic>()"
                                                      toolbar="@initialToolBar" toolbarClick="defaultToolbarClick" actionBegin="referenceActionBegin" actionComplete="referenceActionComplete"
                                                      allowPaging="true" allowResizing="true">

                                                <e-grid-columns>
                                                    <e-grid-column field="id" headerText="Id" textAlign="Center" visible="false" isPrimaryKey="true" showInColumnChooser="false"></e-grid-column>
                                                    <e-grid-column field="key" allowEditing="false" headerText="Code" textAlign="Center"></e-grid-column>
                                                    <e-grid-column field="value" allowEditing="false" headerText="Name" textAlign="Center"></e-grid-column>
                                                    <e-grid-column field="percentage" allowEditing="true" headerText="Percentage" textAlign="Center"></e-grid-column>
                                                    <e-grid-column headerText="Actions" textAlign="Center" commands="referenceCommands"></e-grid-column>
                                                </e-grid-columns>

                                                <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                                <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true"></e-grid-editSettings>
                                                <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                                <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                            </ejs-grid>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="DIVAssociationsTab" class="areaForm" style="display:none">
                            <ejs-accordion id="divAssociationsFormAccordion">
                                <e-accordion-accordionitems>
                                    <e-accordion-accordionitem expanded="true" header="Positions" content="#divPosAssociations"></e-accordion-accordionitem>
                                    <e-accordion-accordionitem header="Companies" content="#divCompsAssociations"></e-accordion-accordionitem>
                                    <e-accordion-accordionitem header="Divisions" content="#divDivisionsAssociations"></e-accordion-accordionitem>
                                </e-accordion-accordionitems>
                            </ejs-accordion>

                            <div id="divPosAssociations" style="display: none;">
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="panel-body p-t-0" style="">
                                            <div class="areaHeader" style="display:flex;">
                                                <div id="divPositionsLoader" class="pull-left loader-inline" style="display:none"></div>
                                                <div class="areaHeaderTitle">
                                                    <span id="areHeadertitle" class="areaHeaderTitleNode menu-text">Positions</span>
                                                </div>
                                                <div class="pull-right text-right p-r-20 areaHeaderBtnSec">
                                                    <a id="addDIVPositionBtn" onclick="areaHeaderBtnClick(event);" class="btn btn-outline-dark areaHeaderBtn"><i class="fa fa-plus fa-fw"></i> Add New</a>
                                                </div>
                                            </div>
                                            <div role="form" id="divPositionsForm" class="row areaForm" method="post" data-toggle="validator" style="display: none; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
                                                <div class="row">
                                                    <div class="col-lg-4 col-md-4 col-sm-4 col-12">
                                                        <div class="form-group">
                                                            <label class="margin-bottom-5 control-label">Positions:</label>
                                                            <select id="divPositionsIds" name="PositionsIds" multiple="multiple" class="form-control">
                                                            </select>
                                                        </div>
                                                    </div>
                                                    <div class="col-lg-4 col-md-4 col-sm-4 col-12">
                                                        <div class="form-group">
                                                            <label class="margin-bottom-5 control-label">Percentage:</label>
                                                            <input type="number" min="1" max="100" value="" id="divPositionPercentage" name="Percentage" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                                        </div>
                                                    </div>
                                                    <div class="col-lg-3 col-md-3 col-sm-3 col-12">
                                                        <label class="control-label m-b-5 "></label>
                                                        <button id="submitDIVPositionBtn" type="button" class="btn btn-success btn-block">Add Position(s)</button>
                                                    </div>
                                                </div>
                                            </div>
                                            <div id="divPositionsCS" class="control-section">
                                                <ejs-grid id="DIVPositionReferenceGrid" enableAutoFill="true" dataBound="dataBoundResponsive"
                                                          allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true"
                                                          hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true"
                                                          allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" dataSource="new List<dynamic>()"
                                                          toolbar="@initialToolBar" toolbarClick="defaultToolbarClick" actionBegin="referenceActionBegin" actionComplete="referenceActionComplete"
                                                          allowPaging="true" allowResizing="true">

                                                    <e-grid-columns>
                                                        <e-grid-column field="id" headerText="Id" textAlign="Center" visible="false" isPrimaryKey="true" showInColumnChooser="false"></e-grid-column>
                                                        <e-grid-column field="code" allowEditing="false" headerText="Code" textAlign="Center"></e-grid-column>
                                                        <e-grid-column field="name" allowEditing="false" headerText="Name" textAlign="Center"></e-grid-column>
                                                        <e-grid-column field="percentage" allowEditing="true" headerText="Percentage" textAlign="Center"></e-grid-column>
                                                        <e-grid-column headerText="Actions" textAlign="Center" commands="referenceCommands"></e-grid-column>
                                                    </e-grid-columns>

                                                    <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                                    <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true"></e-grid-editSettings>
                                                    <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                                    <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                                </ejs-grid>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div id="divCompsAssociations" style="display: none;">
                            </div>
                            <div id="divDivisionsAssociations" style="display: none;">
                            </div>
                        </div>
                        <div class="row m-t-20">
                            <div class="col-lg-12">
                                <input id="submitDIVUnitBtn" type="button" class="btn btn-success btn-block" value="Update Business Unit" required />
                            </div>
                        </div>
                    </div>
                    
                    <div id="departmentForm" role="form" class="row areaForm" method="post" data-toggle="validator" style="display: none; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
                        <ejs-tab id="departmentFormTabs" animation="ViewBag.animation">
                            <e-tab-tabitems>
                                <e-tab-tabitem header="@(new TabHeader { Text = "General" })" content="#generalDEPDetailsTab"></e-tab-tabitem>
                                <e-tab-tabitem header="@(new TabHeader { Text = "Cost Centers" })" content="#DEPCostCentersTab"></e-tab-tabitem>
                                <e-tab-tabitem header="@(new TabHeader { Text = "Associations" })" content="#DEPAssociationsTab"></e-tab-tabitem>
                            </e-tab-tabitems>
                        </ejs-tab>
                        <div id="generalDEPDetailsTab" class="areaForm">
                            <div class="row">
                                <div class="col-lg-4 col-md-4 col-sm-6 col-12">
                                    <div class="form-group">
                                        <label class="margin-bottom-5 control-label">Head of DEP:</label>
                                        <select id="depHead" name="HeadOfDEPId" class="form-control" required>
                                        </select>
                                    </div>
                                </div>
                                <div class="col-lg-4 col-md-4 col-sm-6 col-12">
                                    <div class="form-group">
                                        <label class="control-label m-b-5 ">Location:</label>
                                        <select id="depLocationsIds" name="DEPLocationId" class="form-control">
                                        </select>
                                    </div>
                                </div>
                                <div class="col-lg-4 col-md-4 col-sm-6 col-12">
                                    <div class="form-group">
                                        <label class="margin-bottom-5 control-label">Paygroup:</label>
                                        <select id="depPayroup" name="DEPPaygroupId" class="form-control">
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="DEPCostCentersTab" class="areaForm" style="display:none">
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="panel-body p-t-0" style="">
                                        <div class="areaHeader" style="display:flex;">
                                            <div id="depCostCentersLoader" class="pull-left loader-inline" style="display:none"></div>
                                            <div class="areaHeaderTitle">
                                                <span id="areHeadertitle" class="areaHeaderTitleNode menu-text">Cost Centers</span>
                                            </div>
                                            <div class="pull-right text-right p-r-20 areaHeaderBtnSec">
                                                <a id="addDEPCostCenterBtn" onclick="areaHeaderBtnClick(event);" class="btn btn-outline-dark areaHeaderBtn"><i class="fa fa-plus fa-fw"></i> Add New</a>
                                            </div>
                                        </div>
                                        <div role="form" id="depCostCentersForm" class="row areaForm" method="post" data-toggle="validator" style="display: none; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
                                            <div class="row">
                                                <div class="col-lg-4 col-md-4 col-sm-4 col-12">
                                                    <div class="form-group">
                                                        <label class="margin-bottom-5 control-label">Cost Centers:</label>
                                                        <select id="depCostCentersIds" name="CostCentersIds" multiple="multiple" class="form-control">
                                                        </select>
                                                    </div>
                                                </div>
                                                <div class="col-lg-4 col-md-4 col-sm-4 col-12">
                                                    <div class="form-group">
                                                        <label class="margin-bottom-5 control-label">Percentage:</label>
                                                        <input type="number" min="1" max="100" value="" id="depCostCenterPercentage" name="Percentage" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                                    </div>
                                                </div>
                                                <div class="col-lg-3 col-md-3 col-sm-3 col-12">
                                                    <label class="control-label m-b-5 "></label>
                                                    <button id="submitDEPCostCenterBtn" type="button" class="btn btn-success btn-block">Add Cost Center(s)</button>
                                                </div>
                                            </div>
                                        </div>
                                        <div id="depCostCentersCS" class="control-section">
                                            <ejs-grid id="DEPCostCenterReferenceGrid" enableAutoFill="true" dataBound="dataBoundResponsive"
                                                      allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true"
                                                      hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true"
                                                      allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" dataSource="new List<dynamic>()"
                                                      toolbar="@initialToolBar" toolbarClick="defaultToolbarClick" actionBegin="referenceActionBegin" actionComplete="referenceActionComplete"
                                                      allowPaging="true" allowResizing="true">

                                                <e-grid-columns>
                                                    <e-grid-column field="id" headerText="Id" textAlign="Center" visible="false" isPrimaryKey="true" showInColumnChooser="false"></e-grid-column>
                                                    <e-grid-column field="key" allowEditing="false" headerText="Code" textAlign="Center"></e-grid-column>
                                                    <e-grid-column field="value" allowEditing="false" headerText="Name" textAlign="Center"></e-grid-column>
                                                    <e-grid-column field="percentage" allowEditing="true" headerText="Percentage" textAlign="Center"></e-grid-column>
                                                    <e-grid-column headerText="Actions" textAlign="Center" commands="referenceCommands"></e-grid-column>
                                                </e-grid-columns>

                                                <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                                <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true"></e-grid-editSettings>
                                                <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                                <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                            </ejs-grid>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="DEPAssociationsTab" class="areaForm" style="display:none">
                            <ejs-accordion id="depAssociationsFormAccordion">
                                <e-accordion-accordionitems>
                                    <e-accordion-accordionitem expanded="true" header="Positions" content="#depPosAssociations"></e-accordion-accordionitem>
                                    <e-accordion-accordionitem header="Companies" content="#depCompsAssociations"></e-accordion-accordionitem>
                                    <e-accordion-accordionitem header="Departments" content="#depDepartmentsAssociations"></e-accordion-accordionitem>
                                </e-accordion-accordionitems>
                            </ejs-accordion>

                            <div id="depPosAssociations" style="display: none;">
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="panel-body p-t-0" style="">
                                            <div class="areaHeader" style="display:flex;">
                                                <div id="depPositionsLoader" class="pull-left loader-inline" style="display:none"></div>
                                                <div class="areaHeaderTitle">
                                                    <span id="areHeadertitle" class="areaHeaderTitleNode menu-text">Positions</span>
                                                </div>
                                                <div class="pull-right text-right p-r-20 areaHeaderBtnSec">
                                                    <a id="addDEPPositionBtn" onclick="areaHeaderBtnClick(event);" class="btn btn-outline-dark areaHeaderBtn"><i class="fa fa-plus fa-fw"></i> Add New</a>
                                                </div>
                                            </div>
                                            <div role="form" id="depPositionsForm" class="row areaForm" method="post" data-toggle="validator" style="display: none; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
                                                <div class="row">
                                                    <div class="col-lg-4 col-md-4 col-sm-4 col-12">
                                                        <div class="form-group">
                                                            <label class="margin-bottom-5 control-label">Positions:</label>
                                                            <select id="depPositionsIds" name="PositionsIds" multiple="multiple" class="form-control">
                                                            </select>
                                                        </div>
                                                    </div>
                                                    <div class="col-lg-4 col-md-4 col-sm-4 col-12">
                                                        <div class="form-group">
                                                            <label class="margin-bottom-5 control-label">Percentage:</label>
                                                            <input type="number" min="1" max="100" value="" id="depPositionPercentage" name="Percentage" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                                        </div>
                                                    </div>
                                                    <div class="col-lg-3 col-md-3 col-sm-3 col-12">
                                                        <label class="control-label m-b-5 "></label>
                                                        <button id="submitDEPPositionBtn" type="button" class="btn btn-success btn-block">Add Position(s)</button>
                                                    </div>
                                                </div>
                                            </div>
                                            <div id="depPositionsCS" class="control-section">
                                                <ejs-grid id="DEPPositionReferenceGrid" enableAutoFill="true" dataBound="dataBoundResponsive"
                                                          allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true"
                                                          hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true"
                                                          allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" dataSource="new List<dynamic>()"
                                                          toolbar="@initialToolBar" toolbarClick="defaultToolbarClick" actionBegin="referenceActionBegin" actionComplete="referenceActionComplete"
                                                          allowPaging="true" allowResizing="true">

                                                    <e-grid-columns>
                                                        <e-grid-column field="id" headerText="Id" textAlign="Center" visible="false" isPrimaryKey="true" showInColumnChooser="false"></e-grid-column>
                                                        <e-grid-column field="code" allowEditing="false" headerText="Code" textAlign="Center"></e-grid-column>
                                                        <e-grid-column field="name" allowEditing="false" headerText="Name" textAlign="Center"></e-grid-column>
                                                        <e-grid-column field="percentage" allowEditing="true" headerText="Percentage" textAlign="Center"></e-grid-column>
                                                        <e-grid-column headerText="Actions" textAlign="Center" commands="referenceCommands"></e-grid-column>
                                                    </e-grid-columns>

                                                    <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                                    <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true"></e-grid-editSettings>
                                                    <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                                    <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                                </ejs-grid>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div id="depCompsAssociations" style="display: none;">
                            </div>
                            <div id="depDepartmentsAssociations" style="display: none;">
                            </div>
                        </div>
                        <div class="row m-t-20">
                            <div class="col-lg-12">
                                <input id="submitDEPUnitBtn" type="button" class="btn btn-success btn-block" value="Update Business Unit" required />
                            </div>
                        </div>
                    </div>
                    
                    

                    <ejs-treegrid id="StructureTreeGrid" dataSource="new List<dynamic>()" load="structureLoad" height="380px" rowSelected="structureTreeRowSelected"
                                  toolbarClick="structureToolbarClick" toolbar="@initialStructureToolBar" queryCellInfo="OnStructureQueryCellInfo"
                                  actionBegin="structureTreeActionBegin" actionComplete="structureTreeActionComplete"
                                  idMapping="id" parentIdMapping="parentId" childMapping="Children" treeColumnIndex="1" allowSelection="true" allowResizing="true"
                                  allowRowDragAndDrop="false" rowDeselected="structureTreeRowDeselected">
                        <e-treegrid-selectionsettings type="Multiple"></e-treegrid-selectionsettings>
                        <e-treegrid-editsettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="false"></e-treegrid-editsettings>

                        @{
                            List<string> unitTypes = new List<string>() { "Business Unit", "Division", "Department" };
                            var typeEdit = new
                            {
                                @@params = new Syncfusion.EJ2.DropDowns.DropDownList() { Change = "loadTypeUnitsDropdown", CssClass = "unitTypeDropDown", BeforeOpen = "loadUnitTypesDropdown", DataSource = unitTypes, Query = "new ej.data.Query()", AllowFiltering = true }
                            };
                            var unitEdit = new
                            {
                                @@params = new Syncfusion.EJ2.DropDowns.DropDownList() { Change = "selectedTypeUnit", Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Text = "name", Value = "id" }, DataSource = new List<object>(), CssClass = "typeUnitDropDown", Query = "new ej.data.Query()", AllowFiltering = true }
                            };

                        }
                        <e-treegrid-columns>
                            <e-treegrid-column textAlign="Center" field="id" isPrimaryKey="true" headerText="Id" visible="false"></e-treegrid-column>
                            <e-treegrid-column validationRules="@(new { required=true})" textAlign="Center" field="type" headerText="Type" edit="typeEdit" editType="dropdownedit"></e-treegrid-column>
                            <e-treegrid-column validationRules="@(new { required=true})" textAlign="Center" field="_unit.name" headerText="Unit Name" edit="unitEdit" editType="dropdownedit"></e-treegrid-column>
                            <e-treegrid-column textAlign="Center" field="_unit.code" headerText="Unit Code" allowEditing="false"></e-treegrid-column>
                            <e-treegrid-column headerText="Validity" textAlign="Center" columns='new List<Syncfusion.EJ2.TreeGrid.TreeGridColumn>() {
                            new Syncfusion.EJ2.TreeGrid.TreeGridColumn() { Field= "_unit.validityFromDate", Type="date", Format="E, MMMM d, y", AllowEditing=false, EditType="datepicker", HeaderText = "From", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center },
                            new Syncfusion.EJ2.TreeGrid.TreeGridColumn() { Field= "_unit.validityToDate", Type="date", Format="E, MMMM d, y", AllowEditing=false, EditType="datepicker", HeaderText = "To", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center }
                        }'></e-treegrid-column>
                            <e-treegrid-column headerText="Actions" textAlign="Center" commands="osTreeCommands"></e-treegrid-column>

                        </e-treegrid-columns>
                    </ejs-treegrid>
                </div>
                <div id="posManagementTab" class="areaForm" style="display:none">

                </div>
            </div>
            <div class="row m-t-20">
                <div class="col-lg-12">
                    <input id="submitOrganizationStructureBtn" type="button" class="btn btn-success btn-block" value="Create Organization Structure" required />
                </div>
            </div>
        </form>
        <div id="organizationStructuresCS" class="control-section">
            <ejs-grid id="OrganizationStructuresGrid" enableAutoFill="true" dataBound="dataBoundResponsive" commandClick="commandClick"
                      showColumnChooser="true" allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true"
                      hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true" actionBegin="organizationStructureActionBegin" actionComplete="organizationStructureActionComplete"
                      allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" allowTextWrap="true" textWrapSettings="@(new Syncfusion.EJ2.Grids.GridTextWrapSettings() { WrapMode = Syncfusion.EJ2.Grids.WrapMode.Header })"
                      toolbarClick="toolbarClick" toolbar="@initialToolBar"
                      allowPaging="true" allowResizing="true" dataSource="new List<dynamic>()">

                <e-grid-columns>
                    <e-grid-column field="id" headerText="Id" textAlign="Center" visible="false" isPrimaryKey="true" showInColumnChooser="false"></e-grid-column>
                    <e-grid-column headerText="Name" textAlign="Center" columns='new List<Syncfusion.EJ2.Grids.GridColumn>() {
                        new Syncfusion.EJ2.Grids.GridColumn() { Field= "name", HeaderText = "English", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center },
                        new Syncfusion.EJ2.Grids.GridColumn() { Field= "nameLocalized", HeaderText = "Local", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center }
                    }'></e-grid-column>
                    <e-grid-column field="code" headerText="Code" textAlign="Center"></e-grid-column>
                    @*<e-grid-column field="organizationStructureHead.name" headerText="Head" textAlign="Center"></e-grid-column>*@
                    <e-grid-column field="reviewPeriodDescription" headerText="Review period" textAlign="Center"></e-grid-column>
                    <e-grid-column headerText="Validity" textAlign="Center" columns='new List<Syncfusion.EJ2.Grids.GridColumn>() {
                        new Syncfusion.EJ2.Grids.GridColumn() { Field= "validityFromDate", Type="date", Format="E, MMMM d, y", AllowEditing=true, EditType="datepicker", HeaderText = "From", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center },
                        new Syncfusion.EJ2.Grids.GridColumn() { Field= "validityToDate", Type="date", Format="E, MMMM d, y", AllowEditing=true, EditType="datepicker", HeaderText = "To", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center }
                    }'></e-grid-column>

                    <e-grid-column headerText="Actions" textAlign="Center" commands="organizationStructuresCommands"></e-grid-column>
                </e-grid-columns>

                <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="false"></e-grid-editSettings>
                <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
            </ejs-grid>
        </div>

        <div id="auditTrail" style="display:none;">
            <partial name="_DataAuditTrailPartialView" model="@Model.GetDataAuditTrailModel()" />
        </div>
    </div>

</div>
<ejs-dialog id="alert_dialog" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy with Header" content="Atleast one row should be selected to copy with header">
    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
    </e-dialog-buttons>
</ejs-dialog>
<ejs-dialog id="alert_dialog_1" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy" content="Atleast one row should be selected to copy">
    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
    </e-dialog-buttons>
</ejs-dialog>

<script>
    let curSelectedRow;
    function structureLoad() {
        this.columns[5].commands[0].buttonOption.click = function (args) {     //click event for custom command button
            var treeGrid = document.getElementById('StructureTreeGrid').ej2_instances[0];  // treegrid instance
            var rowObj = treeGrid.grid.getRowObjectFromUID(ej.base.closest(args.target, '.e-row').getAttribute('data-uid'));
            let unitType = rowObj.data.type;
            $('#osFormsHeader').slideUp(100);
            setTimeout(function () {
                $('#osFormsHeader').slideDown(100);
                console.log(rowObj.data);
                $('#osFormsHeader').find('#areaHeaderValue').text(rowObj.data._unit.name);
            }, 100);

            isEditingUnit = true;
            curUnitEditRow = rowObj.data;
            switch (unitType) {
                case "Business Unit":
                    $('#osFormsHeader').find('#areaHeadertitle').text('Business Unit');

                    if (curUnitEditRow.unitDetails)
                        FillFormByObject(curUnitEditRow.unitDetails, $('#businessUnitForm'));

                    try {
                        buCostCentersGrid.dataSource = rfdc()(curUnitEditRow.unitDetails.costCenters);
                        buCostCentersGrid.refresh();

                        buPositionsGrid.dataSource = rfdc()(curUnitEditRow.unitDetails.associations.positions);
                        buPositionsGrid.refresh();

                    } catch (e) {

                    }

                    $('#businessUnitForm').slideDown();
                    $('#divisionForm').slideUp();
                    $('#departmentForm').slideUp();
                    break;
                case "Division":
                    $('#osFormsHeader').find('#areaHeadertitle').text('Division');

                    if (curUnitEditRow.unitDetails)
                        FillFormByObject(curUnitEditRow.unitDetails, $('#divisionForm'));


                    try {
                        divCostCentersGrid.dataSource = rfdc()(curUnitEditRow.unitDetails.costCenters);
                        divCostCentersGrid.refresh();

                        divPositionsGrid.dataSource = rfdc()(curUnitEditRow.unitDetails.associations.positions);
                        divPositionsGrid.refresh();

                    } catch (e) {

                    }

                    $('#divisionForm').slideDown();
                    $('#departmentForm').slideUp();
                    $('#businessUnitForm').slideUp();
                    break;
                case "Department":
                    $('#osFormsHeader').find('#areaHeadertitle').text('Department');

                    if (curUnitEditRow.unitDetails)
                        FillFormByObject(curUnitEditRow.unitDetails, $('#departmentForm'));

                    try {
                        depCostCentersGrid.dataSource = rfdc()(curUnitEditRow.unitDetails.costCenters);
                        depCostCentersGrid.refresh();

                        depPositionsGrid.dataSource = rfdc()(curUnitEditRow.unitDetails.associations.positions);
                        depPositionsGrid.refresh();

                    } catch (e) {

                    }

                    $('#departmentForm').slideDown();
                    $('#divisionForm').slideUp();
                    $('#businessUnitForm').slideUp();
                    break;
            }
        }
    }
    function selectedTypeUnit() {
        let curType = this.itemData.unitType;
        console.log(curType);
        if (curType == "Department") {
            usedDepartments.push(this.itemData);
        }
        else if (curType == "Division") {
            usedDivisions.push(this.itemData);
        }
        else if (curType == "Business Unit") {
            usedBusinessUnits.push(this.itemData);
        }
    }
    function getUnitLevel(type) {
        switch (type) {
            case "Business Unit":
                return 0;
            case "Division":
                return 1;
            case "Department":
                return 2;
        }
    }
    function structureTreeActionBegin(args) {
        console.log(args);
        if (args.requestType == "add") {
            curSelectedRow = this.getSelectedRecords()[0];

        }
        else if (args.requestType == "edit") {
            
        }
        else if (args.requestType == "save") {
            let curType = args.data.type;
            if (curType == "Department") {
                args.data._unit = usedDepartments.filter(function (x) { return x.id == args.data._unit.name })[0];
            }
            else if (curType == "Division") {
                args.data._unit = usedDivisions.filter(function (x) { return x.id == args.data._unit.name })[0];
            }
            else if (curType == "Business Unit") {
                args.data._unit = usedBusinessUnits.filter(function (x) { return x.id == args.data._unit.name })[0];
            }

            args.data.id = this.dataSource.length + 1;
            if (typeof curSelectedRow !== 'undefined') {
                args.cancel = true;
                if (getUnitLevel(curType) < getUnitLevel(curSelectedRow.type)) {

                    this.refresh();
                }
                else if (getUnitLevel(curType) == getUnitLevel(curSelectedRow.type) && curSelectedRow.type != "Department") {
                    this.refresh();
                }
                else
                {
                    args.cancel = false;
                    args.data.parentId = curSelectedRow.id;

                    this.refresh();
                }
            }

            curSelectedRow = undefined;
            //else
            //    
        }
    }
    function structureTreeActionComplete(args) {
        console.log(args);
        if (args.requestType == "add") {

        }
        else if (args.requestType == "save") {
            let ds = rfdc()(this.dataSource);
            this.dataSource = [];
            this.dataSource = ds;
            this.refresh();

            curSelectedRow = undefined;
        }
    }
    function structureTreeRowSelected(args) {
        //console.log(args);
        //curSelectedRow = args.data;
    }
    function structureTreeRowDeselected(args) {
        //console.log(args);
        //curSelectedRow = undefined;
    }
    function OnStructureQueryCellInfo(args) {
        //if (args.column.field == "unit") {
        //    let curType = args.data.type;
        //    console.log(curType);
        //    if (curType == "Department") {
        //        for (var i = 0; i < usedDepartments.length; i++) {

        //            if (args.data.unit == usedDepartments[i].id) {
        //                args.cell.innerText = usedDepartments[i].name; // assign the foreignkey field value to the innertext
        //            }

        //        }
        //    }
        //    else if (curType == "Business Unit") {
        //        for (var i = 0; i < usedBusinessUnits.length; i++) {

        //            if (args.data.unit == usedBusinessUnits[i].id) {
        //                args.cell.innerText = usedBusinessUnits[i].name; // assign the foreignkey field value to the innertext
        //            }

        //        }
        //    }
        //    else if (curType == "Division") {
        //        for (var i = 0; i < usedDivisions.length; i++) {

        //            if (args.data.unit == usedDivisions[i].id) {
        //                args.cell.innerText = usedDivisions[i].name; // assign the foreignkey field value to the innertext
        //            }

        //        }
        //    }
        //}
        //if (args.column.field == "code") {
        //    let curType = args.data.type;
        //    if (curType == "Department") {
        //        for (var i = 0; i < usedDepartments.length; i++) {

        //            if (args.data.unit == usedDepartments[i].id) {
        //                args.cell.innerText = usedDepartments[i].code; // assign the foreignkey field value to the innertext
        //            }

        //        }
        //    }
        //    else if (curType == "Business Unit") {
        //        for (var i = 0; i < usedBusinessUnits.length; i++) {

        //            if (args.data.unit == usedBusinessUnits[i].id) {
        //                args.cell.innerText = usedBusinessUnits[i].code; // assign the foreignkey field value to the innertext
        //            }

        //        }
        //    }
        //    else if (curType == "Division") {
        //        for (var i = 0; i < usedDivisions.length; i++) {

        //            if (args.data.unit == usedDivisions[i].id) {
        //                args.cell.innerText = usedDivisions[i].code; // assign the foreignkey field value to the innertext
        //            }

        //        }
        //    }
        //}
        //if (args.column.field == "validityFromDate") {
        //    let curType = args.data.type;
        //    if (curType == "Department") {
        //        for (var i = 0; i < usedDepartments.length; i++) {

        //            if (args.data.unit == usedDepartments[i].id) {
        //                args.cell.innerText = usedDepartments[i].validityFromDate; // assign the foreignkey field value to the innertext
        //            }

        //        }
        //    }
        //    else if (curType == "Business Unit") {
        //        for (var i = 0; i < usedBusinessUnits.length; i++) {

        //            if (args.data.unit == usedBusinessUnits[i].id) {
        //                args.cell.innerText = usedBusinessUnits[i].validityFromDate; // assign the foreignkey field value to the innertext
        //            }

        //        }
        //    }
        //    else if (curType == "Division") {
        //        for (var i = 0; i < usedDivisions.length; i++) {

        //            if (args.data.unit == usedDivisions[i].id) {
        //                args.cell.innerText = usedDivisions[i].validityFromDate; // assign the foreignkey field value to the innertext
        //            }

        //        }
        //    }
        //}
        //if (args.column.field == "validityToDate") {
        //    let curType = args.data.type;
        //    if (curType == "Department") {
        //        for (var i = 0; i < usedDepartments.length; i++) {

        //            if (args.data.unit == usedDepartments[i].id) {
        //                args.cell.innerText = usedDepartments[i].validityToDate; // assign the foreignkey field value to the innertext
        //            }

        //        }
        //    }
        //    else if (curType == "Business Unit") {
        //        for (var i = 0; i < usedBusinessUnits.length; i++) {

        //            if (args.data.unit == usedBusinessUnits[i].id) {
        //                args.cell.innerText = usedBusinessUnits[i].validityToDate; // assign the foreignkey field value to the innertext
        //            }

        //        }
        //    }
        //    else if (curType == "Division") {
        //        for (var i = 0; i < usedDivisions.length; i++) {

        //            if (args.data.unit == usedDivisions[i].id) {
        //                args.cell.innerText = usedDivisions[i].validityToDate; // assign the foreignkey field value to the innertext
        //            }

        //        }
        //    }
        //}


    }

    function getUnusedDepartments() {
        return departments.filter(function (x) { return usedDepartments.filter(function (y) { return y.id == x.id }).length == 0 });
    }
    function getUnusedDivisions() {
        return divisions.filter(function (x) { return usedDivisions.filter(function (y) { return y.id == x.id }).length == 0 });
    }
    function getUnusedBusinessUnits() {
        return businessUnits.filter(function (x) { return usedBusinessUnits.filter(function (y) { return y.id == x.id }).length == 0 });
    }

    function loadTypeUnitsDropdown() {
        console.log(this);
        let structureGrid = $('#StructureTreeGrid')[0].ej2_instances[0];
        if (this.itemData == "Division") {
            structureGrid.columns[2].edit.params.dataSource = getUnusedDivisions();
        }
        else if (this.itemData == "Department") {
            structureGrid.columns[2].edit.params.dataSource = getUnusedDepartments();
        }
        else if (this.itemData == "Business Unit") {
            structureGrid.columns[2].edit.params.dataSource = getUnusedBusinessUnits();
        }

        console.log(structureGrid.columns[2].edit);
        $('#StructureTreeGrid_gridcontrol_unit___name')[0].ej2_instances[0].dataSource = structureGrid.columns[2].edit.params.dataSource;
    }
    function loadUnitTypesDropdown() {

    }
    let isAuditTrail = false;
    function alertBtnClick() {
        let dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
        let dialogObj1 = document.getElementById('alert_dialog_1').ej2_instances[0];
        dialogObj.hide();
        dialogObj1.hide();
    }

    function toolbarClick(args) {
        let gridObj = document.getElementById("OrganizationStructuresGrid").ej2_instances[0];

        if (args.item.id === 'OrganizationStructuresGrid_pdfexport') {
            gridObj.pdfExport();
        }
        if (args.item.id === 'OrganizationStructuresGrid_excelexport') {
            gridObj.excelExport();
        }
        if (args.item.id === 'OrganizationStructuresGrid_csvexport') {
            gridObj.csvExport();
        }
        if (this.getSelectedRecords().length > 0) {
            let withHeader = false;
            if (args.item.id === 'copyHeader') {
                withHeader = true;
            }
            this.copy(withHeader);
        }
        else {
            if (args.item.id === 'copyHeader') {
                let dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                dialogObj.show();
            }
            else if (args.item.id === 'copy') {
                let dialogObj = document.getElementById('alert_dialog_1').ej2_instances[0];
                dialogObj.show();
            }
        }
        if (args.item.id === 'showActions') {
            gridObj.toolbar = [{ text: "Hide Actions", tooltipText: "Actions", prefixIcon: "e-custom-hide-actions", id: "hideActions" }, { text: "Toggle Grouping", tooltipText: "Grouping", prefixIcon: "e-custom-group-toggle", id: "toggleGrouping" }, { text: "Audit Trail", tooltipText: "View Audit Trail", prefixIcon: "e-custom-audit-trail", id: "toggleaudittrail" }, { text: "Toggle Detailed", tooltipText: "Toggle Detailed", prefixIcon: "e-toggledetailed", id: "toggleDetailed" }, "ExcelExport", "PdfExport", "CsvExport", "Print", "Search", { text: "Copy", tooltipText: "Copy", prefixIcon: "e-copy", id: "copy" }, { text: "Copy With Header", tooltipText: "Copy With Header", prefixIcon: "e-copy", id: "copyHeader" }, "ColumnChooser"];
            gridObj.refresh();
        }
        if (args.item.id === 'hideActions') {
            gridObj.toolbar = [{ text: "Show Actions", tooltipText: "Actions", prefixIcon: "e-custom-show-actions", id: "showActions" }, "Search", "ColumnChooser"];
            gridObj.showColumnChooser = true;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleGrouping') {
            gridObj.allowGrouping = !gridObj.allowGrouping;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleDetailed') {
            let visCount = 0;
            for (let i = 0; i < gridObj.columns.length; i++) {
                if (gridObj.columns[i].visible) visCount++;
            }
            if (visCount == gridObj.columns.length) {
                for (let i = 0; i < gridObj.columns.length; i++) {
                    let col = gridObj.columns[i];
                    if (typeof col.customAttributes != 'undefined' && typeof col.customAttributes.id != 'undefined' && col.customAttributes.id == 'detailed')
                        gridObj.showHider.hide(col.headerText, 'headerText');
                    else if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
            else {
                for (let i = 0; i < gridObj.columns.length; i++) {
                    let col = gridObj.columns[i];
                    if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
        }
        if (args.item.id === 'toggleaudittrail') {

            if (!isAuditTrail) {
                var agtGrid = $("#AuditTrailGrid")[0].ej2_instances[0];
                gridObj.showSpinner();

                $.ajax({
                    url: '?handler=DataAuditTrail',
                    async: true,
                    type: "GET",
                    data: {},
                    success: function (data) {
                        gridObj.hideSpinner();

                        //agtGrid.childGrid.childGrid.dataSource = data.tertiaryDS;
                        //agtGrid.childGrid.dataSource = data.secondaryDS;
                        agtGrid.dataSource = data.ds;
                        agtGrid.refresh();

                        $(".customContentArea").css('position', 'unset');
                        $("#auditTrail").slideDown(200);
                    },
                    error: function (data) {
                        gridObj.hideSpinner();

                        $(".customContentArea").css('position', 'absolute');
                        $("#auditTrail").slideUp(200);

                        swal.fire('Failed', `An error occured while generating the audit trail`, 'error');
                    }
                });

            }
            else {
                $(".customContentArea").css('position', 'absolute');
                $("#auditTrail").slideUp(200);
            }

            isAuditTrail = !isAuditTrail;
        }
        setTimeout(function () { gridObj.hideSpinner() }, 200);
    }
    function commandClick(args) {
        let gridObj = document.getElementById("OrganizationStructuresGrid").ej2_instances[0];

        if (args.commandColumn.type == "Edit") {
            isEditingOrganizationStructures = true;
            let params = args.rowData;
            curOrganizationStructuresEditRow = params;

            toggleAreaFormBtn('organizationStructuresForm', false);

            setTimeout(function () {
                $('#submitOrganizationStructureBtn').val('Update Organization Structure');
                toggleAreaFormBtn('organizationStructuresForm', true);
            }, 200);

            FillFormByObject(params, $('#organizationStructuresForm'));

            let subOrganizationStructuresGrid = $("#SubOrganizationStructuresGrid")[0].ej2_instances[0];
            let positionsGrid = $("#PositionsGrid")[0].ej2_instances[0];

            $('#organizationStructuresLoader').slideDown();
            $('#positionIds').multiselect('deselectAll', false);
            $('#positionIds').multiselect('updateButtonText');

            $('#depHeadId').multiselect('deselectAll', false);
            $('#depHeadId').multiselect('updateButtonText');
            cERP.appServices.hR.organizationalManagement.organizationStructure.oS_OrganizationStructureTemplate.getOrganizationStructureTemplate(params.id).done(function (data) {
                console.log(data);
                $('#organizationStructuresLoader').slideUp();
                curOrganizationStructuresEditRow = data;

                possibleSubOrganizationStructures = rfdc()(organizationStructures.filter(function (x) { return x.id != data.id }));

                let dataMS = [];
                for (let i = 0; i < possibleSubOrganizationStructures.length; i++) {
                    let item = possibleSubOrganizationStructures[i];
                    dataMS.push({ label: `${item.code} - ${item.name}`, value: item.id, data: item });
                }
                $('#subOrganizationStructuresField').multiselect('dataprovider', dataMS);
                $('#subOrganizationStructuresField').change();

                //for (var i = 0; i < data.positionTemplates.length; i++) {
                //    let posTemplate = data.positionTemplates[i];
                //    cERP.appServices.setup.lookup.dictionaryValue.get(data.costCenterId).done(function (d) {
                //        posTemplate.costCenter = d;
                //        positionsGrid.refresh();
                //    });
                //}

                positionsGrid.dataSource = data.positionTemplates;
                positionsGrid.refresh();
                setTimeout(function () { positionsGrid.hideSpinner() }, 200);

                subOrganizationStructuresGrid.dataSource = data.subOrganizationStructureTemplates;
                subOrganizationStructuresGrid.refresh();
                setTimeout(function () { subOrganizationStructuresGrid.hideSpinner() }, 200);

                //let positionIds = [];
                //for (var i = 0; i < data.positionTemplates.length; i++) {
                //    positionIds.push(data.positionTemplates[i].id);
                //}
                //$('#depHeadId').multiselect('select', data.organizationStructureHeadId);
            });
        }
        else if (args.commandColumn.type == "Copy") {
            this.copy(false);
        }

        setTimeout(function () { gridObj.hideSpinner() }, 200);
    }
    function organizationStructureActionComplete(args) {
        let gridObj = document.getElementById("OrganizationStructuresGrid").ej2_instances[0];
        setTimeout(function () { gridObj.hideSpinner() }, 200)
    }
    function organizationStructureActionBegin(args) {
        if (args.requestType == "delete") {
            let gridObj = document.getElementById("OrganizationStructuresGrid").ej2_instances[0];
            Swal.showLoading();

            let formData = new FormData();
            formData.append("organizationStructures", JSON.stringify(args.data));
            let xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
            formData.append("__RequestVerificationToken", xhrToken);

            $.ajax({
                url: '?handler=OrganizationStructureTemplate',
                async: true,
                type: "DELETE",
                data: formData,
                contentType: false,
                processData: false,
                success: function (data) {
                    gridObj.refresh();
                    setTimeout(function () { gridObj.hideSpinner() }, 200);
                    swal.fire("Success", "Organization Structure(s) has successfully been deleted", "success");

                    if ($('#organizationStructuresForm').css('display') !== 'none') {
                        $('#organizationStructuresForm').slideUp();
                    }
                },
                error: function (err) {
                    gridObj.refresh();
                    setTimeout(function () { gridObj.hideSpinner() }, 200);
                    swal.fire("Failed", "Organization Structure(s) couldn't be deleted, please fix all errors and try again.", "error");

                    console.log(err);
                }
            });
            //gridObj.refresh();
            //setTimeout(function () { gridObj.hideSpinner() }, 200);

            return true;
        }
    }

    function structureToolbarClick(args) {
        let gridObj = this;
        let id = this.element.id;

        if (args.item.id === `${id}_pdfexport`) {
            gridObj.pdfExport();
        }
        if (args.item.id === `${id}_excelexport`) {
            gridObj.excelExport();
        }
        if (args.item.id === `${id}_csvexport`) {
            gridObj.csvExport();
        }
        if (this.getSelectedRecords().length > 0) {
            let withHeader = false;
            if (args.item.id === 'copyHeader') {
                withHeader = true;
            }
            this.copy(withHeader);
        }
        else {
            if (args.item.id === 'copyHeader') {
                let dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                dialogObj.show();
            }
            else if (args.item.id === 'copy') {
                let dialogObj = document.getElementById('alert_dialog_1').ej2_instances[0];
                dialogObj.show();
            }
        }
        if (args.item.id === 'showActions') {
            gridObj.toolbar = [{ text: "Hide Actions", tooltipText: "Actions", prefixIcon: "e-custom-hide-actions", id: "hideActions" }, "Add", "Cancel", "Delete", "ExcelExport", "PdfExport", "CsvExport", "Print", "Search", { text: "Copy", tooltipText: "Copy", prefixIcon: "e-copy", id: "copy" }, { text: "Copy With Header", tooltipText: "Copy With Header", prefixIcon: "e-copy", id: "copyHeader" }];
            gridObj.refresh();
        }
        if (args.item.id === 'hideActions') {
            gridObj.toolbar = [{ text: "Show Actions", tooltipText: "Actions", prefixIcon: "e-custom-show-actions", id: "showActions" }, "Add", "Cancel", "Delete"];
            gridObj.showColumnChooser = true;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleGrouping') {
            gridObj.allowGrouping = !gridObj.allowGrouping;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleDetailed') {
            let visCount = 0;
            for (let i = 0; i < gridObj.columns.length; i++) {
                if (gridObj.columns[i].visible) visCount++;
            }
            if (visCount == gridObj.columns.length) {
                for (let i = 0; i < gridObj.columns.length; i++) {
                    let col = gridObj.columns[i];
                    if (typeof col.customAttributes != 'undefined' && typeof col.customAttributes.id != 'undefined' && col.customAttributes.id == 'detailed')
                        gridObj.showHider.hide(col.headerText, 'headerText');
                    else if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
            else {
                for (let i = 0; i < gridObj.columns.length; i++) {
                    let col = gridObj.columns[i];
                    if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
        }
        if (args.item.id === 'toggleaudittrail') {

        }
        setTimeout(function () { gridObj.hideSpinner() }, 200);
    }


    function referenceActionComplete(args) {
        if (args.requestType == "delete") {
            populateCostCenterTemplates();
        }
    }
    function referenceActionBegin(args) {
        if (args.requestType == "delete") {
            populateCostCenterTemplates();
        }
    }
</script>

