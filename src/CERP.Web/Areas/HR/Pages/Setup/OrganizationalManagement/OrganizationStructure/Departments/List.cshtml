@page "/HR/OrganizationStructure/Departments"
@using CERP.Localization;
@using Microsoft.AspNetCore.Mvc.Localization;
@using CERP.App;
@using CERP;
@using CERP.HR.Setup.OrganizationalManagement.OrganizationStructure;
@inject IHtmlLocalizer<CERPResource> L
@inject Volo.Abp.Json.IJsonSerializer JsonSerializer
@using CERP.App.Helpers;
@using Syncfusion.EJ2.Navigations;

@model CERP.Web.Areas.HR.Setup.OrganizationalManagement.OrganizationStructure.Pages.Departments.ListModel
@{
    ViewData["IsEditing"] = false;
    bool IsEditing = (bool)ViewData["IsEditing"];

    ViewData["Title"] = L["Departments"].Value;
    ViewData["IconClass"] = "far fa-building";
    ViewData["HeaderTitle"] = L["Departments"].Value.ToUpper();
    ViewData["SubTitle"] = $"{L["ListOf"]} {L["Departments"]}";
    ViewData["Area"] = "Setup";

    ViewData["IsList"] = false;
    ViewData["IsCreate"] = false;
    string cNT = $"{L["Add"].Value} {L["Department"].Value}";
    ViewData["CreateNewText"] = cNT;
    ViewData["CreateNewLink"] = "/Departments/Department";

    string TabPlaceholder = (bool)ViewData["IsEditing"] ? L["Area"].Value : L["Step"].Value;

    var alertanimation = new Syncfusion.EJ2.Popups.DialogAnimationSettings { Effect = Syncfusion.EJ2.Popups.DialogEffect.None };

    var initialToolBar = new List<object>() { new { text = "Show Actions", tooltipText = "Actions", prefixIcon = "e-custom-show-actions", id = "showActions" }, "Search", "ColumnChooser" };
    var fullToolBar = new List<object>() { new { text = "Hide Actions", tooltipText = "Actions", prefixIcon = "e-custom-hide-actions", id = "hideActions" }, new { text = "Toggle Grouping", tooltipText = "Grouping", prefixIcon = "zmdi-chevron-up", id = "toggleGrouping" }, new { text = "Audit Trail", tooltipText = "View Audit Trail", prefixIcon = "e-toggleaudittrail", id = "toggleaudittrail" }, new { text = "Toggle Detailed", tooltipText = "Toggle Detailed", prefixIcon = "e-toggledetailed", id = "toggleDetailed" }, "ExcelExport", "CsvExport", "Print", "Search", new { text = "Copy", tooltipText = "Copy", prefixIcon = "e-copy", id = "copy" }, new { text = "Copy With Header", tooltipText = "Copy With Header", prefixIcon = "e-copy", id = "copyHeader" }, "ColumnChooser" };

    List<object> departmentsCommands = new List<object>();
    departmentsCommands.Add(new { type = "Edit", buttonOption = new { iconCss = "e-icons e-edit", cssClass = "e-flat" } });
    departmentsCommands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "e-flat" } });
    departmentsCommands.Add(new { type = "Cancel", buttonOption = new { iconCss = "e-icons e-cancel-icon", cssClass = "e-flat" } });

    List<object> subDepartmentsCommands = new List<object>();
    subDepartmentsCommands.Add(new { type = "Edit", buttonOption = new { iconCss = "e-icons e-edit", cssClass = "e-flat" } });
    subDepartmentsCommands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "e-flat" } });
    subDepartmentsCommands.Add(new { type = "Cancel", buttonOption = new { iconCss = "e-icons e-cancel-icon", cssClass = "e-flat" } });

    List<OS_DepartmentStatus> departmentStatuses = Enum.GetValues(typeof(OS_DepartmentStatus)).Cast<OS_DepartmentStatus>().ToList();

    List<OS_PositionStatus> positionStatuses = Enum.GetValues(typeof(OS_PositionStatus)).Cast<OS_PositionStatus>().ToList();
    List<string> positionStatusesDescs = new List<string>();
    positionStatuses.ForEach(x => positionStatusesDescs.Add(EnumExtensions.GetDescription(x)));

    List<OS_SubDepartmentRelationshipType> subDepartmentRelationshipTypes = Enum.GetValues(typeof(OS_SubDepartmentRelationshipType)).Cast<OS_SubDepartmentRelationshipType>().ToList();
    List<string> subDepartmentRelationshipTypeDescs = new List<string>();
    subDepartmentRelationshipTypes.ForEach(x => subDepartmentRelationshipTypeDescs.Add(EnumExtensions.GetDescription(x)));

    var positionEdit = new
    {@@params = new Syncfusion.EJ2.DropDowns.DropDownList() { CssClass = "moduleTypeDropDown", BeforeOpen = "loadPositionStatusesDropdown", DataSource = positionStatusesDescs, Query = "new ej.data.Query()", AllowFiltering = true }
    };

List<object> positionsCommands = new List<object>();
positionsCommands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "e-flat" } });

List<OS_PositionLevel> positionLevels = Enum.GetValues(typeof(OS_PositionLevel)).Cast<OS_PositionLevel>().ToList();

//List<OS_ReviewPeriod> reviewPeriods = Enum.GetValues(typeof(OS_ReviewPeriod)).Cast<OS_ReviewPeriod>().ToList();

List<object> referenceCommands = new List<object>();
referenceCommands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "e-flat" } });

}
@section styles {
    @if ((bool)ViewData["IsEditing"])
    {
        <link href="~/libs/smartwizard/dist/css/smart_wizard_theme_circles.min.css" rel="stylesheet" />
    }

    <style>
        .customContentArea {
            position: unset !important;
        }
    </style>
}
@section scripts {

    <script>
        let isEditingDepartments = false;
        let curDepartmentsEditRow;

        let isEditingPositions = false;
        let curPositionsEditRow;

        let departments = [];
        let possibleSubDepartments = [];

        let costCenters = [];

        let costCentersGrid;
        function populateCostCenterTemplates() {
            try {
                costCenters = costCenters.filter(function (y) {
                    return costCentersGrid.dataSource.filter(function (x) { return x.id == y.id }).length == 0
                });
            } catch (e) {

            }

            let dataMS = [];
            for (let i = 0; i < costCenters.length; i++) {
                let item = costCenters[i];
                dataMS.push({ label: `${item.key} - ${item.value}`, value: item.id, data: item });
            }
            $('#costCentersIds').multiselect('dataprovider', dataMS);
            console.log(dataMS);
        }
        function loadCostCenterTemplates() {
            $('#costCentersLoader').slideDown(100);
            cERP.appServices.setup.lookup.dictionaryValue.getAllByValueType(ValueTypeModules.costCenters).done(function (data) {
                $('#costCentersLoader').slideUp(100);
                costCenters = data;
                populateCostCenterTemplates();
            });
        }

        $(document).ready(function () {
            let options = {
                buttonWidth: '100%',
                includeSelectAllOption: true,
                enableFiltering: false,
                enableClickableOptGroups: true,
                includeResetOption: true,
                includeResetDivider: true,
                enableCollapsibleOptGroups: true
            };
            $('#depHeadId').multiselect(options);
            $('#costCentersIds').multiselect(options);
            $('#subDepartmentsField').multiselect(options);
            $('#depPaygroup').multiselect(options);
            $('#depPaygrade').multiselect(options);
            //$('#reviewPeriod').multiselect(options);

            //$('#positionJobs').multiselect(options);
            //$('#positionTasks').multiselect(options);

            let gridObj = $("#DepartmentsGrid")[0].ej2_instances[0];
            //let positionsGrid = $("#PositionsGrid")[0].ej2_instances[0];
            let subDGrid = $("#SubDepartmentsGrid")[0].ej2_instances[0];


            $('#addCostCenterBtn').on('click', function () {
                loadCostCenterTemplates();
            });
            costCentersGrid = $('#CostCenterReferenceGrid')[0].ej2_instances[0];
            $('#submitCostCenterBtn').on('click', function () {
                if (ValidateForm('costCentersForm'))
                {
                    let selectedCostCenters = $('#costCentersIds').val();
                    for (var i = 0; i < selectedCostCenters.length; i++) {
                        let _function = costCenters.filter(function (x) { return x.id == selectedCostCenters[i] })[0];
                        _function.percentage = parseInt($('#costCenterPercentage').val());

                        let curSum = 0;
                        for (var i = 0; i < costCentersGrid.dataSource.length; i++) {
                            curSum += costCentersGrid.dataSource[i].percentage;
                        }
                        console.log(curSum);
                        if (curSum + _function.percentage <= 100)
                            costCentersGrid.dataSource.push(_function);
                        else {
                            toastr.error(`Sum of all percentages exceed 100`);
                            costCentersGrid.hideSpinner();
                        }

                        costCentersGrid.refresh();
                    }
                    populateCostCenterTemplates();
                }
            });


            //cERP.appServices.hR.organizationalManagement.organizationStructure.oS_JobTemplate.getList({}).done(function (data) {
            //    positionJobs = data.items;
            //    let dataMS = [];
            //    for (let i = 0; i < data.items.length; i++) {
            //        let item = data.items[i];
            //        dataMS.push({ label: `${item.code} - ${item.name}`, value: item.id, data: item });
            //    }
            //    $('#positionJobs').multiselect('dataprovider', dataMS);
            //});
            //cERP.appServices.hR.organizationalManagement.organizationStructure.oS_TaskTemplate.getList({}).done(function (data) {
            //    positionTasks = data.items;
            //    console.log(positionTasks);
            //    let dataMS = [];
            //    for (let i = 0; i < data.items.length; i++) {
            //        let item = data.items[i];
            //        dataMS.push({ label: `${item.code} - ${item.name}`, value: item.id, data: item });
            //    }
            //    $('#positionTasks').multiselect('dataprovider', dataMS);
            //});

            gridObj.showSpinner();
            $('#departmentsLoader').slideDown(100);
            cERP.appServices.hR.organizationalManagement.organizationStructure.oS_DepartmentTemplate.getAllDepartmentTemplates({}).done(function (data) {
                gridObj.hideSpinner();
                $('#departmentsLoader').slideUp(100);

                departments = data;
                gridObj.dataSource = departments;
                setTimeout(function () { gridObj.hideSpinner() }, 200);

                possibleSubDepartments = rfdc()(departments);

                let dataMS = [];
                for (let i = 0; i < data.length; i++) {
                    let item = data[i];
                    dataMS.push({ label: `${item.code} - ${item.name}`, value: item.id, data: item });
                }
                $('#subDepartmentsField').multiselect('dataprovider', dataMS);
                $('#subDepartmentsField').change();
            });

            cERP.appServices.hR.organizationalManagement.payrollStructure.pS_PayGroup.getAllPayGroups().done(function (data) {
                let dataMS = [];
                for (let i = 0; i < data.length; i++) {
                    let item = data[i];
                    dataMS.push({ label: `${item.code} - ${item.name}`, value: item.id, data: item });
                }
                $('#depPaygroup').multiselect('dataprovider', dataMS);
            });
            cERP.appServices.hR.organizationalManagement.payrollStructure.pS_PayGrade.getAllPayGrades().done(function (data) {
                let dataMS = [];
                for (let i = 0; i < data.length; i++) {
                    let item = data[i];
                    dataMS.push({ label: `${item.code} - ${item.name}`, value: item.id, data: item });
                }
                $('#depPaygrade').multiselect('dataprovider', dataMS);
            });

            @*$('#addPositionsBtn').on('click', function () {
                isEditingPositions = false;

                $('#submitPositionBtn').val('Create Position');
            });
            $('#submitPositionBtn').on('click', function (e) {
                e.preventDefault();
                if (ValidateForm('positionSpecificForm')) {
                    positionsGrid.showSpinner();
                    Swal.showLoading();

                    let form = [];
                    let positionDetails = $('#positionSpecificForm').find("textarea, input, select").serializeArray();
                    form = form.concat(positionDetails);

                    let params = objectifyForm(form);

                    let id = 0;
                    if (positionsGrid.dataSource.length > 0)
                        id = positionsGrid.dataSource[positionsGrid.dataSource.length - 1].id;

                    params.isEditing = isEditingPositions;

                    if (isEditingPositions) {
                        params.id = curPositionsEditRow.id;

                        //cERP.appServices.hR.leaveRequestTemplates.update()
                    }
                    else {

                        //cERP.appServices.hR.leaveRequestTemplates.update()
                    }


                    let selectedPositionJobs = $('#positionJobs').val();
                    console.log(selectedPositionJobs);
                    let selectedPositionJobTemplates = [];
                    params.positionJobTemplates = [];
                    for (var i = 0; i < selectedPositionJobs.length; i++) {
                        selectedPositionJobTemplates.push(positionJobs.filter(x => x.id == selectedPositionJobs[i])[0]);
                        let toAdd = { jobTemplate: selectedPositionJobTemplates[i] };
                        if (isEditingPositions) {
                            toAdd.positionTemplateId = curPositionsEditRow.id;
                        }
                        params.positionJobTemplates.push(toAdd);
                    }

                    let selectedPositionTasks = $('#positionTasks').val();
                    console.log(selectedPositionTasks);
                    let selectedPositionTaskTemplates = [];
                    params.positionTaskTemplates = [];
                    for (var i = 0; i < selectedPositionTasks.length; i++) {
                        selectedPositionTaskTemplates.push(positionTasks.filter(x => x.id == selectedPositionTasks[i])[0]);
                        let toAdd = { taskTemplate: selectedPositionTaskTemplates[i] };
                        if (isEditingPositions) {
                            toAdd.positionTemplateId = curPositionsEditRow.id;
                        }
                        params.positionTaskTemplates.push(toAdd);
                    }



                    params.departmentTemplateId = curDepartmentsEditRow.id;

                    let formData = new FormData();
                    formData.append("info", JSON.stringify(params));
                    let xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
                    formData.append("__RequestVerificationToken", xhrToken);

                    $.ajax({
                        url: "@Url.Content("~")/HR/OrganizationStructure/Positions?handler=PositionTemplate",
                        async: true,
                        type: "POST",
                        data: formData,
                        contentType: false,
                        processData: false,
                        success: function (data) {
                            Swal.hideLoading();
                            console.log(data);
                            if (isEditingPositions) {
                                positionsGrid.refresh(); // refresh the Grid.

                                swal.fire("Success", "Position has successfully been updated", "success");

                                for (let i = 0; i < positionsGrid.dataSource.length; i++) {
                                    if (positionsGrid.dataSource[i].id == data.id) {
                                        positionsGrid.dataSource[i] = data;
                                    }
                                }
                                positionsGrid.refresh();
                            }
                            else {
                                positionsGrid.dataSource.push(data);

                                positionsGrid.refresh(); // refresh the Grid.

                                swal.fire("Success", "Position has successfully been added", "success");
                            }
                            positionsGrid.hideSpinner();
                        },
                        error: function (err) {
                            Swal.hideLoading();
                            let errMsg = "";
                            if (typeof err !== 'undefined')  errMsg = err.responseJSON.Message;
                            if (isEditingPositions)
                                swal.fire("Failed", errMsg + " \nPosition couldn't be updated, please fix all errors and try again.", "error");
                            else
                                swal.fire("Failed", errMsg + " \nPosition couldn't be added, please fix all errors and try again.", "error");

                            console.log(err);
                            positionsGrid.hideSpinner();
                        }
                    });
                }
                else {
                    Swal.close();
                    Swal.hideLoading();
                }
            });*@

            $('#addDepartmentsBtn').on('click', function () {
                isEditingDepartments = false;

                $('#submitDepartmentBtn').val('Create Department');
            });

            $("#submitSubDepartmentBtn").on("click", function (e) {
                // Navigate previous
                e.preventDefault();
                e.stopImmediatePropagation();

                if (ValidateForm('subDepartmentsForm')) {
                    let grid = $("#SubDepartmentsGrid")[0].ej2_instances[0];

                    let subDepartments = $("#subDepartmentsField").val();
                    console.log(subDepartments);
                    let selectedSubDepartments = possibleSubDepartments.filter(function (x) { return subDepartments.includes(x.id.toString()); });
                    console.log(selectedSubDepartments);

                    let existantDeps = grid.dataSource.filter(function (x) { console.log(x.subDepartmentTemplate.id.toString()); return subDepartments.includes(x.subDepartmentTemplate.id.toString()); });
                    for (var i = 0; i < existantDeps.length; i++) {
                        toastr.error(`${selectedSubDepartments[i].name} - already exists in the department`);
                        grid.hideSpinner();
                    }
                    if (existantDeps.length > 0) {
                        return;
                    }
                    @*if (selectedSubDepartments.length > 1 && grid.dataSource.length == 0) {
                        toastr.error('A @EnumExtensions.GetDescription(OS_DepartmentStatus.Active) sub-department is required to perform this action');
                        grid.hideSpinner();
                        return;
                    }*@

                    for (var i = 0; i < selectedSubDepartments.length; i++)
                    {
                        let subDepartmentType = $('#subDepartmentTypeField').val();
                        let subDepartmentRelationshipTypeDescription = $('option:selected', '#subDepartmentTypeField').attr('data-value');

                        let subDepartmentName = $('#subDepartmentName').val();


                        if (selectedSubDepartments.length > 1) {
                            subDepartmentType = "@OS_SubDepartmentRelationshipType.ReportingTo";
                            subDepartmentName = selectedSubDepartments[i].subDepartmentCode + " - " + selectedSubDepartments[i].subDepartmentName;
                        }
                        else if (subDepartmentType == '@OS_SubDepartmentRelationshipType.Assistant') {
                            let existantDefaults = grid.dataSource.filter(function (x) {
                                console.log(x.subDepartmentTemplate.subDepartmentType); return x.subDepartmentTemplate.subDepartmentType == subDepartmentType
                            });

                            if (existantDefaults.length > 0) {
                                toastr.error('A @EnumExtensions.GetDescription(OS_SubDepartmentRelationshipType.Assistant) Sub department already exists');
                                grid.hideSpinner();
                                return;
                            }
                        }
                        let id = 0;
                        if (grid.dataSource.length > 0) {
                            id = grid.dataSource[grid.dataSource.length - 1].id;
                        }

                        //let isDefault = subDepartmentType == "@OS_SubDepartmentRelationshipType.ReportingTo";
                        grid.dataSource.push({ id: id + 1, /*isDefault,*/ subDepartmentTemplate: selectedSubDepartments[i], name: subDepartmentName, subDepartmentRelationshipType: subDepartmentType, subDepartmentRelationshipTypeDescription }); // refresh the Grid.
                        toastr.info(`${subDepartmentName} - added as sub department for the department`);
                    }
                    grid.refresh(); // refresh the Grid.
                    grid.hideSpinner();
                }
            });
            $('#submitDepartmentBtn').on('click', function (e) {
                e.preventDefault();
                if (ValidateForm('departmentSpecificForm')) {
                    gridObj.showSpinner();
                    Swal.showLoading();

                    let form = [];
                    let departmentDetails = $('#departmentSpecificForm').find("textarea, input, select").serializeArray();
                    form = form.concat(departmentDetails);

                    let params = objectifyForm(form);

                    let id = 0;
                    if (gridObj.dataSource.length > 0)
                        id = gridObj.dataSource[gridObj.dataSource.length - 1].id;

                    params.isEditing = isEditingDepartments;

                    if (isEditingDepartments) {
                        params.id = curDepartmentsEditRow.id;

                        //cERP.appServices.hR.leaveRequestTemplates.update()
                    }
                    else {

                        //cERP.appServices.hR.leaveRequestTemplates.update()
                    }

                    let selectedCostCenters = costCentersGrid.dataSource.map(function (item) { return { costCenter: item, percentage: item.percentage } });;
                    params.departmentCostCenterTemplates = [];
                    let ccSum = 0;
                    for (var i = 0; i < selectedCostCenters.length; i++) {
                        let toAdd = selectedCostCenters[i]
                        if (isEditingDepartments) {
                            toAdd.deparmtentTemplateId = curDepartmentsEditRow.id;
                        }
                        ccSum += toAdd.costCenter.percentage;
                        params.departmentCostCenterTemplates.push(toAdd);
                    }
                    console.log(ccSum);
                    if (ccSum != 100) {
                        Swal.hideLoading();
                        swal.fire("Failed", "Sum of all cost center percentages must be 100%", "error");

                        gridObj.hideSpinner();
                        return;
                    }
                    //let selectedPositions = $('#positionIds').val();
                    //console.log(selectedPositions);
                    //let selectedPositionTemplates = [];
                    //params.positionTemplates = positionsGrid.dataSource;
                    //for (var i = 0; i < selectedPositions.length; i++) {
                    //    selectedPositionTemplates.push(positions.filter(x => x.id == selectedPositions[i])[0]);
                    //    params.positionTemplates.push(selectedPositionTemplates[i]);
                    //}

                    //let selectedDepHead = $('#depHeadId').val();
                    //let selectedDepHeadTemplate = selectedPositionTemplates.push(positions.filter(x => x.id == selectedDepHead)[0]);
                    //params.departmentHead = { positionTemplate: selectedDepHeadTemplate };

                    params.subDepartmentTemplates = subDGrid.dataSource;

                    let formData = new FormData();
                    formData.append("info", JSON.stringify(params));
                    let xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
                    formData.append("__RequestVerificationToken", xhrToken);
                    console.log(params);

                    $.ajax({
                        url: "?handler=DepartmentTemplate",
                        async: true,
                        type: "POST",
                        data: formData,
                        contentType: false,
                        processData: false,
                        success: function (data) {
                            Swal.hideLoading();
                            console.log(data);
                            if (isEditingDepartments) {
                                gridObj.refresh(); // refresh the Grid.

                                swal.fire("Success", "Department has successfully been updated", "success");

                                for (let i = 0; i < gridObj.dataSource.length; i++) {
                                    if (gridObj.dataSource[i].id == data.id) {
                                        gridObj.dataSource[i] = data;
                                    }
                                }
                                gridObj.refresh();
                            }
                            else {
                                gridObj.dataSource.push(data);

                                gridObj.refresh(); // refresh the Grid.

                                swal.fire("Success", "Department has successfully been added", "success");
                            }
                            gridObj.hideSpinner();
                        },
                        error: function (err) {
                            Swal.hideLoading();
                            console.log(err);
                            let errMsg = typeof err !== 'undefined' ? err.responseJSON.Message : '';
                            if (isEditingDepartments)
                                swal.fire("Failed", errMsg + " \nDepartment couldn't be updated, please fix all errors and try again.", "error");
                            else
                                swal.fire("Failed", errMsg + " \nDepartment couldn't be added, please fix all errors and try again.", "error");

                            console.log(err);
                            gridObj.hideSpinner();
                        }
                    });
                }
                else {
                    Swal.close();
                    Swal.hideLoading();
                }
            });
        });
    </script>
}
<partial name="_DefaultPageHeader" />
<div class="site-content customContentArea">
    <div class="control-section">
        <div class="areaHeader" style="display:flex;">
            <div id="departmentsLoader" class="pull-left loader-inline" style="display:none"></div>
            <div class="areaHeaderTitle">
                <span id="areHeadertitle" class="areaHeaderTitleNode menu-text">Current Departments</span>
                @*<span id="" class="areaHeaderTitleInNode menu-text"> > </span>*@
                @*<span id="subTitle" class="menu-text" style="padding-left:15px; font-size: 28px; font-family:Roboto; font-weight:200;">@ViewData["SubTitle"]</span>*@
            </div>
            @*<h3 class="control-label" style="flex-grow: 1; margin:0">Approval Route</h3>*@
            <div class="pull-right text-right p-r-20 areaHeaderBtnSec">
                @*<div class="clearfix margin-15"></div>*@
                <a id="addDepartmentsBtn" onclick="areaHeaderBtnClick(event); isEditingDepartments = false;" class="btn btn-outline-dark areaHeaderBtn"><i class="fa fa-plus fa-fw"></i> Add New</a>
            </div>
        </div>
        <form id="departmentsForm" onkeydown="return event.key != 'Enter';" class="row areaForm" method="post" data-toggle="validator" style="display: none; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
            <ejs-tab id="departmentFormTab" animation="ViewBag.animation" height="250px">
                <e-tab-tabitems>
                    <e-tab-tabitem header="@(new TabHeader { Text = "General" })" content="#generalFieldsInfo"></e-tab-tabitem>
                    <e-tab-tabitem header="@(new TabHeader { Text = "Sub Departments" })" content="#subDepartmentsInfo"></e-tab-tabitem>
                    @*<e-tab-tabitem header="@(new TabHeader { Text = "Positions" })" content="#positionsInfo"></e-tab-tabitem>*@
                    <e-tab-tabitem header="@(new TabHeader { Text = "Cost Centers" })" content="#costCentersTab"></e-tab-tabitem>
                </e-tab-tabitems>
            </ejs-tab>

            <div id="generalFieldsInfo" class="areaForm" style="display:none">
                <div id="departmentSpecificForm">
                    <div class="row">
                        <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                            <div class="form-group" style="padding: 15px">
                                <div class="col-sm-4" style="">
                                    <label class="p-t-5 control-label pull-right">Department Code:</label>
                                </div>
                                <div class="col-sm-8" style="">
                                    <input type="text" id="departmentCode" name="Code" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" required>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                            <div class="form-group" style="padding: 15px">
                                <div class="col-sm-4" style="">
                                    <label class="p-t-5 control-label pull-right">Title:</label>
                                </div>
                                <div class="col-sm-8" style="">
                                    <input type="text" id="departmentTitle" name="Name" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control " required>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                            <div class="form-group" style="padding: 15px">
                                <div class="col-sm-4" style="">
                                    <label class="p-t-5 control-label pull-right">Title (In Arabic):</label>
                                </div>
                                <div class="col-sm-8" style="">
                                    <input type="text" id="departmentTitleLocalized" name="NameLocalized" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                            <div class="form-group" style="padding: 15px">
                                <div class="col-sm-4" style="">
                                    <label class="p-t-5 control-label pull-right">Valid From:</label>
                                </div>
                                <div class="col-sm-8" style="">
                                    <input type="date" id="validityFromDate" name="ValidityFromDate" class="text-left form-control inline pull-left" required>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                            <div class="form-group" style="padding: 15px">
                                <div class="col-sm-4" style="">
                                    <label class="p-t-5 control-label pull-right">Valid To:</label>
                                </div>
                                <div class="col-sm-8" style="">
                                    <input type="date" id="validityToDate" name="ValidityToDate" class="text-left form-control inline pull-left" required>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                            <div class="form-group" style="padding: 15px">
                                <div class="col-sm-4" style="">
                                    <label class="p-t-5 control-label pull-right">Pay Group:</label>
                                </div>
                                <div class="col-sm-8" style="">
                                    <select id="depPaygroup" name="PayGroupId" class="text-left form-control inline pull-left" required>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                            <div class="form-group" style="padding: 15px">
                                <div class="col-sm-4" style="">
                                    <label class="p-t-5 control-label pull-right">Pay Grade:</label>
                                </div>
                                <div class="col-sm-8" style="">
                                    <select id="depPaygrade" name="PayGradeId" class="text-left form-control inline pull-left" required>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            @*<div id="positionsInfo" class="areaForm" style="display:none;">
                <div class="row">
                    <div class="col-md-12">
                        <div class="panel-body p-t-0" style="">
                            
                            <div id="positionsCS" class="control-section">
                                <ejs-grid id="PositionsGrid" enableAutoFill="true" dataBound="dataBoundResponsive" commandClick="positionCommandClick"
                                          showColumnChooser="true" allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true"
                                          hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true" actionBegin="positionActionBegin" actionComplete="positionActionComplete"
                                          allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" allowTextWrap="true" textWrapSettings="@(new Syncfusion.EJ2.Grids.GridTextWrapSettings() { WrapMode = Syncfusion.EJ2.Grids.WrapMode.Header })"
                                          toolbarClick="defaultToolbarClick" toolbar="@initialToolBar"
                                          allowPaging="true" allowResizing="true">

                                    <e-grid-columns>
                                        <e-grid-column field="id" headerText="Id" isPrimaryKey="true" textAlign="Center" visible="false" showInColumnChooser="false"></e-grid-column>
                                        <e-grid-column headerText="Name" textAlign="Center" columns='new List<Syncfusion.EJ2.Grids.GridColumn>() {
                            new Syncfusion.EJ2.Grids.GridColumn() { Field= "name", HeaderText = "English", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center },
                            new Syncfusion.EJ2.Grids.GridColumn() { Field= "nameLocalized", HeaderText = "Local", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center }
                        }'></e-grid-column>
                                        <e-grid-column field="code" headerText="Code" textAlign="Center"></e-grid-column>
                                        <e-grid-column field="costCenter.value" headerText="Cost Center" textAlign="Center"></e-grid-column>
                                        <e-grid-column headerText="Validity" textAlign="Center" columns='new List<Syncfusion.EJ2.Grids.GridColumn>() {
                            new Syncfusion.EJ2.Grids.GridColumn() { Field= "validityFromDate", Type="date", Format="yMd", AllowEditing=true, EditType="datepicker", HeaderText = "From", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center },
                            new Syncfusion.EJ2.Grids.GridColumn() { Field= "validityToDate", Type="date", Format="yMd", AllowEditing=true, EditType="datepicker", HeaderText = "To", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center }
                        }'></e-grid-column>

                                        <e-grid-column headerText="Actions" textAlign="Center" commands="positionsCommands"></e-grid-column>
                                    </e-grid-columns>

                                    <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                    <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="false"></e-grid-editSettings>
                                    <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                    <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                </ejs-grid>
                            </div>
                        </div>
                    </div>
                </div>
            </div>*@
            <div id="subDepartmentsInfo" class="areaForm" style="display:none;">
                <div class="row">
                    <div class="col-md-12">
                        <div class="panel-body p-t-0" style="">
                            <div class="areaHeader" style="display:flex;">
                                <div id="subDepartmentsLoader" class="pull-left loader-inline" style="display:none"></div>
                                <div class="areaHeaderTitle">
                                    <span id="areHeadertitle" class="areaHeaderTitleNode menu-text">Sub Departments</span>
                                    @*<span id="" class="areaHeaderTitleInNode menu-text"> > </span>*@
                                    @*<span id="subTitle" class="menu-text" style="padding-left:15px; font-size: 28px; font-family:Roboto; font-weight:200;">@ViewData["SubTitle"]</span>*@
                                </div>
                                @*<h3 class="control-label" style="flex-grow: 1; margin:0">Approval Route</h3>*@
                                <div class="pull-right text-right p-r-20 areaHeaderBtnSec">
                                    @*<div class="clearfix margin-15"></div>*@
                                    <a id="addSubDepartmentBtn" onclick="areaHeaderBtnClick(event);" class="btn btn-outline-dark areaHeaderBtn"><i class="fa fa-plus fa-fw"></i> Add New</a>
                                </div>
                            </div>
                            <div role="form" id="subDepartmentsForm" class="row areaForm" method="post" data-toggle="validator" style="display: none; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
                                <div class="row">
                                    <div class="col-lg-3 col-md-3 col-sm-3 col-12">
                                        <div class="form-group">
                                            <label class="p-t-5 control-label">Sub Department:</label>
                                            <select id="subDepartmentsField" multiple="multiple" onchange="if ($('#subDepartmentsField').val().length > 1) { $('#subDepartmentTypeField').attr('readonly', 'readonly'); $('#subDepartmentTypeField').val(''); $('#subDepartmentName').val('[Auto]'); $('#subDepartmentName').attr('readonly','readonly'); } else { $('#subDepartmentTypeField').removeAttr('readonly'); $('#subDepartmentName').removeAttr('readonly'); $('#subDepartmentName').val($('option:selected', '#subDepartmentsField').text()); $('#subDepartmentTypeField').val('@OS_SubDepartmentRelationshipType.ReportingTo');  }" name="SubDepartment" class="form-control" required>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="col-lg-3 col-md-3 col-sm-3 col-12">
                                        <div class="form-group">
                                            <label class="p-t-5 control-label">Name:</label>
                                            <input type="text" id="subDepartmentName" name="SubDepartmentName" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control " required>
                                        </div>
                                    </div>
                                    <div class="col-lg-3 col-md-3 col-sm-3 col-12">
                                        <div class="form-group">
                                            <label class="p-t-5 control-label">Sub Department Type:</label>
                                            <select id="subDepartmentTypeField" name="subDepartmentRelationshipTypeDescription" class="form-control" required>
                                                @for (int i = 0; i < subDepartmentRelationshipTypes.Count; i++)
                                                {
                                                    <option value="@subDepartmentRelationshipTypes[i]" data-value="@EnumExtensions.GetDescription(subDepartmentRelationshipTypes[i])">@EnumExtensions.GetDescription(subDepartmentRelationshipTypes[i])</option>
                                                }
                                            </select>
                                        </div>
                                    </div>
                                    <div class="col-lg-3 col-md-3 col-sm-3 col-12">
                                        <label class="p-t-5 control-label"></label>
                                        <button id="submitSubDepartmentBtn" type="button" class="btn btn-success btn-block">Add Sub Department</button>
                                    </div>
                                </div>
                            </div>
                            <div id="subDepartmentsCS" class="control-section">
                                <ejs-grid id="SubDepartmentsGrid" enableAutoFill="true" dataBound="dataBoundResponsive"
                                          allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true"
                                          hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true"
                                          allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" dataSource="new List<dynamic>()"
                                          toolbar="@initialToolBar" toolbarClick="defaultToolbarClick" commandClick="subDepartmentsCommandClick" actionBegin="subDepartmentsActionBegin" actionComplete="subDepartmentsActionComplete"
                                          allowPaging="true" allowResizing="true">

                                    <e-grid-columns>
                                        <e-grid-column field="subDepartmentTemplate.id" headerText="Id" textAlign="Center" visible="false" isPrimaryKey="true" showInColumnChooser="false"></e-grid-column>
                                        <e-grid-column field="subDepartmentTemplate.name" allowEditing="false" headerText="Sub Department" textAlign="Center"></e-grid-column>
                                        <e-grid-column field="subDepartmentTemplate.code" allowEditing="false" headerText="Code" textAlign="Center"></e-grid-column>
                                        <e-grid-column field="name" headerText="Name" allowEditing="true" validationRules="new { required = true, minLength = 1 }" textAlign="Center"></e-grid-column>
                                        @*<e-grid-column field="isDefault" allowEditing="false" headerText="Default" displayAsCheckBox="true" textAlign="Center"></e-grid-column>*@
                                        <e-grid-column field="subDepartmentRelationshipTypeDescription" allowEditing="false" headerText="Sub Department Type" textAlign="Center"></e-grid-column>
                                        <e-grid-column headerText="Actions" textAlign="Center" commands="subDepartmentsCommands"></e-grid-column>
                                    </e-grid-columns>

                                    <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                    <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true"></e-grid-editSettings>
                                    <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                    <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                </ejs-grid>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="costCentersTab" class="areaForm" style="display:none">
                <div class="row">
                    <div class="col-md-12">
                        <div class="panel-body p-t-0" style="">
                            <div class="areaHeader" style="display:flex;">
                                <div id="costCentersLoader" class="pull-left loader-inline" style="display:none"></div>
                                <div class="areaHeaderTitle">
                                    <span id="areHeadertitle" class="areaHeaderTitleNode menu-text">Cost Centers</span>
                                </div>
                                <div class="pull-right text-right p-r-20 areaHeaderBtnSec">
                                    <a id="addCostCenterBtn" onclick="areaHeaderBtnClick(event);" class="btn btn-outline-dark areaHeaderBtn"><i class="fa fa-plus fa-fw"></i> Add New</a>
                                </div>
                            </div>
                            <div role="form" id="costCentersForm" class="row areaForm" method="post" data-toggle="validator" style="display: none; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
                                <div class="row">
                                    <div class="col-lg-4 col-md-4 col-sm-4 col-12">
                                        <div class="form-group">
                                            <label class="p-t-5 control-label">Cost Centers:</label>
                                            <select id="costCentersIds" name="CostCentersIds" multiple="multiple" class="form-control">
                                            </select>
                                        </div>
                                    </div>
                                    <div class="col-lg-4 col-md-4 col-sm-4 col-12">
                                        <div class="form-group">
                                            <label class="p-t-5 control-label">Percentage:</label>
                                            <input type="number" min="1" max="100" value="" id="costCenterPercentage" name="Percentage" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                        </div>
                                    </div>
                                    <div class="col-lg-3 col-md-3 col-sm-3 col-12">
                                        <label class="p-t-5 control-label"></label>
                                        <button id="submitCostCenterBtn" type="button" class="btn btn-success btn-block">Add Cost Center(s)</button>
                                    </div>
                                </div>
                            </div>
                            <div id="costCentersCS" class="control-section">
                                <ejs-grid id="CostCenterReferenceGrid" enableAutoFill="true" dataBound="dataBoundResponsive"
                                          allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true"
                                          hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true"
                                          allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" dataSource="new List<dynamic>()"
                                          toolbar="@initialToolBar" toolbarClick="defaultToolbarClick" actionBegin="referenceActionBegin" actionComplete="referenceActionComplete"
                                          allowPaging="true" allowResizing="true">

                                    <e-grid-columns>
                                        <e-grid-column field="id" headerText="Id" textAlign="Center" visible="false" isPrimaryKey="true" showInColumnChooser="false"></e-grid-column>
                                        <e-grid-column field="key" allowEditing="false" headerText="Code" textAlign="Center"></e-grid-column>
                                        <e-grid-column field="value" allowEditing="false" headerText="Name" textAlign="Center"></e-grid-column>
                                        <e-grid-column field="percentage" allowEditing="true" headerText="Percentage" textAlign="Center"></e-grid-column>
                                        <e-grid-column headerText="Actions" textAlign="Center" commands="referenceCommands"></e-grid-column>
                                    </e-grid-columns>

                                    <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                    <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true"></e-grid-editSettings>
                                    <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                    <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                </ejs-grid>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12">
                    <input id="submitDepartmentBtn" type="button" class="m-t-20 btn btn-success btn-block" value="Create Department" required />
                </div>
            </div>
        </form>
        <div id="departmentsCS" class="control-section">
            <ejs-grid id="DepartmentsGrid" enableAutoFill="true" dataBound="dataBoundResponsive" commandClick="commandClick"
                      showColumnChooser="true" allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true"
                      hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true" actionBegin="departmentActionBegin" actionComplete="departmentActionComplete"
                      allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" allowTextWrap="true" textWrapSettings="@(new Syncfusion.EJ2.Grids.GridTextWrapSettings() { WrapMode = Syncfusion.EJ2.Grids.WrapMode.Header })"
                      toolbarClick="toolbarClick" toolbar="@initialToolBar"
                      allowPaging="true" allowResizing="true" dataSource="new List<dynamic>()">

                <e-grid-columns>
                    <e-grid-column field="id" headerText="Id" textAlign="Center" visible="false" isPrimaryKey="true" showInColumnChooser="false"></e-grid-column>
                    <e-grid-column headerText="Name" textAlign="Center" columns='new List<Syncfusion.EJ2.Grids.GridColumn>() {
                        new Syncfusion.EJ2.Grids.GridColumn() { Field= "name", HeaderText = "English", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center },
                        new Syncfusion.EJ2.Grids.GridColumn() { Field= "nameLocalized", HeaderText = "Local", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center }
                    }'></e-grid-column>
                    <e-grid-column field="getDepartmentStructureString" headerText="Structure" textAlign="Center"></e-grid-column>
                    <e-grid-column field="code" headerText="Code" textAlign="Center"></e-grid-column>
                    @*<e-grid-column field="getDepartmentPositionsString" headerText="Positions" textAlign="Center"></e-grid-column>*@
                    @*<e-grid-column field="departmentHead.name" headerText="Head" textAlign="Center"></e-grid-column>*@
                    @*<e-grid-column field="costCenter.value" headerText="Cost Center" textAlign="Center"></e-grid-column>*@
                    @*<e-grid-column field="reviewPeriodDescription" headerText="Review period" textAlign="Center"></e-grid-column>*@
                    <e-grid-column field="payGroup.name" headerText="Pay Group" textAlign="Center"></e-grid-column>
                    <e-grid-column field="payGrade.name" headerText="Pay Grade" textAlign="Center"></e-grid-column>
                    <e-grid-column headerText="Validity" textAlign="Center" columns='new List<Syncfusion.EJ2.Grids.GridColumn>() {
                        new Syncfusion.EJ2.Grids.GridColumn() { Field= "validityFromDate", Type="date", Format="E, MMMM d, y", AllowEditing=true, EditType="datepicker", HeaderText = "From", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center },
                        new Syncfusion.EJ2.Grids.GridColumn() { Field= "validityToDate", Type="date", Format="E, MMMM d, y", AllowEditing=true, EditType="datepicker", HeaderText = "To", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center }
                    }'></e-grid-column>

                    <e-grid-column headerText="Actions" textAlign="Center" commands="departmentsCommands"></e-grid-column>
                </e-grid-columns>

                <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="false"></e-grid-editSettings>
                <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
            </ejs-grid>
        </div>
        <div id="auditTrail" style="display:none;">
            <partial name="_DataAuditTrailPartialView" model="@Model.GetDataAuditTrailModel()" />
        </div>
    </div>

</div>
<ejs-dialog id="alert_dialog" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy with Header" content="Atleast one row should be selected to copy with header">
    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
    </e-dialog-buttons>
</ejs-dialog>
<ejs-dialog id="alert_dialog_1" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy" content="Atleast one row should be selected to copy">
    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
    </e-dialog-buttons>
</ejs-dialog>

<script>
    let isAuditTrail = false;
    function alertBtnClick() {
        let dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
        let dialogObj1 = document.getElementById('alert_dialog_1').ej2_instances[0];
        dialogObj.hide();
        dialogObj1.hide();
    }

    function toolbarClick(args) {
        let gridObj = document.getElementById("DepartmentsGrid").ej2_instances[0];

        if (args.item.id === 'DepartmentsGrid_pdfexport') {
            gridObj.pdfExport();
        }
        if (args.item.id === 'DepartmentsGrid_excelexport') {
            gridObj.excelExport();
        }
        if (args.item.id === 'DepartmentsGrid_csvexport') {
            gridObj.csvExport();
        }
        if (this.getSelectedRecords().length > 0) {
            let withHeader = false;
            if (args.item.id === 'copyHeader') {
                withHeader = true;
            }
            this.copy(withHeader);
        }
        else {
            if (args.item.id === 'copyHeader') {
                let dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                dialogObj.show();
            }
            else if (args.item.id === 'copy') {
                let dialogObj = document.getElementById('alert_dialog_1').ej2_instances[0];
                dialogObj.show();
            }
        }
        if (args.item.id === 'showActions') {
            gridObj.toolbar = [{ text: "Hide Actions", tooltipText: "Actions", prefixIcon: "e-custom-hide-actions", id: "hideActions" }, { text: "Toggle Grouping", tooltipText: "Grouping", prefixIcon: "e-custom-group-toggle", id: "toggleGrouping" }, { text: "Audit Trail", tooltipText: "View Audit Trail", prefixIcon: "e-custom-audit-trail", id: "toggleaudittrail" },  { text: "Toggle Detailed", tooltipText: "Toggle Detailed", prefixIcon: "e-toggledetailed", id: "toggleDetailed" }, "ExcelExport", "PdfExport", "CsvExport", "Print", "Search", { text: "Copy", tooltipText: "Copy", prefixIcon: "e-copy", id: "copy" }, { text: "Copy With Header", tooltipText: "Copy With Header", prefixIcon: "e-copy", id: "copyHeader" }, "ColumnChooser"];
            gridObj.refresh();
        }
        if (args.item.id === 'hideActions') {
            gridObj.toolbar = [{ text: "Show Actions", tooltipText: "Actions", prefixIcon: "e-custom-show-actions", id: "showActions" }, "Search", "ColumnChooser"];
            gridObj.showColumnChooser = true;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleGrouping') {
            gridObj.allowGrouping = !gridObj.allowGrouping;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleDetailed') {
            let visCount = 0;
            for (let i = 0; i < gridObj.columns.length; i++) {
                if (gridObj.columns[i].visible) visCount++;
            }
            if (visCount == gridObj.columns.length) {
                for (let i = 0; i < gridObj.columns.length; i++) {
                    let col = gridObj.columns[i];
                    if (typeof col.customAttributes != 'undefined' && typeof col.customAttributes.id != 'undefined' && col.customAttributes.id == 'detailed')
                        gridObj.showHider.hide(col.headerText, 'headerText');
                    else if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
            else {
                for (let i = 0; i < gridObj.columns.length; i++) {
                    let col = gridObj.columns[i];
                    if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
        }
        if (args.item.id === 'toggleaudittrail') {

            if (!isAuditTrail) {
                var agtGrid = $("#AuditTrailGrid")[0].ej2_instances[0];
                gridObj.showSpinner();

                $.ajax({
                    url: '?handler=DataAuditTrail',
                    async: true,
                    type: "GET",
                    data: {},
                    success: function (data) {
                        gridObj.hideSpinner();

                        //agtGrid.childGrid.childGrid.dataSource = data.tertiaryDS;
                        //agtGrid.childGrid.dataSource = data.secondaryDS;
                        agtGrid.dataSource = data.ds;
                        agtGrid.refresh();

                        $(".customContentArea").css('position', 'unset');
                        $("#auditTrail").slideDown(200);
                    },
                    error: function (data) {
                        gridObj.hideSpinner();

                        $(".customContentArea").css('position', 'absolute');
                        $("#auditTrail").slideUp(200);

                        swal.fire('Failed', `An error occured while generating the audit trail`, 'error');
                    }
                });

            }
            else {
                $(".customContentArea").css('position', 'absolute');
                $("#auditTrail").slideUp(200);
            }

            isAuditTrail = !isAuditTrail;
        }
        setTimeout(function () { gridObj.hideSpinner() }, 200);
    }
    function commandClick(args) {
        let gridObj = document.getElementById("DepartmentsGrid").ej2_instances[0];

        if (args.commandColumn.type == "Edit") {
            isEditingDepartments = true;
            let params = args.rowData;
            curDepartmentsEditRow = params;

            toggleAreaFormBtn('departmentsForm', false);

            setTimeout(function () {
                $('#submitDepartmentBtn').val('Update Department');
                toggleAreaFormBtn('departmentsForm', true);
            }, 200);

            FillFormByObject(params, $('#departmentsForm'));

            let subDepartmentsGrid = $("#SubDepartmentsGrid")[0].ej2_instances[0];
            //let positionsGrid = $("#PositionsGrid")[0].ej2_instances[0];

            $('#departmentsLoader').slideDown();

            $('#depHeadId').multiselect('deselectAll', false);
            $('#depHeadId').multiselect('updateButtonText');
            cERP.appServices.hR.organizationalManagement.organizationStructure.oS_DepartmentTemplate.getDepartmentTemplate(params.id).done(function (data) {
                console.log(data);
                $('#departmentsLoader').slideUp();
                curDepartmentsEditRow = data;

                possibleSubDepartments = rfdc()(departments.filter(function (x) { return x.id != data.id }));

                let dataMS = [];
                for (let i = 0; i < possibleSubDepartments.length; i++) {
                    let item = possibleSubDepartments[i];
                    dataMS.push({ label: `${item.code} - ${item.name}`, value: item.id, data: item });
                }
                $('#subDepartmentsField').multiselect('dataprovider', dataMS);
                $('#subDepartmentsField').change();

                //for (var i = 0; i < data.positionTemplates.length; i++) {
                //    let posTemplate = data.positionTemplates[i];
                //    cERP.appServices.setup.lookup.dictionaryValue.get(data.costCenterId).done(function (d) {
                //        posTemplate.costCenter = d;
                //        positionsGrid.refresh();
                //    });
                //}

                costCentersGrid.dataSource = [];
                costCentersGrid.dataSource = params.departmentCostCenterTemplates.map(function (item) { item.costCenter.percentage = item.percentage; return item.costCenter });
                costCentersGrid.refresh();

                //positionsGrid.dataSource = data.positionTemplates;
                //positionsGrid.refresh();
                //setTimeout(function () { positionsGrid.hideSpinner() }, 200);

                subDepartmentsGrid.dataSource = data.subDepartmentTemplates;
                subDepartmentsGrid.refresh();
                setTimeout(function () { subDepartmentsGrid.hideSpinner() }, 200);

                //let positionIds = [];
                //for (var i = 0; i < data.positionTemplates.length; i++) {
                //    positionIds.push(data.positionTemplates[i].id);
                //}
                //$('#depHeadId').multiselect('select', data.departmentHeadId);
            });
        }
        else if (args.commandColumn.type == "Copy") {
            this.copy(false);
        }

        setTimeout(function () { gridObj.hideSpinner() }, 200);
    }
    function departmentActionComplete(args) {
        let gridObj = document.getElementById("DepartmentsGrid").ej2_instances[0];
        setTimeout(function () { gridObj.hideSpinner() }, 200)
    }
    function departmentActionBegin(args) {
        if (args.requestType == "delete") {
            let gridObj = document.getElementById("DepartmentsGrid").ej2_instances[0];
            Swal.showLoading();

            let formData = new FormData();
            formData.append("departments", JSON.stringify(args.data));
            let xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
            formData.append("__RequestVerificationToken", xhrToken);

            $.ajax({
                url: '?handler=DepartmentTemplate',
                async: true,
                type: "DELETE",
                data: formData,
                contentType: false,
                processData: false,
                success: function (data) {
                    gridObj.refresh();
                    setTimeout(function () { gridObj.hideSpinner() }, 200);
                    swal.fire("Success", "Department(s) has successfully been deleted", "success");

                    if ($('#departmentsForm').css('display') !== 'none') {
                        $('#departmentsForm').slideUp();
                    }
                },
                error: function (err) {
                    gridObj.refresh();
                    setTimeout(function () { gridObj.hideSpinner() }, 200);
                    swal.fire("Failed", "Department(s) couldn't be deleted, please fix all errors and try again.", "error");

                    console.log(err);
                }
            });
            //gridObj.refresh();
            //setTimeout(function () { gridObj.hideSpinner() }, 200);

            return true;
        }
    }

    @*function positionCommandClick(args) {
        let gridObj = document.getElementById("PositionsGrid").ej2_instances[0];

        if (args.commandColumn.type == "Edit") {
            isEditingPositions = true;
            let params = args.rowData;
            curPositionsEditRow = params;

            toggleAreaFormBtn('positionsForm', false);

            setTimeout(function () {
                $('#submitPositionBtn').val('Update Position');
                toggleAreaFormBtn('positionsForm', true);
            }, 200);

            FillDivFormByObject(params, $('#positionsForm :input'));
            $('#departmentsLoader').slideDown(100);

            cERP.appServices.hR.organizationalManagement.organizationStructure.oS_PositionTemplate.get(params.id).done(function (data) {
                console.log(data);
                $('#departmentsLoader').slideUp(100);


                let positionJobs = data.positionJobTemplates;
                let positionTasks = data.positionTaskTemplates;
                let jobIds = positionJobs.map(function (item) { return item.jobTemplateId });
                console.log(jobIds);
                $('#positionJobs').multiselect('select', jobIds);
                $('#positionTasks').multiselect('select', positionTasks.map(function (item) { return item.taskTemplateId }));

                $('#positionLevel').val(data.levelDescription);
                $('#positionDepartmentId').multiselect('select', data.departmentTemplate.id);

                FillDivFormByObject(data, $('#positionsForm :input'));
            });
        }
        else if (args.commandColumn.type == "Copy") {
            this.copy(false);
        }

        setTimeout(function () { gridObj.hideSpinner() }, 200);
    }
    function positionActionComplete(args) {
        let gridObj = document.getElementById("PositionsGrid").ej2_instances[0];
        setTimeout(function () { gridObj.hideSpinner() }, 200)
    }
    function positionActionBegin(args) {
        if (args.requestType == "delete") {
            let gridObj = document.getElementById("PositionsGrid").ej2_instances[0];
            Swal.showLoading();

            let fullPositions = [];
            for (var i = 0; i < args.data.length; i++) {
                cERP.appServices.hR.organizationalManagement.organizationStructure.oS_PositionTemplate.get(args.data[i].id).done(function (data) {
                    fullPositions.push(data);

                    if (fullPositions.length == args.data.length)
                    {
                        let formData = new FormData();
                        formData.append("positions", JSON.stringify(fullPositions));
                        let xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
                        formData.append("__RequestVerificationToken", xhrToken);

                        $.ajax({
                            url: '@Url.Content("~")/HR/OrganizationStructure/Positions?handler=PositionTemplate',
                            async: true,
                            type: "DELETE",
                            data: formData,
                            contentType: false,
                            processData: false,
                            success: function (data) {
                                gridObj.hideSpinner();
                                swal.fire("Success", "Position(s) has successfully been deleted", "success");

                                if ($('#positionsForm').css('display') !== 'none') {
                                    $('#positionsForm').slideUp();
                                }
                            },
                            error: function (err) {
                                gridObj.hideSpinner();
                                swal.fire("Failed", "Position(s) couldn't be deleted, please fix all errors and try again.", "error");

                                console.log(err);
                            }
                        });

                        setTimeout(function () { gridObj.hideSpinner() }, 200);
                    }
                });
            }
        }
    }*@

    function subDepartmentsToolbarClick(args) {
        let gridObj = document.getElementById("SubDepartmentsGrid").ej2_instances[0];

        if (args.item.id === 'SubDepartmentsGrid_pdfexport') {
            gridObj.pdfExport();
        }
        if (args.item.id === 'SubDepartmentsGrid_excelexport') {
            gridObj.excelExport();
        }
        if (args.item.id === 'SubDepartmentsGrid_csvexport') {
            gridObj.csvExport();
        }
        if (this.getSelectedRecords().length > 0) {
            let withHeader = false;
            if (args.item.id === 'copyHeader') {
                withHeader = true;
            }
            this.copy(withHeader);
        }
        else {
            if (args.item.id === 'copyHeader') {
                let dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                dialogObj.show();
            }
            else if (args.item.id === 'copy') {
                let dialogObj = document.getElementById('alert_dialog_1').ej2_instances[0];
                dialogObj.show();
            }
        }
        if (args.item.id === 'showActions') {
            gridObj.toolbar = [{ text: "Hide Actions", tooltipText: "Actions", prefixIcon: "e-custom-hide-actions", id: "hideActions" }, { text: "Toggle Grouping", tooltipText: "Grouping", prefixIcon: "e-custom-group-toggle", id: "toggleGrouping" }, { text: "Audit Trail", tooltipText: "View Audit Trail", prefixIcon: "e-custom-audit-trail", id: "toggleaudittrail" },  { text: "Toggle Detailed", tooltipText: "Toggle Detailed", prefixIcon: "e-toggledetailed", id: "toggleDetailed" }, "ExcelExport", "PdfExport", "CsvExport", "Print", "Search", { text: "Copy", tooltipText: "Copy", prefixIcon: "e-copy", id: "copy" }, { text: "Copy With Header", tooltipText: "Copy With Header", prefixIcon: "e-copy", id: "copyHeader" }, "ColumnChooser"];
            gridObj.refresh();
        }
        if (args.item.id === 'hideActions') {
            gridObj.toolbar = [{ text: "Show Actions", tooltipText: "Actions", prefixIcon: "e-custom-show-actions", id: "showActions" }, "Search", "ColumnChooser"];
            gridObj.showColumnChooser = true;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleGrouping') {
            gridObj.allowGrouping = !gridObj.allowGrouping;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleDetailed') {
            let visCount = 0;
            for (let i = 0; i < gridObj.columns.length; i++) {
                if (gridObj.columns[i].visible) visCount++;
            }
            if (visCount == gridObj.columns.length) {
                for (let i = 0; i < gridObj.columns.length; i++) {
                    let col = gridObj.columns[i];
                    if (typeof col.customAttributes != 'undefined' && typeof col.customAttributes.id != 'undefined' && col.customAttributes.id == 'detailed')
                        gridObj.showHider.hide(col.headerText, 'headerText');
                    else if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
            else {
                for (let i = 0; i < gridObj.columns.length; i++) {
                    let col = gridObj.columns[i];
                    if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
        }
        if (args.item.id === 'toggleaudittrail') {

            if (!isAuditTrail) {
                var agtGrid = $("#AuditTrailGrid")[0].ej2_instances[0];
                gridObj.showSpinner();

                $.ajax({
                    url: '?handler=DataAuditTrail',
                    async: true,
                    type: "GET",
                    data: {},
                    success: function (data) {
                        gridObj.hideSpinner();

                        //agtGrid.childGrid.childGrid.dataSource = data.tertiaryDS;
                        //agtGrid.childGrid.dataSource = data.secondaryDS;
                        agtGrid.dataSource = data.ds;
                        agtGrid.refresh();

                        $(".customContentArea").css('position', 'unset');
                        $("#auditTrail").slideDown(200);
                    },
                    error: function (data) {
                        gridObj.hideSpinner();

                        $(".customContentArea").css('position', 'absolute');
                        $("#auditTrail").slideUp(200);

                        swal.fire('Failed', `An error occured while generating the audit trail`, 'error');
                    }
                });

            }
            else {
                $(".customContentArea").css('position', 'absolute');
                $("#auditTrail").slideUp(200);
            }

            isAuditTrail = !isAuditTrail;
        }
        setTimeout(function () { gridObj.hideSpinner() }, 200);
    }
    function subDepartmentsCommandClick(args) {
        let gridObj = document.getElementById("SubDepartmentsGrid").ej2_instances[0];

        if (args.commandColumn.type == "Edit") {

        }
        else if (args.commandColumn.type == "Copy") {
            this.copy(false);
        }

        setTimeout(function () { gridObj.hideSpinner() }, 200);
    }
    function subDepartmentsActionComplete(args) {
        let gridObj = document.getElementById("SubDepartmentsGrid").ej2_instances[0];
        setTimeout(function () { gridObj.hideSpinner() }, 200)
    }
    function subDepartmentsActionBegin(args) {
        if (args.requestType == "delete") {
            let gridObj = document.getElementById("SubDepartmentsGrid").ej2_instances[0];
            //Swal.showLoading();

            //let formData = new FormData();
            //formData.append("departments", JSON.stringify(args.data));
            //let xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
            //formData.append("__RequestVerificationToken", xhrToken);

            //$.ajax({
            //    url: '?handler=Department',
            //    async: true,
            //    type: "DELETE",
            //    data: formData,
            //    contentType: false,
            //    processData: false,
            //    success: function (data) {
            //        gridObj.hideSpinner();
            //        swal.fire("Success", "Department(s) has successfully been deleted", "success");

            //        if ($('#subDepartmentsForm').css('display') !== 'none') {
            //            $('#subDepartmentsForm').slideUp();
            //        }
            //    },
            //    error: function (err) {
            //        gridObj.hideSpinner();
            //        swal.fire("Failed", "Department(s) couldn't be deleted, please fix all errors and try again.", "error");

            //        console.log(err);
            //    }
            //});
            setTimeout(function () { gridObj.hideSpinner() }, 200);
        }
    }

    function referenceActionComplete(args) {
        if (args.requestType == "delete") {
            populateCostCenterTemplates();
        }
    }
    function referenceActionBegin(args) {
        if (args.requestType == "delete") {
            populateCostCenterTemplates();
        }
    }
</script>

