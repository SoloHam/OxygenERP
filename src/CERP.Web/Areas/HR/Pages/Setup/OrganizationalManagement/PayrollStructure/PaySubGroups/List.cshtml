@page "/HR/PayrollStructure/PaySubGroup"
@using CERP.Localization;
@using Microsoft.AspNetCore.Mvc.Localization;
@using CERP.App;
@using CERP;
@using CERP.HR.Setup.OrganizationalManagement.PayrollStructure;
@inject IHtmlLocalizer<CERPResource> L
@inject Volo.Abp.Json.IJsonSerializer JsonSerializer
@using CERP.App.Helpers;
@using Syncfusion.EJ2.Navigations;
@using CERP.Web.Pages.Shared.Components;
@using CERP.Web.Pages.Shared.Components.HR.OrganizationalManagement.PayrollStructure.PayrollPeriodWidget;
 
@model CERP.Web.Areas.HR.Setup.OrganizationalManagement.PayrollStructure.Pages.PaySubGroups.ListModel
@{
    ViewData["IsEditing"] = false;
    bool IsEditing = (bool)ViewData["IsEditing"];

    ViewData["Title"] = L["PaySubGroup"].Value;
    ViewData["IconClass"] = "fas fa-list";
    ViewData["HeaderTitle"] = L["PaySubGroup"].Value.ToUpper();
    ViewData["SubTitle"] = $"{L["ListOf"]} {L["PaySubGroup"]}";
    ViewData["Area"] = "Setup";

    ViewData["IsList"] = false;
    ViewData["IsCreate"] = false;
    string cNT = $"{L["Add"].Value} {L["New"].Value}";
    ViewData["CreateNewText"] = cNT;
    //ViewData["CreateNewLink"] = "/PaySubGroup/PaySubGroup";

    string TabPlaceholder = (bool)ViewData["IsEditing"] ? L["Area"].Value : L["Step"].Value;

    var alertanimation = new Syncfusion.EJ2.Popups.DialogAnimationSettings { Effect = Syncfusion.EJ2.Popups.DialogEffect.None };

    var initialToolBar = new List<object>() { new { text = "Show Actions", tooltipText = "Actions", prefixIcon = "e-custom-show-actions", id = "showActions" }, "Search", "ColumnChooser" };
    var fullToolBar = new List<object>() { new { text = "Hide Actions", tooltipText = "Actions", prefixIcon = "e-custom-hide-actions", id = "hideActions" }, new { text = "Toggle Grouping", tooltipText = "Grouping", prefixIcon = "zmdi-chevron-up", id = "toggleGrouping" }, new { text = "Audit Trail", tooltipText = "View Audit Trail", prefixIcon = "e-toggleaudittrail", id = "toggleaudittrail" }, new { text = "Toggle Detailed", tooltipText = "Toggle Detailed", prefixIcon = "e-toggledetailed", id = "toggleDetailed" }, new { text = "ExcelExport", tooltipText = "Excel Export", prefixIcon = "e-excelexport", id = "excelexport", align = "Right" }, "CsvExport", "Print", "Search", new { text = "Copy", tooltipText = "Copy", prefixIcon = "e-copy", id = "copy" }, new { text = "Copy With Header", tooltipText = "Copy With Header", prefixIcon = "e-copy", id = "copyHeader" }, "ColumnChooser" };

    List<object> paySubGroupsCommands = new List<object>();
    paySubGroupsCommands.Add(new { type = "View", buttonOption = new { iconCss = "e-icons e-search", cssClass = "e-flat" } });
    paySubGroupsCommands.Add(new { type = "Edit", buttonOption = new { iconCss = "e-icons e-edit", cssClass = "e-flat" } });
    paySubGroupsCommands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "e-flat" } });
    paySubGroupsCommands.Add(new { type = "Cancel", buttonOption = new { iconCss = "e-icons e-cancel-icon", cssClass = "e-flat" } });

    List<object> referenceCommands = new List<object>();
    referenceCommands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "e-flat" } });

}

@section styles {
    @if ((bool)ViewData["IsEditing"])
    {
        <link href="~/libs/smartwizard/dist/css/smart_wizard_theme_circles.min.css" rel="stylesheet" />
    }

    <style>

        .tile_layout.card-control-section .row.filter {
            margin: 0;
        }
        .tile_layout.card-control-section .row.filter .tile_search {
            justify-content: flex-end;
        }

        .customContentArea {
            position: unset !important;
        }

        .e-tab-header.e-vertical.e-vertical-left.e-control.e-toolbar.e-lib.e-keyboard .e-toolbar-items {
            width: 200px !important;
        }

        #spacesTabs {
            width: unset !important;
            margin: -25px -15px !important;
            height: auto !important;
        }
        #spacesTabs .e-tab-header{
            /*background-color:*/ 
        }
    </style>

    <style>
       
    </style>
}
@section scripts {
    <script>
        var isEditingCrudSpace = false;
        var isSearchingCrudSpace = false;
        var curCrudSpaceEdit;

        let paySubGroups = []
        let listOfData = []
        let gridObj;
        let options = {
            buttonWidth: '100%',
            includeSelectAllOption: true,
            enableFiltering: false,
            enableClickableOptGroups: true,
            includeResetOption: true,
            includeResetDivider: true,
            enableCollapsibleOptGroups: true
        };
        let curOrgStructure;
        let payrollPeriods;
        function loadAllDependencies(fieldData = null, formId = 'crudSpace') {

            let options = {
                buttonWidth: '100%',
                includeSelectAllOption: true,
                enableFiltering: false,
                enableClickableOptGroups: true,
                includeResetOption: false,
                includeResetDivider: true,
                enableCollapsibleOptGroups: true
            };
            $.each($('.mltslct', '#' + formId), function (i, x) { $(x).multiselect(options); });

            let id = fieldData != null ? fieldData.id : '';
            loadCodeNameTypes(cERP.appServices.setup.companySetup.company.getAllCompanies, [], [], ['.legalEntity'], 'clientID', 'companyName', function (data) {
                console.log(fieldData);
                $(`#legalEntityId`, '#' + formId).multiselect('deselectAll');
                if (fieldData != null && id != null) {
                    console.log(fieldData.legalEntityId);
                    $(`#legalEntityId`, '#' + formId).multiselect('select', fieldData.legalEntityId);
                }
                $(`#legalEntityId`, '#' + formId).multiselect('refresh');
            });
            loadCodeNameTypes(cERP.appServices.hR.organizationalManagement.payrollStructure.pS_PayGroup.getAllPayGroups, [], [], ['.payGroup'], 'code', 'name', function (data) {
                $(`#payGroupId`, '#' + formId).multiselect('deselectAll');
                if (fieldData != null && id != null) {
                    $(`#payGroupId`, '#' + formId).multiselect('select', fieldData.payGroupId);
                }
                $(`#payGroupId`, '#' + formId).multiselect('refresh');
            });
            loadCodeNameTypes(cERP.appServices.hR.organizationalManagement.payrollStructure.pS_PayFrequency.getAllPayFrequencies, [], [], ['.payFrequency'], 'code', 'name', function (data) {
                $(`#payFrequencyId`, '#' + formId).multiselect('deselectAll');
                if (fieldData != null && id != null) {
                    $(`#payFrequencyId`, '#' + formId).multiselect('select', fieldData.frequencyId);
                }
                $(`#payFrequencyId`, '#' + formId).multiselect('refresh');
            });

            cERP.appServices.hR.organizationalManagement.payrollStructure.pS_PayrollPeriod.getAllPayrollPeriods().done(function (data) {
                payrollPeriods = data;
                let datams = [];
                for (let i = 0; i < data.length; i++) {
                    let item = data[i];
                    datams.push({ label: `${item.name}`, value: item.id, data: item });
                }
                $.each($('.payrollPeriods'), function (i, x) { $(x).multiselect('dataprovider', datams); $(x).multiselect('deselectAll'); $(x).multiselect('refresh') });
                $.each($('.ejsPayrollPeriods'), function (i, x) { $(x)[0].ej2_instances[0].dataSource = datams.map(function (x) { return { text: x.label, ...x }}); });

            });

            cERP.appServices.hR.organizationalManagement.payrollStructure.pS_PaymentBank.getAllPaymentBanks().done(function (data) {
                let datams = [];
                for (let i = 0; i < data.length; i++) {
                    let item = data[i];
                    datams.push({ label: `${item.name}`, value: item.id, data: item });
                }
                $.each($('.ps_banks'), function (i, x) { $(x).multiselect('dataprovider', datams); $(x).multiselect('deselectAll'); $(x).multiselect('refresh') });

                if (curCrudSpaceEdit) {
                    $('#allowedPaymentBanks', '#' + formId).multiselect('select', curCrudSpaceEdit.allowedBanks.map(function (x) { return x.bankId }));
                    $('#thirdPartyBanks', '#' + formId).multiselect('select', curCrudSpaceEdit.allowedBanks.filter(function (x) { return x.isThirdParty == true }).map(function (x) { return x.bankId }));
                }
            });

            $('.legalEntity', '#' + formId).on('change', function () {
                let lEId = $(this).val();
                if (lEId == null || lEId == '') return;

                console.log(lEId);
                let orgStructureGridsArr = [];
                let orgStructureGridsColsArr = [];
                let orgStructureMultiselectsArr = [];
                let orgStructureLEMultiselectsArr = [];
                $.each(orgStructureGridsArr, function (i, x) { x.showSpinner(); });
                cERP.appServices.hR.organizationalManagement.organizationStructure.oS_OrganizationStructureTemplate.getOrganizationStructureTemplateByCompany(lEId).done(function (data) {
                    if (!data) return;
                    $.each(orgStructureGridsArr, function (i, x) { x.hideSpinner(); });

                    codeNameTypes.removeIf(function (x) { data.id == x.id });
                    codeNameTypes = codeNameTypes.concat(data);

                    curOrgStructure = data;

                    //allOrgLegalEntities = allOrgStructures.map(function (x) { x.legalEntity });
                    //allBUs = allOrgStructures.map(function (x) { x.organizationStructureTemplateBusinessUnits });
                    //allDivisions = allOrgStructures.map(function (x) { x.organizationStructureTemplateDivisions });
                    //allDepartments = allOrgStructures.map(function (x) { x.organizationStructureTemplateDepartments });

                    $.each(orgStructureGridsArr, function (i, x) { populateCodeNameTypes(data, x, orgStructureGridsColsArr[i]) });
                    if (orgStructureMultiselectsArr.length > 0)
                        $.each(orgStructureMultiselectsArr, function (i, x) { populateMSCodeNameTypes(data, x) });

                    $.each(orgStructureLEMultiselectsArr, function (i, x) { populateMSCodeNameTypes(allOrgLegalEntities, x) });

                    let bUs = curOrgStructure.organizationStructureTemplateBusinessUnits.map(function (x) {
                        return x.businessUnitTemplate;
                    });
                    //let dIvs = curOrgStructure.organizationStructureTemplateDivisions.map(function (x) {
                    //    return x.divisionTemplate;
                    //});
                    //let dEps = curOrgStructure.organizationStructureTemplateDepartments.map(function (x) {
                    //    return x.departmentTemplate;
                    //});

                    //posManDG.nodes = [];
                    //posManDG.connectors = [];
                    //posManDG.dataSourceSettings.dataSource.dataSource.data = diagramDS;
                    //posManDG.refresh();
                });
            })

            crudWidgetManager.init();
            tilesWidgetManager.init();
        }

        let spaceTabs;
        var cardTemplateFn;
        var crudWidgetManager;
        var tilesWidgetManager;

        function multiSelectRemove(e) {
            var cardDa = searchData.length > 0 ? searchData : (multiSelectData.length > 0 ? multiSelectData : listOfData);
            if (multiselectComp.value && multiselectComp.value.length === 0 && searchValCount === 0) {
                multiSelectData = cardDa;
                destroyAllCard();
                cardRendering(listOfData);
            }
            else if (multiselectComp.value.length === 0 && searchValCount > 0) {
                searchFilter(document.getElementById('search_Card').value);
            }
            else if (multiselectComp.value.length === 0) {
                destroyAllCard();
                multiSelectData = cardDa;
                cardRendering(listOfData);
            }
            else {
                var keywords = e.itemData.Code.split(',');
                var dublicate_1;
                keywords.forEach(function (key) {
                    dublicate_1 = new ej.data.DataManager(listOfData).executeLocal(new ej.data.Query().where('cardImage.tag', 'Contains', key, true));
                    dublicate_1.forEach(function (da) {
                        if (cardDa.indexOf(da) !== -1) {
                            cardDa.splice(cardDa.indexOf(da), 1);
                        }
                    });
                    multiSelectData = cardDa;
                });
                destroyAllCard();
                cardRendering(multiSelectData);
            }
        }
        function multiSelectFun(e) {
            var keywords = e.itemData.Code.split(',');
            var dublicate;
            var cardDa = searchData.length > 0 ? searchData : listOfData;
            if (multiselectComp.value && multiselectComp.value.length === 0 && searchValCount === 0) {
                multiSelectData = [];
            }
            keywords.forEach(function (key) {
                dublicate = new ej.data.DataManager(cardDa).executeLocal(new ej.data.Query().where('cardImage.tag', 'Contains', key, true));
                if (dublicate.length === 0) {
                    multiSelectData = [];
                    destroyAllCard();
                    return;
                }
                dublicate.forEach(function (da) {
                    if (multiSelectData.indexOf(da) === -1) {
                        multiSelectData.push(da);
                    }
                });
            });
            destroyAllCard();
            cardRendering(multiSelectData);
        }
        function searchFilter(key) {
            searchValCount = key.length;
            var predicate = new ej.data.Predicate('cardContent', 'Contains', key, true);
            predicate = predicate.or('cardImage.title', 'Contains', key, true).or('header_title', 'Contains', key, true).or('header_subtitle', 'Contains', key, true);
            var cardDa = (multiSelectData.length > 0 && multiselectComp.value.length > 0) ? multiSelectData : cardObj;
            searchData = data = new ej.data.DataManager(cardDa).executeLocal(new ej.data.Query().where(predicate));
            destroyAllCard();
            console.log('grer');
            cardRendering(data);
        }
        $(document).ready(function () {
            crudWidgetManager = new abp.WidgetManager('#abpCrudWidgets');   
            tilesWidgetManager = new abp.WidgetManager('#abpTilesWidgets');   

            cardTemplateFn = ej.base.compile(document.getElementById('card_template').innerHTML.trim());
            var card;
            var cardEle;
            var data = [];          
            var multiSelectData = [];
            var searchData = [];
            var searchValCount = 0;
            var filterCategory = [{ Name: 'Client-Side', Code: 'client' }, { Name: 'Server-Side', Code: 'server' }, { Name: 'Front-End', Code: 'ui' }];
            var emptyData = true;

            var multiselectComp = new ej.dropdowns.MultiSelect({
                dataSource: filterCategory,
                fields: { text: 'Name', value: 'Code' },
                placeholder: 'Search by active status',
                tagging: multiSelectFun,
                removed: multiSelectRemove,
            });
            multiselectComp.appendTo('#local');
            document.getElementById('search_Card').onkeyup = function (e) {
                if (e.code === 'Tab' || e.code === 'Escape' || e.code === 'ShiftLeft' || (e.code === 'Backspace' && emptyData)) {
                    return;
                }
                var inputVal = e.target.value;
                /*jshint -W030 */
                inputVal.length === 0 ? emptyData = true : emptyData = false;
                searchFilter(inputVal);
            };

            spaceTabs = $('#spacesTabs')[0].ej2_instances[0];
            loadAllDependencies();
            gridObj = $("#PaySubGroupGrid")[0].ej2_instances[0];
            gridObj.showSpinner();
            $('#paySubGroupsLoader').slideDown(100);

            $('.row.tiles-loader').slideDown();
            cERP.appServices.hR.organizationalManagement.payrollStructure.pS_PaySubGroup.getAllPaySubGroups().done(function (data) {
                $('#paySubGroupsLoader').slideUp(100);
                $('.row.tiles-loader').slideUp();
                gridObj.hideSpinner();

                calculateTiles(data);

                gridObj.dataSource = data;
                setTimeout(function () { gridObj.hideSpinner() }, 200);

            });

            //cerp.appservices.hr.organizationalmanagement.payrollstructure.ps_bank.getAllbanks().done(function (data) {
            //    $('#paygroupsloader').slideup(100);

            //    let datams = [];
            //    for (let i = 0; i < data.length; i++) {
            //        let item = data[i];
            //        datams.push({ label: `${item.code} - ${item.name}`, value: item.id, data: item });
            //    }
            //    $.each($('.ps_banks'), function (i, x) { $(x).multiselect('dataprovider', datams) });
            //});

            $('#addPaySubGroupBtn').on('click', function () {
                isEditingCrudSpace = false;

                let tabs = $('#formSpaceFormTabs')[0].ej2_instances[0];
                tabs.properties.items[1].visible = false;

                $('#crudSubmitPaySubGroupBtn').val('Create Pay Sub Group');
            });
            $('#crudSubmitPaySubGroupBtn').on('click', function (e) {
                e.preventDefault();
                submitPaySubGroupBtn('formSpaceForm');
            });
            $('#searchSubmitPaySubGroupBtn').on('click', function (e) {
                e.preventDefault();

                isSearchingCrudSpace = true;
                submitPaySubGroupBtn('searchSpaceForm');
            });

            $('#payrollPeriodId > .popupView').on('click', function () {
                document.getElementById('   ').ej2_instances[0].show(); 
            });
        });
        function submitPaySubGroupBtn(formId = '', _id = null)
        {
            if (ValidateForm(formId)) {
                gridObj.showSpinner();
                Swal.showLoading();

                let sid = ''
                if (_id != null && typeof _id != 'object' && typeof _id != 'undefined')
                    sid = _id;

                let form = [];
                let functionDetails = $('#' + formId).find("textarea, input, select").serializeArray();
                form = form.concat(functionDetails);

                let params = objectifyForm(form);
                console.log('sid');
                //console.log($('.payrollCalendarRange > input', '#' + formId)[0].ej2_instances[0].value);
                //let payrollPeriod = $('.payrollCalendarRange > input', '#' + formId)[0].ej2_instances[0].value;
                //if (payrollPeriod && payrollPeriod.length == 2) {
                //    params.periodStartDate = payrollPeriod[0].toLocaleDateString();
                //    params.periodEndDate = payrollPeriod[1].toLocaleDateString();
                //}
                if (!isSearchingCrudSpace) {
                    //params.payPeriods = $('#PayrollPeriodsGrid', '#' + formId)[0].ej2_instances[0].dataSource;

                    params.AsOf = $('#asOfDate', '#' + formId).value;
                }

                if (params.ExtraPeriods == null)
                    params.ExtraPeriods = 0;
                if (isSearchingCrudSpace) {
                    params.PayGroupId = [];
                    let selectedPayGroups = $('#payGroupId', '#' + formId).val();
                    if (selectedPayGroups) {
                        selectedPayGroups.forEach(function (val, i) {
                            params.PayGroupId.push({ Id: val });
                        });
                    }
                    params.PayFrequencyId = [];
                    let selectedPayFrequencies = $('#payFrequencyId', '#' + formId).val();
                    if (selectedPayFrequencies) {
                        selectedPayFrequencies.forEach(function (val, i) {
                            params.PayFrequencyId.push({ Id: val });
                        });
                    }

                    params.PeriodFrequency = [];
                    let selectedPeriodFrequency = $('#periodFrequency', '#' + formId).val();
                    if (selectedPeriodFrequency) {
                        selectedPeriodFrequency.forEach(function (val, i) {
                            params.PeriodFrequency.push(val);
                        });
                    }
                    params.PayrollPeriodId = [];
                    let selectedPayrollPeriod = $('#payrollPeriodId', '#' + formId).val();
                    if (selectedPayrollPeriod) {
                        selectedPayrollPeriod.forEach(function (val, i) {
                            params.PayrollPeriod.push(val);
                        });
                    }
                    params.AsOf = $('#searchAsOfDate', '#' + formId).value;
                }

                params.AllowedBanks = [];
                let selectedAlBanks = $('#allowedPaymentBanks', '#' + formId).val();
                selectedAlBanks.forEach(function (val, i) {
                    params.AllowedBanks.push({ BankId: val, IsThirdParty: false });
                });

                let selectedThAlBanks = $('#thirdPartyBanks', '#' + formId).val();
                selectedThAlBanks.forEach(function (val, i) {
                    params.AllowedBanks.push({ BankId: val, IsThirdParty: true });
                });

                let id = 0;
                if (gridObj.dataSource.length > 0)
                    id = gridObj.dataSource[gridObj.dataSource.length - 1].id;

                params.isEditing = isEditingCrudSpace;
                params.isSearching = isSearchingCrudSpace;
                if (isEditingCrudSpace) {
                    params.id = curCrudSpaceEdit.id;

                    //cERP.appServices.hR.leaveRequestTemplates.update()
                }
                else {

                    //cERP.appServices.hR.leaveRequestTemplates.update()
                }

                let formData = new FormData();
                formData.append("info", JSON.stringify(params));
                formData.append("isSearching", isSearchingCrudSpace);
                let xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
                formData.append("__RequestVerificationToken", xhrToken);
                console.log(params);

                $.ajax({
                    url: "?handler=PaySubGroup",
                    async: true,
                    type: "POST",
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: function (data ) {
                        Swal.hideLoading();
                        console.log(data);
                        if (isSearchingCrudSpace) {
                            calculateTiles(data);

                            swal.fire("Success", "Search has been successfully completed", "success");

                            goBackSpace();
                        }
                        else {
                            if (isEditingCrudSpace) {
                                gridObj.refresh(); // refresh the Grid.

                                swal.fire("Success", "Pay Sub Group has successfully been updated", "success");

                                for (let i = 0; i < gridObj.dataSource.length; i++) {
                                    if (gridObj.dataSource[i].id == data.id) {
                                        gridObj.dataSource[i] = data;
                                    }
                                }
                                gridObj.refresh();
                            }
                            else {
                                gridObj.dataSource.push(data);

                                gridObj.refresh(); // refresh the Grid.

                                swal.fire("Success", "Pay Sub Group has successfully been added", "success");
                            }

                            calculateTiles(gridObj.dataSource);
                        }
                        gridObj.hideSpinner();
                    },
                    error: function (err) {
                        Swal.hideLoading();
                        if (isEditingCrudSpace)
                            swal.fire("Failed", "Pay Sub Group couldn't be updated, please fix all errors and try again.", "error");
                        else
                            swal.fire("Failed", "Pay Sub Group couldn't be added, please fix all errors and try again.", "error");

                        console.log(err);
                        gridObj.hideSpinner();
                    }
                });
            }
            else {
                Swal.close();
                Swal.hideLoading();
            }
        }
    </script>
}
@*<partial name="_DefaultPageHeader"  />*@
<vc:page-header create-new-link="" icon-class="fas fa-list" header-title="@L["PaySubGroup"].Value.ToUpper()" sub-title="@($"{L["ListOf"]} {L["PaySubGroup"]}")" area="Setup" is-list="true" is-search="false" is-create="false" create-new-text="@cNT" on-create-clicked="toggleCreateNew" search-text="Search" on-seach-clicked="toggleSearchSpace"></vc:page-header>
<script id="card_template" type="text/x-template">
    <div class="e-card ${if(isHorizontal)} e-card-horizontal ${/if}">
        ${if(cardTitle)}
        <div class="e-card-title"> ${cardTitle} </div>
        ${/if}
        ${if(card_action_btn)}
        <div class="e-card-actions ${if(card_action_btn.isVertical)} e-card-vertical ${/if}">
            ${if(!card_action_btn.isVertical)}
            <div style="display:flex; justify-content:flex-start">
                ${/if}
                ${for(action_btn of card_action_btn.action_btns)}
                ${if(action_btn.side === 'left')}
                ${if(action_btn.tag === 'a')}
                <a href="${action_btn.href}" target="${action_btn.target}">${action_btn.text}</a>
                ${else}
                <button class="e-card-btn ${action_btn.color}" data-id="${action_btn.args.data.id}" data-type="${action_btn.args.type}" data-onclick="${action_btn.onclick}" onclick="console.log($(this)); onCardButtonClicked($(this));"><span><i class="m-r-5 ${action_btn.iconClass}"></i></span></button>
                ${/if}
                ${/if}
                ${/for}
                ${if(!card_action_btn.isVertical)}
            </div>
            ${/if}

            ${if(!card_action_btn.isVertical)}
            <div style="display:flex; justify-content:flex-end">
                ${/if}
                ${for(action_btn of card_action_btn.action_btns)}
                ${if(action_btn.side === 'right')}
                ${if(action_btn.tag === 'a')}
                <a href="${action_btn.href}" target="${action_btn.target}">${action_btn.text}</a>
                ${else}
                <button class="e-card-btn ${action_btn.color}" data-id="${action_btn.args.data.id}" data-type="${action_btn.args.type}" data-onclick="${action_btn.onclick}" onclick="console.log($(this)); onCardButtonClicked($(this));"><span><i class="m-r-5 ${action_btn.iconClass}"></i></span></button>
                ${/if}
                ${/if}
                ${/for}
                ${if(!card_action_btn.isVertical)}
            </div>
            ${/if}
        </div>
        ${/if}
        ${if(header_title || header_subtitle || header_img)}
        <div class="e-card-header">
            ${if(header_img)}
            <div class="e-card-header-image ${if(header_img.isRounded)} e-card-corner ${/if}" style="background-image:url(${header_img.url})"></div>
            ${/if} ${if(header_title || header_subtitle)}
            <div class="e-card-header-caption">
                ${if(header_title)}
                <div class="e-card-header-title">${header_title}</div>
                ${/if}
                ${if(header_subtitle)}
                <div class="e-card-sub-title">${header_subtitle}</div>
                ${/if}
            </div>
            ${/if}
        </div>
        ${/if}
        ${if(cardContent)}
        <div class="e-card-content">
            ${for(field of cardContent)}
            ${if(field.isVisible)}
            <div class="row p-y-5" style="@*border-bottom: 1px dashed rgba(141, 141, 141, 0.67);*@ display:flex; justify-content:center">
                <div class="col-md-6" style="font-weight:400; text-align: end;">
                    ${field.name}  :
                </div>
                <div class="col-md-6" style="align-self: center; text-align: start; font-weight:500">
                    ${field.value}
                </div>
            </div>
            ${/if}
            ${/for}
        </div>
        ${/if}
    </div>
</script>
<div class="site-content customContentArea">
    <ejs-tab id="spacesTabs" animation="ViewBag.animation" selected="spacesTabSelected">
        <e-tab-tabitems>
            <e-tab-tabitem header="@(new TabHeader { Text = "Home" })" icon="fas fa-home" content="#tileSpace"></e-tab-tabitem>
            <e-tab-tabitem header="@(new TabHeader { Text = "Search" })" content="#searchSpace"></e-tab-tabitem>
            <e-tab-tabitem header="@(new TabHeader { Text = "Reporting" })" content="#reportSpace"></e-tab-tabitem>
            <e-tab-tabitem header="@(new TabHeader { Text = "Add New" })" visible="true" content="#crudSpace"></e-tab-tabitem>
        </e-tab-tabitems>
    </ejs-tab>
    <div id="tileSpace">
        <div class="control-section card-control-section tile_layout">
            <div class="row filter">
                <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                    <div class="e-float-input e-input-group">
                        <input type="text" required="" id="search_Card">
                        <span class="e-float-line"></span>
                        <label class="e-float-text" style="font-size:14px">Enter text to search</label>
                        <span class="e-clear-icon"></span>
                    </div>
                </div>
                <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6 tile_search">
                    <input type="text" id="local">
                </div>
            </div>
            <div class="row content" style="justify-self:center; min-height:150px">
                <div id="staticContent">
                    <div class="loader-inline" style="margin:auto;height:50px; width:50px"></div>
                    <div class="row error" style="display:none;min-height:150px">
                        <div class="e-error-content" style="margin:auto;height:inherit;font-size:18px;font-weight:500;color:inherit">No results found to display.</div>
                    </div>
                </div>
            </div>
            <div class="row e-card-layout" style="text-align:center;">
                <div class="card-container">

                </div>
            </div>

            <ejs-dialog id="AuditTrailDialog" showCloseIcon="true" visible="false" width="750px" allowDragging="true" overlayClick="onOverlayClick" isModal="true"
                        header="Audit Trail"
                        target=".site-main">
                <e-content-template>
                    <div id="abpTilesWidgets">
                        @await Component.InvokeAsync(typeof(AuditTrailWidgetViewComponent), ViewContext.ActionDescriptor.AttributeRouteInfo.Name);
                    </div>
                </e-content-template>
            </ejs-dialog>
        </div>
    </div>
    <div id="searchSpace" style="display:none">
        @*<a id="searchSpaceBackBtn" onclick="goBackSpace(); isEditingSearchSpace = false;" class="btn btn-outline-dark"><span class="spaceBackButton"><i class="fa fa-backward fa-fw"></i></span></a>*@
        <div class="control-section">
            <div style="display:flex;">
                <div class="areaHeader" style="display:none;">

                    <div id="paySubGroupsLoader" class="pull-left loader-inline" style="display:none"></div>
                    <div class="areaHeaderTitle">
                        <span id="areHeadertitle" class="areaHeaderTitleNode menu-text">Search Pay Sub Groups</span>
                        @*<span id="" class="areaHeaderTitleInNode menu-text"> > </span>*@
                        @*<span id="subTitle" class="menu-text" style="padding-left:15px; font-size: 28px; font-family:Roboto; font-weight:200;">@ViewData["SubTitle"]</span>*@
                    </div>
                    @*<h3 class="control-label" style="flex-grow: 1; margin:0">Approval Route</h3>*@
                    <div class="pull-right text-right p-r-20 areaHeaderBtnSec">
                        @*<div class="clearfix margin-15"></div>*@
                        @*<a id="addPaySubGroupBtn" onclick="areaHeaderBtnClick(event); isEditingSearchSpace = false;" class="btn btn-outline-dark areaHeaderBtn"><i class="fa fa-plus fa-fw"></i> Add New</a>*@
                    </div>
                </div>
            </div>
            <form id="paySubGroupsForm" onkeydown="return event.key != 'Enter';" class="row areaForm" method="post" data-toggle="validator" style="display: block; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
                <div class="m-b-10 formSpaceHeader">
                    @*<a id="searchSpaceBackBtn" onclick="goBackSpace(); isSearchingCrudSpace = false;" class="btn btn-outline-dark"><span class="spaceBackButton"><i class="fa fa-backward fa-fw"></i></span></a>*@
                    <div class="">
                        <p class="formSpaceTitle">Search Pay Sub Groups</p>
                    </div>
                    <div class="p-t-5" style="display:flex; margin-left: 30px;">
                        <p class="p-t-5" style="font-weight: 500; font-size: 16px; width: 75px">As of:</p>
                        <ejs-datetimepicker id="searchAsOfDate" placeholder="Choose a Date"></ejs-datetimepicker>
                    </div>
                </div>

                <div id="searchSpaceForm">
                    <ejs-accordion id="searchSpaceFormTabs" animation="ViewBag.animation">
                        <e-accordion-accordionitems>
                            <e-accordion-accordionitem header="General" expanded="true" content="#searchGeneralTab"></e-accordion-accordionitem>
                            <e-accordion-accordionitem header="Payment Settings" expanded="true" content="#searchGroupPaymentsTab"></e-accordion-accordionitem>
                            <e-accordion-accordionitem header="Payroll Periods" expanded="true" content="#searchPayrollPeriodsTab"></e-accordion-accordionitem>
                            @*<e-accordion-accordionitem header="References" expanded="false"  content="#referencesTab"></e-accordion-accordionitem>*@
                        </e-accordion-accordionitems>
                    </ejs-accordion>
                    @*<ejs-tab id="searchSpaceFormTabs" animation="ViewBag.animation">
                            <e-tab-tabitems>
                                <e-tab-tabitem header="@(new TabHeader { Text = "General" })" content="#generalTab"></e-tab-tabitem>
                                <e-tab-tabitem header="@(new TabHeader { Text = "General" })" visible="false" content="#generalTab"></e-tab-tabitem>
                                <e-tab-tabitem header="@(new TabHeader { Text = "Payment Settings" })" visible="true" content="#groupPaymentsTab"></e-tab-tabitem>
                                <e-tab-tabitem header="@(new TabHeader { Text = "Payroll Periods" })" content="#payrollPeriodsTab"></e-tab-tabitem>
                                <e-tab-tabitem header="@(new TabHeader { Text = "References" })" visible="false" content="#referencesTab"></e-tab-tabitem>
                            </e-tab-tabitems>
                        </ejs-tab>*@
                    <div id="searchGeneralTab" style="display:none">
                        <div class="col-sm-1" style="padding:0">
                        </div>
                        <div class="col-sm-9" style="padding:0">
                            <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                <div class="form-group" style="padding: 15px">
                                    <div class="col-sm-6" style="">
                                        <label class="p-t-5 control-label pull-right">Code:</label>
                                    </div>
                                    <div class="col-sm-6" style="">
                                        <input type="text" id="paySubGroupCode" name="Code" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" >
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                <div class="form-group" style="padding: 15px">
                                    <div class="col-sm-6" style="">
                                        <label class="p-t-5 control-label pull-right ">Title:</label>
                                    </div>
                                    <div class="col-sm-6" style="">
                                        <input type="text" id="paySubGroupTitle" name="Name" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control " >
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                <div class="form-group" style="padding: 15px">
                                    <div class="col-sm-6" style="">
                                        <label class="p-t-5 control-label pull-right ">Title (In Arabic):</label>
                                    </div>
                                    <div class="col-sm-6" style="">
                                        <input type="text" id="paySubGroupTitleLocalized" name="NameLocalized" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                <div class="form-group" style="padding: 15px">
                                    <div class="col-sm-6" style="">
                                        <label class="p-t-5 control-label pull-right">Description:</label>
                                    </div>
                                    <div class="col-sm-6" style="">
                                        <input type="text" id="paySubGroupDescription" name="Description" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                <div class="form-group" style="padding: 0">
                                    <div class="col-sm-6" style="">
                                        <label class="p-t-5 control-label pull-right">Pay Group:</label>
                                    </div>
                                    <div class="col-sm-6" style="">
                                        <select id="payGroupId" name="PayGroupIds" multiple="multiple" class="form-control mltslct payGroup">
                                        </select>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                <div class="form-group" style="padding: 15px">
                                    <div class="col-sm-6" style="">
                                        <label class="p-t-5 control-label pull-right">Pay Frequency:</label>
                                    </div>
                                    <div class="col-sm-6" style="">
                                        <select id="payFrequencyId" name="FrequencyIds" multiple="multiple" class="form-control mltslct payFrequency">
                                        </select>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                <div class="form-group" style="padding: 15px">
                                    <div class="col-sm-6" style="">
                                        <label class="p-t-5 control-label pull-right">Legal Entity:</label>
                                    </div>
                                    <div class="col-sm-6" style="">
                                        <select id="legalEntityId" name="LegalEntityIds" multiple="multiple" class="form-control mltslct legalEntity">
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-2" style="padding:0">
                        </div>
                    </div>
                    <div id="searchGroupPaymentsTab" style="display:none">
                        @*<ejs-tab id="paymentSpecificFormTabs" animation="ViewBag.animation" height="auto" headerPlacement="Top">
                                <e-tab-tabitems>
                                    <e-tab-tabitem header="@(new TabHeader { Text = "Bank Payments" })" content="#bankPaymentsTab"></e-tab-tabitem>
                                    <e-tab-tabitem header="@(new TabHeader { Text = "Cash Payments" })" content="#cashPaymentsTab"></e-tab-tabitem>
                                    <e-tab-tabitem header="@(new TabHeader { Text = "Cheque Payments" })" content="#chequePaymentsTab"></e-tab-tabitem>
                                    <e-tab-tabitem header="@(new TabHeader { Text = "Third Party Payments" })" content="#thirdPartyPaymentsTab"></e-tab-tabitem>
                                </e-tab-tabitems>
                            </ejs-tab>*@
                        <div id="bankPaymentsTab" style="">
                            <div class="row">
                                <div class="col-sm-1" style="padding:0">
                                </div>
                                <div class="col-sm-9" style="padding:0">
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-6" style="">
                                                <label class="p-t-5 control-label pull-right">Allow Bank Transfers:</label>
                                            </div>
                                            <div class="col-sm-6" style="">
                                                <input type="checkbox" name="IsBankPaymentAllowed" onchange="$('#allowedPaymentBanks').attr('disbaled', this.checked? '' : 'disabled')" class="form-control">
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-6" style="">
                                                <label class="p-t-5 control-label pull-right">Banks List:</label>
                                            </div>
                                            <div class="col-sm-6" style="">
                                                <select id="allowedPaymentBanks" name="AllowedBanks" multiple="multiple" class="form-control mltslct ps_banks">
                                                </select>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-6" style="">
                                                <label class="p-t-5 control-label pull-right">Allow Cash Payment:</label>
                                            </div>
                                            <div class="col-sm-6" style="">
                                                <input type="checkbox" name="IsCashPaymentAllowed" class="form-control">
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-6" style="">
                                                <label class="p-t-5 control-label pull-right">Allow Cheque Payment:</label>
                                            </div>
                                            <div class="col-sm-6" style="">
                                                <input type="checkbox" name="IsChequePaymentAllowed" class="form-control">
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-6" style="">
                                                <label class="p-t-5 control-label pull-right">Allow Third Party Payments:</label>
                                            </div>
                                            <div class="col-sm-6" style="">
                                                <input type="checkbox" onchange="$('#thirdPartyBanks').attr('disbaled', this.checked? '' : 'disabled')" name="AllowThirdPartyPayments" class="form-control">
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-6" style="">
                                                <label class="p-t-5 control-label pull-right">Allowed Banks:</label>
                                            </div>
                                            <div class="col-sm-6" style="">
                                                <select id="thirdPartyBanks" name="AllowedThirdPartyBanks" multiple="multiple" class="form-control mltslct ps_banks">
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-2" style="padding:0">
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="searchPayrollPeriodsTab" style="display:none">
                        <div class="row">
                            <div class="col-sm-1" style="padding:0">
                            </div>
                            <div class="col-sm-9" style="padding:0">
                                <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div class="form-group" style="padding: 15px">
                                        <div class="col-sm-6" style="">
                                            <label class="p-t-5 control-label pull-right">Payroll Period:</label>
                                        </div>
                                        <div class="col-sm-6" style="">
                                            <select id="payrollPeriodId" name="PayrollPeriodIds" multiple="multiple" class="form-control mltslct payrollPeriods">
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-2" style="padding:0">
                            </div>
                        </div>
                    </div>
                    <div id="searchReferencesTab" class="areaForm" style="display:none">
                        <div class="row">
                            <div class="col-md-12">
                                <div class="panel-body p-t-0" style="">
                                    <div id="referencesCS" class="control-section">
                                        <ejs-grid id="ReferenceReferenceGrid" enableAutoFill="true" dataBound="dataBoundResponsive"
                                                  allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true"
                                                  hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true"
                                                  allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" dataSource="new List<dynamic>()"
                                                  toolbar="@initialToolBar" toolbarClick="defaultToolbarClick"
                                                  allowPaging="true" allowResizing="true">

                                            <e-grid-columns>
                                                <e-grid-column field="id" headerText="Id" textAlign="Center" visible="false" isPrimaryKey="true" showInColumnChooser="false"></e-grid-column>
                                                <e-grid-column field="type" allowEditing="false" headerText="Type" textAlign="Center"></e-grid-column>
                                                <e-grid-column field="name" allowEditing="false" headerText="Name" textAlign="Center"></e-grid-column>
                                                <e-grid-column field="code" allowEditing="false" headerText="Code" textAlign="Center"></e-grid-column>
                                                @*<e-grid-column headerText="Actions" textAlign="Center" commands="referenceCommands"></e-grid-column>*@
                                            </e-grid-columns>

                                            <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                            <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true"></e-grid-editSettings>
                                            <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                            <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                        </ejs-grid>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <label class="control-label m-b-5 "></label>
                            <input id="searchSubmitPaySubGroupBtn" type="button" class="btn btn-success btn-block searchSpaceSubmitBtn" value="Search Pay Sub Groups"  />
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
    <div id="reportSpace" style="display:none">
        <div id="paySubGroupsCS" class="control-section">
            <ejs-grid id="PaySubGroupGrid" enableAutoFill="true" dataBound="dataBoundResponsive" commandClick="commandClick"
                      showColumnChooser="true" allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true"
                      hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true" actionBegin="paySubGroupActionBegin" actionComplete="paySubGroupActionComplete"
                      allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" allowTextWrap="true" textWrapSettings="@(new Syncfusion.EJ2.Grids.GridTextWrapSettings() { WrapMode = Syncfusion.EJ2.Grids.WrapMode.Header })"
                      toolbarClick="toolbarClick" toolbar="@initialToolBar"
                      allowPaging="true" allowResizing="true">

                <e-grid-columns>
                    <e-grid-column field="id" headerText="Id" isPrimaryKey="true" textAlign="Center" visible="false" showInColumnChooser="false"></e-grid-column>
                    <e-grid-column headerText="Name" textAlign="Center" columns='new List<Syncfusion.EJ2.Grids.GridColumn>() {
                            new Syncfusion.EJ2.Grids.GridColumn() { Field= "name", HeaderText = "Default", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center },
                            new Syncfusion.EJ2.Grids.GridColumn() { Field= "nameLocalized", HeaderText = "Local", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center }
                        }'></e-grid-column>
                    <e-grid-column field="code" headerText="Code" textAlign="Center"></e-grid-column>
                    <e-grid-column field="description" headerText="Description" allowEditing="true" textAlign="Center"></e-grid-column>
                    <e-grid-column field="frequency.name" headerText="Pay Frequency" allowEditing="false" textAlign="Center"></e-grid-column>
                    <e-grid-column field="payGroup.name" headerText="Pay Group" allowEditing="false" textAlign="Center"></e-grid-column>
                    <e-grid-column headerText="Payroll Period" textAlign="Center" columns='new List<Syncfusion.EJ2.Grids.GridColumn>() {
                            new Syncfusion.EJ2.Grids.GridColumn() { Field= "payrollPeriod.periodName", HeaderText = "Name", AllowEditing=false, TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center },
                            new Syncfusion.EJ2.Grids.GridColumn() { Field= "payrollPeriod.periodStartDate", HeaderText = "Start Date", AllowEditing=false, Format = "dd/MM/yyyy", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center },
                            new Syncfusion.EJ2.Grids.GridColumn() { Field= "payrollPeriod.periodEndDate", HeaderText = "End Date", AllowEditing=false, Format = "dd/MM/yyyy", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center },
                            new Syncfusion.EJ2.Grids.GridColumn() { Field= "payrollPeriod.extraPeriods", HeaderText = "Extra Periods", AllowEditing=false, TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center },
                        }'></e-grid-column>

                    @*<e-grid-column headerText="Actions" textAlign="Center" commands="paySubGroupsCommands"></e-grid-column>*@
                </e-grid-columns>

                <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="false"></e-grid-editSettings>
                <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
            </ejs-grid>
        </div>
        <div id="auditTrail" style="display:none;">
            @*<partial name="_DataAuditTrailPartialView" model="@Model.GetDataAuditTrailModel()" />*@
        </div>
    </div>
    <div id="crudSpace" style="display:none">
        @*<a id="formSpaceBackBtn" onclick="goBackSpace(); isEditingCrudSpace = false;" class="btn btn-outline-dark"><span class="spaceBackButton"><i class="fa fa-backward fa-fw"></i></span></a>*@
        <div class="control-section">
            <div style="display:flex;">
                <div class="areaHeader" style="display:none;">

                    <div id="paySubGroupsLoader" class="pull-left loader-inline" style="display:none"></div>
                    <div class="areaHeaderTitle">
                        <span id="areHeadertitle" class="areaHeaderTitleNode menu-text">Add New Pay Sub Group</span>
                        @*<span id="" class="areaHeaderTitleInNode menu-text"> > </span>*@
                        @*<span id="subTitle" class="menu-text" style="padding-left:15px; font-size: 28px; font-family:Roboto; font-weight:200;">@ViewData["SubTitle"]</span>*@
                    </div>
                    @*<h3 class="control-label" style="flex-grow: 1; margin:0">Approval Route</h3>*@
                    <div class="pull-right text-right p-r-20 areaHeaderBtnSec">
                        @*<div class="clearfix margin-15"></div>*@
                        @*<a id="addPaySubGroupBtn" onclick="areaHeaderBtnClick(event); isEditingCrudSpace = false;" class="btn btn-outline-dark areaHeaderBtn"><i class="fa fa-plus fa-fw"></i> Add New</a>*@
                    </div>
                </div>
            </div>
            <form id="paySubGroupsForm" onkeydown="return event.key != 'Enter';" class="row areaForm" method="post" data-toggle="validator" style="display: block; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
                <div class="row m-b-10 formSpaceHeader">
                    <a id="formSpaceBackBtn" onclick="goBackSpace(); isEditingCrudSpace = false;" class="btn btn-outline-dark"><span class="spaceBackButton"><i class="fa fa-backward fa-fw"></i></span></a>
                    <div class="">
                        <p class="formSpaceTitle">Create New Pay Sub Group</p>
                    </div>
                    <div class="p-t-5" style="display:flex; margin-left: 30px;">
                        <p class="p-t-5" id="asOffTitle" style="font-weight: 500; font-size: 16px; width: 75px">As of:</p>
                        <ejs-datetimepicker id="asOfDate" placeholder="Choose a Date" change="asOfDateChanged"></ejs-datetimepicker>
                    </div>
                </div>

                <div id="formSpaceForm">
                    <ejs-accordion id="formSpaceFormTabs" animation="ViewBag.animation">
                        <e-accordion-accordionitems>
                            <e-accordion-accordionitem header="General" expanded="true" content="#generalTab"></e-accordion-accordionitem>
                            <e-accordion-accordionitem header="Payment Settings" expanded="true" content="#groupPaymentsTab"></e-accordion-accordionitem>
                            <e-accordion-accordionitem header="Payroll Periods" expanded="true" content="#payrollPeriodsTab"></e-accordion-accordionitem>
                            @*<e-accordion-accordionitem header="References" expanded="false"  content="#referencesTab"></e-accordion-accordionitem>*@
                        </e-accordion-accordionitems>
                    </ejs-accordion>
                    @*<ejs-tab id="formSpaceFormTabs" animation="ViewBag.animation">
                            <e-tab-tabitems>
                                <e-tab-tabitem header="@(new TabHeader { Text = "General" })" content="#generalTab"></e-tab-tabitem>
                                <e-tab-tabitem header="@(new TabHeader { Text = "General" })" visible="false" content="#generalTab"></e-tab-tabitem>
                                <e-tab-tabitem header="@(new TabHeader { Text = "Payment Settings" })" visible="true" content="#groupPaymentsTab"></e-tab-tabitem>
                                <e-tab-tabitem header="@(new TabHeader { Text = "Payroll Periods" })" content="#payrollPeriodsTab"></e-tab-tabitem>
                                <e-tab-tabitem header="@(new TabHeader { Text = "References" })" visible="false" content="#referencesTab"></e-tab-tabitem>
                            </e-tab-tabitems>
                        </ejs-tab>*@
                    <div id="generalTab" style="display:none">
                        <div class="col-sm-1" style="padding:0">
                        </div>
                        <div class="col-sm-9" style="padding:0">
                            <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                <div class="form-group" style="padding: 15px">
                                    <div class="col-sm-6" style="">
                                        <label class="p-t-5 control-label pull-right">Code:</label>
                                    </div>
                                    <div class="col-sm-6" style="">
                                        <input type="text" id="paySubGroupCode" name="Code" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" required>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                <div class="form-group" style="padding: 15px">
                                    <div class="col-sm-6" style="">
                                        <label class="p-t-5 control-label pull-right ">Title:</label>
                                    </div>
                                    <div class="col-sm-6" style="">
                                        <input type="text" id="paySubGroupTitle" name="Name" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control " required>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                <div class="form-group" style="padding: 15px">
                                    <div class="col-sm-6" style="">
                                        <label class="p-t-5 control-label pull-right ">Title (In Arabic):</label>
                                    </div>
                                    <div class="col-sm-6" style="">
                                        <input type="text" id="paySubGroupTitleLocalized" name="NameLocalized" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                <div class="form-group" style="padding: 15px">
                                    <div class="col-sm-6" style="">
                                        <label class="p-t-5 control-label pull-right">Description:</label>
                                    </div>
                                    <div class="col-sm-6" style="">
                                        <input type="text" id="paySubGroupDescription" name="Description" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                <div class="form-group" style="padding: 0">
                                    <div class="col-sm-6" style="">
                                        <label class="p-t-5 control-label pull-right">Pay Group:</label>
                                    </div>
                                    <div class="col-sm-6" style="">
                                        <select id="payGroupId" name="PayGroupId" class="form-control mltslct payGroup">
                                        </select>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                <div class="form-group" style="padding: 15px">
                                    <div class="col-sm-6" style="">
                                        <label class="p-t-5 control-label pull-right">Pay Frequency:</label>
                                    </div>
                                    <div class="col-sm-6" style="">
                                        <select id="payFrequencyId" name="FrequencyId" class="form-control mltslct payFrequency">
                                        </select>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                <div class="form-group" style="padding: 15px">
                                    <div class="col-sm-6" style="">
                                        <label class="p-t-5 control-label pull-right">Legal Entity:</label>
                                    </div>
                                    <div class="col-sm-6" style="">
                                        <select id="legalEntityId" name="LegalEntityId" class="form-control mltslct legalEntity">
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-2" style="padding:0">
                        </div>
                    </div>
                    <div id="groupPaymentsTab" style="display:none">
                        @*<ejs-tab id="paymentSpecificFormTabs" animation="ViewBag.animation" height="auto" headerPlacement="Top">
                                <e-tab-tabitems>
                                    <e-tab-tabitem header="@(new TabHeader { Text = "Bank Payments" })" content="#bankPaymentsTab"></e-tab-tabitem>
                                    <e-tab-tabitem header="@(new TabHeader { Text = "Cash Payments" })" content="#cashPaymentsTab"></e-tab-tabitem>
                                    <e-tab-tabitem header="@(new TabHeader { Text = "Cheque Payments" })" content="#chequePaymentsTab"></e-tab-tabitem>
                                    <e-tab-tabitem header="@(new TabHeader { Text = "Third Party Payments" })" content="#thirdPartyPaymentsTab"></e-tab-tabitem>
                                </e-tab-tabitems>
                            </ejs-tab>*@
                        <div id="bankPaymentsTab" style="">
                            <div class="row">
                                <div class="col-sm-1" style="padding:0">
                                </div>
                                <div class="col-sm-9" style="padding:0">
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-6" style="">
                                                <label class="p-t-5 control-label pull-right">Allow Bank Transfers:</label>
                                            </div>
                                            <div class="col-sm-6" style="">
                                                <input type="checkbox" name="IsBankPaymentAllowed" onchange="$('#allowedPaymentBanks').attr('disbaled', this.checked? '' : 'disabled')" class="form-control">
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-6" style="">
                                                <label class="p-t-5 control-label pull-right">Banks List:</label>
                                            </div>
                                            <div class="col-sm-6" style="">
                                                <select id="allowedPaymentBanks" name="AllowedBanks" multiple="multiple" class="form-control mltslct ps_banks">
                                                </select>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-6" style="">
                                                <label class="p-t-5 control-label pull-right">Allow Cash Payment:</label>
                                            </div>
                                            <div class="col-sm-6" style="">
                                                <input type="checkbox" name="IsCashPaymentAllowed" class="form-control">
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-6" style="">
                                                <label class="p-t-5 control-label pull-right">Allow Cheque Payment:</label>
                                            </div>
                                            <div class="col-sm-6" style="">
                                                <input type="checkbox" name="IsChequePaymentAllowed" class="form-control">
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-6" style="">
                                                <label class="p-t-5 control-label pull-right">Allow Third Party Payments:</label>
                                            </div>
                                            <div class="col-sm-6" style="">
                                                <input type="checkbox" onchange="$('#thirdPartyBanks').attr('disbaled', this.checked? '' : 'disabled')" name="AllowThirdPartyPayments" class="form-control">
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-6" style="">
                                                <label class="p-t-5 control-label pull-right">Allowed Banks:</label>
                                            </div>
                                            <div class="col-sm-6" style="">
                                                <select id="thirdPartyBanks" name="AllowedThirdPartyBanks" multiple="multiple" class="form-control mltslct ps_banks">
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-2" style="padding:0">
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="payrollPeriodsTab" style="display:none">
                        <div class="row">
                            <div class="col-sm-1" style="padding:0">
                            </div>
                            <div class="col-sm-9" style="padding:0">
                                <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div class="form-group" style="padding: 15px">
                                        <div class="col-sm-6" style="">
                                            <label class="p-t-5 control-label pull-right">Payroll Period:</label>
                                        </div>
                                        <div class="col-sm-6" style="">
                                            @*<ejs-dropdownlist id="payrollPeriodId" cssClass="ejsPayrollPeriods"
                                                              placeholder="Select a payroll period" popupHeight="220px">
                                            </ejs-dropdownlist>*@
                                            <div style="display: flex; flex-direction: row">
                                                <select id="payrollPeriodId" name="PayrollPeriodId" class="form-control mltslct payrollPeriods">
                                                </select>
                                                <button class="e-tbar-btn e-tbtn-txt e-control e-btn e-lib" onclick="
                                                    $('#payrollPeriodIdDialog')[0].ej2_instances[0].show();
                                                    let period = payrollPeriods.filter(function (x) { return x.id == $('#payrollPeriodId').val(); })[0];
                                                    console.log(period);
                                                    abp.widgets.PayrollPeriodWidget.call().refresh(period);
                                                " type="button" id="payrollPeriodEditToggle" tabindex="-1" aria-label="Add" style="width: auto; max-height: 27px !important; padding: 6px 6px 6px 8px">
                                                    <span class="e-btn-icon e-edit e-icons e-icon-left"></span>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-2" style="padding:0">
                            </div>
                        </div>
                        <ejs-dialog id="payrollPeriodIdDialog" showCloseIcon="true" visible="false" width="750px" allowDragging="true" overlayClick="onOverlayClick" isModal="true" 
                                    header="Selected Payroll Period" 
                                    target=".site-main">
                            <e-content-template>
                                <div id="abpCrudWidgets">
                                    @await Component.InvokeAsync(typeof(PayrollPeriodWidgetViewComponent));
                                </div>
                            </e-content-template>
                        </ejs-dialog>
                    </div>
                    <div id="referencesTab" class="areaForm" style="display:none">
                        <div class="row">
                            <div class="col-md-12">
                                <div class="panel-body p-t-0" style="">
                                    <div id="referencesCS" class="control-section">
                                        <ejs-grid id="ReferenceReferenceGrid" enableAutoFill="true" dataBound="dataBoundResponsive"
                                                  allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true"
                                                  hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true"
                                                  allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" dataSource="new List<dynamic>()"
                                                  toolbar="@initialToolBar" toolbarClick="defaultToolbarClick"
                                                  allowPaging="true" allowResizing="true">

                                            <e-grid-columns>
                                                <e-grid-column field="id" headerText="Id" textAlign="Center" visible="false" isPrimaryKey="true" showInColumnChooser="false"></e-grid-column>
                                                <e-grid-column field="type" allowEditing="false" headerText="Type" textAlign="Center"></e-grid-column>
                                                <e-grid-column field="name" allowEditing="false" headerText="Name" textAlign="Center"></e-grid-column>
                                                <e-grid-column field="code" allowEditing="false" headerText="Code" textAlign="Center"></e-grid-column>
                                                @*<e-grid-column headerText="Actions" textAlign="Center" commands="referenceCommands"></e-grid-column>*@
                                            </e-grid-columns>

                                            <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                            <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true"></e-grid-editSettings>
                                            <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                            <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                        </ejs-grid>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <label class="control-label m-b-5 "></label>
                            <input id="crudSubmitPaySubGroupBtn" type="button" class="btn btn-success btn-block formSpaceSubmitBtn" value="Create Pay Sub Group" required />
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>
<ejs-dialog id="alert_dialog" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy with Header" content="Atleast one row should be selected to copy with header">
    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
    </e-dialog-buttons>
</ejs-dialog>
<ejs-dialog id="alert_dialog_1" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy" content="Atleast one row should be selected to copy">
    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
    </e-dialog-buttons>
</ejs-dialog>

<script>
    let lastCrudType;
    let lastCrudData;
    function onCardButtonClickedDataCustom(type, data) {
        lastCrudType = type;
        lastCrudData = data;
        if (type == 'view' || type == 'edit')
        {
            editViewCrudSpace(type, data);
        }
        else if (type == 'delete')
        {
            Swal.showLoading();

            let formData = new FormData();
            formData.append("info", JSON.stringify(data));
            let xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
            formData.append("__RequestVerificationToken", xhrToken);
            swal.fire("", "Are you sure?", "info").then(function (v) {
                $.ajax({
                    url: '?handler=PaySubGroup',
                    async: true,
                    type: "DELETE",
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: function (data) {
                        swal.fire("Success", "Pay Sub Group(s) has successfully been deleted", "success");

                        if ($('#paySubGroupsForm').css('display') !== 'none') {
                            $('#paySubGroupsForm').slideUp();
                        }


                        $('.row.tiles-loader').slideDown();
                        cERP.appServices.hR.organizationalManagement.payrollStructure.pS_PaySubGroup.getAllPaySubGroup().done(function (data) {
                            $('#paySubGroupsLoader').slideUp(100);
                            $('.row.tiles-loader').slideUp();
                            gridObj.hideSpinner();

                            calculateTiles(data);

                            gridObj.dataSource = data;
                            setTimeout(function () { gridObj.hideSpinner() }, 200);

                        });

                        Swal.hideLoading();
                    },
                    error: function (err) {
                        swal.fire("Failed", "Pay Sub Group(s) couldn't be deleted, please fix all errors and try again.", "error");

                        console.log(err);
                        Swal.hideLoading();
                    }
                });
            });
        }
    }
    function editViewCrudSpace(type, data) {
        loadAllDependencies(data);
        //$('.payrollCalendarRange > input', '#crudSpace')[0].ej2_instances[0].value = [new Date(data.periodStartDate), new Date(data.periodEndDate)];
        //$('#PayrollPeriodsGrid', '#crudSpace')[0].ej2_instances[0].dataSource = data.payPeriods;
        if (type == 'view') {
            console.log('CRUD VIEW SPACE');
            //$('.payrollCalendarRange > input', '#crudSpace')[0].ej2_instances[0].enabled = false;
            //$('#PayrollPeriodsGrid', '#crudSpace')[0].ej2_instances[0].allowEditing = false;
            $('.formSpaceTitle', '#crudSpace').text('Viewing Pay Sub Group: ' + data.name);
            $('#asOffTitle').text('As of:');
            $('#asOffTitle').css('width', '75px');

            setTimeout(function () {
                $('.formSpaceSubmitBtn').attr('value', 'View Pay Sub Group');
            }, 1000);
        } else {
            //$('.payrollCalendarRange > input', '#crudSpace')[0].ej2_instances[0].enabled = true;
            //$('#PayrollPeriodsGrid', '#crudSpace')[0].ej2_instances[0].allowEditing = true;
            $('.formSpaceTitle', '#crudSpace').text('Editing Pay Sub Group: ' + data.name);
            $('#asOffTitle').text('Effective Date:')
            $('#asOffTitle').css('width', '180px');
            setTimeout(function () {
                $('.formSpaceSubmitBtn', '#crudSpace').attr('value', 'Update Pay Sub Group');
                $('#paySubGroupCode').attr('readonly', 'readonly');
            }, 1000);
        }

        $('#allowedPaymentBanks', '#crudSpace').multiselect('select', data.allowedBanks.map(function (x) { return x.bankId }));
        $('#thirdPartyBanks', '#crudSpace').multiselect('select', data.allowedBanks.filter(function (x) { return x.isThirdParty == true }).map(function (x) { return x.bankId }));
    } 
    function calculateTiles(data) {
        listOfData = generateCardTiles(data, 'name', '',
            [
                //{ title: 'Data', path: '*', isVisible: false },
                { title: 'Code', path: 'code' },
                { title: 'Description', path: 'description' },
                { title: 'Frequency', path: 'frequency.name' },
                { title: 'Pay Group', path: 'payGroup.name' },
                { title: 'Period Name', path: 'payrollPeriod.name' },
                { title: 'Period Frequency', path: 'payrollPeriod.periodFrequencyDescription' },
                { title: 'Period Start Date', path: 'payrollPeriod.periodStartDate' },
                { title: 'Period End Date', path: 'payrollPeriod.periodEndDate' },
                { title: 'Total Periods', path: 'payrollPeriod.totalPeriods' },
                { title: 'Extra Periods', path: 'payrollPeriod.extraPeriods' },
            ],
            {
                action_btns: [
                    { tag: 'button', side: 'left', text: 'Favourite', type: 'fav', iconClass: 'far fa-star', color: 'quatery' },
                    { tag: 'button', side: 'left', text: 'Audit', type: 'auditTrail', iconClass: 'e-icons e-audit-clock', color: 'tertiary' },
                    { tag: 'button', side: 'right', text: 'View', type: 'view', iconClass: 'e-icons e-search', color: 'secondary' },
                    { tag: 'button', side: 'right', text: 'Edit', type: 'edit', iconClass: 'e-icons e-edit', color: 'primary' },
                    { tag: 'button', side: 'right', text: 'Delete', type: 'delete', iconClass: 'e-icons e-delete', color: 'danger' }
                ],
                isVertical: false
            },
            false
        );

        destroyAllCard();
        cardRendering(listOfData);
    }
    

    function toggleSearchSpace() {
        isSearchingCrudSpace = true;

        loadAllDependencies(null, 'searchSpace');
        //$('.payrollCalendarRange > input', '#searchSpace')[0].ej2_instances[0].value = [];
        $('#PayrollPeriodsGrid')[0].ej2_instances[0].dataSource = [];
        FillDivFormByObject({}, $('#searchSpace :input'));
        $('.formSpaceTitle', '#searchSpace').text('Search Pay Sub Groups');

        let searchSpaceIndex = spaceTabs.items.findIndex(function (x) {
            return x.properties.content =='#searchSpace';
        });
        spaceTabs.setActive(searchSpaceIndex);
        //areaHeaderBtnClick();
    }
    function toggleCreateNew(navigate) {
        isSearchingCrudSpace = false;
        $('.formSpaceTitle', '#crudSpace').text('Create New Pay Sub Group');
        $('#asOffTitle').text('Effective Date:');
        $('#asOffTitle').css('width', '180px');

        loadAllDependencies();
        //$('.payrollCalendarRange > input', '#crudSpace')[0].ej2_instances[0].value = [];
        //$('.payrollCalendarRange > input', '#crudSpace')[0].ej2_instances[0].enabled = true;
        $('#PayrollPeriodsGrid')[0].ej2_instances[0].dataSource = [];
        $('#PayrollPeriodsGrid')[0].ej2_instances[0].allowEditing = true;
        FillDivFormByObject({}, $('#crudSpace :input'));

        let formSpaceIndex = spaceTabs.items.findIndex(function (x) {
            return x.properties.content =='#crudSpace';
        });
        if (navigate) spaceTabs.setActive(formSpaceIndex);
        spaceTabs.items[formSpaceIndex].header.properties.text = "Create New";
        spaceTabs.refresh();

        $('.formSpaceSubmitBtn', '#crudSpace').attr('value', 'Create Pay Sub Group');
        $('.formSpaceSubmitBtn', '#crudSpace').slideDown();
        //areaHeaderBtnClick();
    }
    function goBackSpace() {

        let formSpaceIndex = spaceTabs.items.findIndex(function (x) {
            return x.properties.content =='#crudSpace';
        });
        let homeSpaceIndex = spaceTabs.items.findIndex(function (x) {
            return x.properties.content =='#tileSpace';
        });
        if (spaceTabs.lastIndex != -1) {
            spaceTabs.setActive(spaceTabs.lastIndex == formSpaceIndex ? homeSpaceIndex : spaceTabs.lastIndex);

            //spaceTabs.items[crudSpaceIndex].header.properties.text = "Create New";
            //spaceTabs.refresh();
        }
        $('.formSpaceTitle', '#crudSpace').text('Create New Pay Sub Group');
        //areaHeaderBtnClick();
    }

    let isAuditTrail = false;

    function alertBtnClick() {
        let dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
        let dialogObj1 = document.getElementById('alert_dialog_1').ej2_instances[0];
        dialogObj.hide();
        dialogObj1.hide();
    }
    function toolbarClick(args) {
        let gridObj = document.getElementById("PaySubGroupGrid").ej2_instances[0];

        if (args.item.id === 'PaySubGroupGrid_pdfexport') {
            gridObj.pdfExport();
        }
        if (args.item.id === 'PaySubGroupGrid_excelexport') {
            gridObj.excelExport();
        }
        if (args.item.id === 'PaySubGroupGrid_csvexport') {
            gridObj.csvExport();
        }
        if (this.getSelectedRecords().length > 0) {
            let withHeader = false;
            if (args.item.id === 'copyHeader') {
                withHeader = true;
            }
            this.copy(withHeader);
        }
        else {
            if (args.item.id === 'copyHeader') {
                let dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                dialogObj.show();
            }
            else if (args.item.id === 'copy') {
                let dialogObj = document.getElementById('alert_dialog_1').ej2_instances[0];
                dialogObj.show();
            }
        }
        if (args.item.id === 'showActions') {
            gridObj.toolbar = [{ text: "Hide Actions", tooltipText: "Actions", prefixIcon: "e-custom-hide-actions", id: "hideActions" }, { text: "Toggle Grouping", tooltipText: "Grouping", prefixIcon: "e-custom-group-toggle", id: "toggleGrouping" }, { text: "Audit Trail", tooltipText: "View Audit Trail", prefixIcon: "e-custom-audit-trail", id: "toggleaudittrail" }, { text: "Toggle Detailed", tooltipText: "Toggle Detailed", prefixIcon: "e-toggledetailed", id: "toggleDetailed" }, { text: "ExcelExport", tooltipText: "Excel Export", prefixIcon: "e-excelexport", id: this.element.id + "_excelexport", align: 'Right' }, { text: this.element.id + "_PdfExport", tooltipText: "Pdf Export", prefixIcon: "e-pdfexport", id: "pdfexport", align: 'Right' }, { text: "CsvExport", tooltipText: "Csv Export", prefixIcon: "e-csvexport", id: this.element.id + "_csvexport", align: 'Right' }, { text: "Print", tooltipText: "Print", prefixIcon: "e-print", id: this.element.id + "_print", align: 'Right' }, { text: "Copy", tooltipText: "Copy", prefixIcon: "e-copy", id: "copy" }, "Search", { text: "Copy With Header", tooltipText: "Copy With Header", prefixIcon: "e-copy", id: "copyHeader" }, "ColumnChooser"];
            gridObj.refresh();
        }
        if (args.item.id === 'hideActions') {
            gridObj.toolbar = [{ text: "Show Actions", tooltipText: "Actions", prefixIcon: "e-custom-show-actions", id: "showActions" }, "Search", "ColumnChooser"];
            gridObj.showColumnChooser = true;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleGrouping') {
            gridObj.allowGrouping = !gridObj.allowGrouping;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleDetailed') {
            let visCount = 0;
            for (let i = 0; i < gridObj.columns.length; i++) {
                if (gridObj.columns[i].visible) visCount++;
            }
            if (visCount == gridObj.columns.length) {
                for (let i = 0; i < gridObj.columns.length; i++) {
                    let col = gridObj.columns[i];
                    if (typeof col.customAttributes != 'undefined' && typeof col.customAttributes.id != 'undefined' && col.customAttributes.id == 'detailed')
                        gridObj.showHider.hide(col.headerText, 'headerText');
                    else if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
            else {
                for (let i = 0; i < gridObj.columns.length; i++) {
                    let col = gridObj.columns[i];
                    if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
        }
        if (args.item.id === 'toggleaudittrail') {

            if (!isAuditTrail) {
                var agtGrid = $("#AuditTrailGrid")[0].ej2_instances[0];
                gridObj.showSpinner();

                $.ajax({
                    url: '?handler=DataAuditTrail',
                    async: true,
                    type: "GET",
                    data: {},
                    success: function (data) {
                        gridObj.hideSpinner();

                        //agtGrid.childGrid.childGrid.dataSource = data.tertiaryDS;
                        //agtGrid.childGrid.dataSource = data.secondaryDS;
                        agtGrid.dataSource = data.ds;
                        agtGrid.refresh();

                        $(".customContentArea").css('position', 'unset');
                        $("#auditTrail").slideDown(200);
                    },
                    error: function (data) {
                        gridObj.hideSpinner();

                        $(".customContentArea").css('position', 'absolute');
                        $("#auditTrail").slideUp(200);

                        swal.fire('Failed', `An error occured while generating the audit trail`, 'error');
                    }
                });

            }
            else {
                $(".customContentArea").css('position', 'absolute');
                $("#auditTrail").slideUp(200);
            }

            isAuditTrail = !isAuditTrail;
        }
        setTimeout(function () { gridObj.hideSpinner() }, 200);
    }
    function commandClick(args) {
        let gridObj = document.getElementById("PaySubGroupGrid").ej2_instances[0];
        if (args.commandColumn.type == "View") {
            isEditingCrudSpace = false;
            curCrudSpaceEdit = null;
        }
        else if (args.commandColumn.type == "Edit") {
            isEditingCrudSpace = true;
            curCrudSpaceEdit = args.rowData;
        }
        newDefaultCommandClick(gridObj, args);
    }

    function toggleAuditTrail(trailData) {
        $('#AuditTrailDialog')[0].ej2_instances[0].show();
        console.log(trailData);
        cERP.appServices.app.auditTrailService.auditTrail.getEntityAudits('@ViewContext.HttpContext.Request.Path.Value', trailData.id).done(function (data)
        {
            console.log('Yooo');
            console.log(data);
            abp.widgets.AuditTrailWidget.call().refresh(data);
        });
    }

    function paySubGroupActionComplete(args) {
        let gridObj = document.getElementById("PaySubGroupGrid").ej2_instances[0];
        setTimeout(function () { gridObj.hideSpinner() }, 200)

    }
    function paySubGroupActionBegin(args) {
        if (args.requestType == "delete") {
            let gridObj = document.getElementById("PaySubGroupGrid").ej2_instances[0];
            Swal.showLoading();

            let formData = new FormData();
            formData.append("paySubGroups", JSON.stringify(args.data));
            let xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
            formData.append("__RequestVerificationToken", xhrToken);

            $.ajax({
                url: '?handler=PaySubGroup',
                async: true,
                type: "DELETE",
                data: formData,
                contentType: false,
                processData: false,
                success: function (data) {
                    gridObj.hideSpinner();
                    swal.fire("Success", "PaySubGroup(s) has successfully been deleted", "success");

                    if ($('#paySubGroupsForm').css('display') !== 'none') {
                        $('#paySubGroupsForm').slideUp();
                    }
                },
                error: function (err) {
                    gridObj.hideSpinner();
                    swal.fire("Failed", "PaySubGroup(s) couldn't be deleted, please fix all errors and try again.", "error");

                    console.log(err);
                }
            });
            setTimeout(function () { gridObj.hideSpinner() }, 200);
        }
    }
</script>

