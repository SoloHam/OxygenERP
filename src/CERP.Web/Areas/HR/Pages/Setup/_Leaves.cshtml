@using CERP.Setup.DTOs;
@using Syncfusion.EJ2.Grids;
@using CERP;
@{
    var initialToolBar = new List<object>() { new { text = "Show Actions", tooltipText = "Actions", prefixIcon = "e-custom-show-actions", id = "showActions" }, "Search", "ColumnChooser" };
    var fullToolBar = new List<object>() { new { text = "Hide Actions", tooltipText = "Actions", prefixIcon = "e-custom-hide-actions", id = "hideActions" }, new { text = "Toggle Grouping", tooltipText = "Grouping", prefixIcon = "zmdi-chevron-up", id = "toggleGrouping" }, new { text = "Toggle Detailed", tooltipText = "Toggle Detailed", prefixIcon = "e-toggledetailed", id = "toggleDetailed" }, "ExcelExport", "CsvExport", "Print", "Search", "Delete", new { text = "Copy", tooltipText = "Copy", prefixIcon = "e-copy", id = "copy" }, new { text = "Copy With Header", tooltipText = "Copy With Header", prefixIcon = "e-copy", id = "copyHeader" }, "ColumnChooser" };

    List<object> leaveRequestsCommands = new List<object>();
    leaveRequestsCommands.Add(new { type = "Edit", buttonOption = new { iconCss = "e-icons e-edit", cssClass = "e-flat" } });
    leaveRequestsCommands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "e-flat" } });
    leaveRequestsCommands.Add(new
    {
        type = "Cancel",
        buttonOption = new { iconCss = "e-icons e-cancel-icon", cssClass = "e-flat" }
    });

    List<GridColumn> leaveRequestsGridColumns = new List<GridColumn>()
{
        new GridColumn { Field = "id", Width = "80", HeaderText = "", Visible=false, ShowInColumnChooser=false, TextAlign=TextAlign.Center, MinWidth="10", IsPrimaryKey=true  },
        new GridColumn { Field = "title", Width = "110", HeaderText = "Title", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "titleLocalized", Width = "110", HeaderText = "Title (In Arabic)", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "prefix", Width = "110", HeaderText = "Prefix", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "startingNo", Width = "110", HeaderText = "Starting No", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "leaveType.value", Width = "110", HeaderText = "Leave Type", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "entitlementDays", Width = "110", HeaderText = "Employment Days", TextAlign=TextAlign.Center,  MinWidth="10"  },
        //new GridColumn { Field = "getAllDepartments", Width = "110", HeaderText = "Department", TextAlign=TextAlign.Center,  MinWidth="10"  },
        //new GridColumn { Field = "getAllPositions", Width = "110", HeaderText = "Position", TextAlign=TextAlign.Center,  MinWidth="10"  },
        //new GridColumn { Field = "getAllEmploymentTypes", Width = "110", HeaderText = "Employment Type", TextAlign=TextAlign.Center,  MinWidth="10"  },
        //new GridColumn { Field = "getAllEmployeeStatuses", Width = "110", HeaderText = "Employment Status", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "", DisplayAsCheckBox=true, HeaderText = "Additional Requests", TextAlign=TextAlign.Center,  MinWidth="10", Columns = new List<GridColumn>(){
                new GridColumn { Field = "hasAdvanceSalaryRequest", Width = "110", DisplayAsCheckBox=true, HeaderText = "Advance Salary", TextAlign=TextAlign.Center,  MinWidth="10"  },
                new GridColumn { Field = "hasExitReentryRequest", Width = "110", DisplayAsCheckBox=true, HeaderText = "Exit-Reentry", TextAlign=TextAlign.Center,  MinWidth="10"  },
                new GridColumn { Field = "hasAirTicketRequest", Width = "110", DisplayAsCheckBox=true, HeaderText = "Air Ticket", TextAlign=TextAlign.Center,  MinWidth="10"  },
            }
        },
        new GridColumn { Field = "", DisplayAsCheckBox=true, HeaderText = "Additional Requirements", TextAlign=TextAlign.Center,  MinWidth="10", Columns = new List<GridColumn>(){
                new GridColumn { Field = "hasNotesRequirement", Width = "110", DisplayAsCheckBox=true, HeaderText = "Notes", TextAlign=TextAlign.Center,  MinWidth="10"  },
                new GridColumn { Field = "hasAttachmentRequirement", Width = "110", DisplayAsCheckBox=true, HeaderText = "Attachment", TextAlign=TextAlign.Center,  MinWidth="10"  },
            }
        },
        new GridColumn { Width = "150", HeaderText = "Actions", TextAlign=TextAlign.Center, MinWidth="10", Commands = leaveRequestsCommands }
    };

    List<object> lrApprovalRouteCommands = new List<object>();
    lrApprovalRouteCommands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "e-flat e-DeleteButton" } });
    lrApprovalRouteCommands.Add(new { type = "Cancel", buttonOption = new { iconCss = "e-icons e-cancel-icon", cssClass = "e-flat" } });
    lrApprovalRouteCommands.Add(new { type = "Save", buttonOption = new { iconCss = "e-icons e-update", cssClass = "e-flat" } });
    lrApprovalRouteCommands.Add(new { type = "MoveUp", buttonOption = new { iconCss = "e-icons e-c-moveup", cssClass = "e-flat" } });
    lrApprovalRouteCommands.Add(new { type = "MoveDown", buttonOption = new { iconCss = "e-icons e-c-movedown", cssClass = "e-flat" } });
    lrApprovalRouteCommands.Add(new { type = "Edit", buttonOption = new { iconCss = "e-icons e-edit", cssClass = "e-flat" } });

    List<GridColumn> lrApprovalRouteGridColumns = new List<GridColumn>()
{
        new GridColumn { Field = "id", Visible=false, ShowInColumnChooser=false, IsPrimaryKey=true  },
        new GridColumn { Field = "routeIndex", Visible = false, HeaderText = "Route Index", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "active", AllowSorting = false, AutoFit=true, HeaderText = "Active", EditType="booleanEdit", DisplayAsCheckBox=true, TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "nofityEmployee", AllowSorting = false, AutoFit=true, HeaderText = "Notify", EditType="booleanEdit", DisplayAsCheckBox=true, TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "isPoster", AllowSorting = false, AutoFit=true, HeaderText = "Poster", EditType="booleanEdit", DisplayAsCheckBox=true, TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "getAllDepartmentNames", AllowSorting = false, AutoFit=true, HeaderText = "Department", AllowEditing=false, TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "getAllPositionTitles", AllowSorting = false, AutoFit=true, HeaderText = "Position", AllowEditing=false, TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "getAllEmployeeNames", AllowSorting = false,AutoFit=true, HeaderText = "Employee", AllowEditing=false, TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Width = "50", HeaderText = "Actions", TextAlign=TextAlign.Center, MinWidth="10", Commands = lrApprovalRouteCommands }
    };

    List<object> lrTasksCommands = new List<object>();
    lrTasksCommands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "e-flat e-DeleteButton" } });
    lrTasksCommands.Add(new { type = "Cancel", buttonOption = new { iconCss = "e-icons e-cancel-icon", cssClass = "e-flat" } });
    lrTasksCommands.Add(new { type = "Save", buttonOption = new { iconCss = "e-icons e-update", cssClass = "e-flat" } });
    lrTasksCommands.Add(new { type = "MoveUp", buttonOption = new { iconCss = "e-icons e-c-moveup", cssClass = "e-flat" } });
    lrTasksCommands.Add(new { type = "MoveDown", buttonOption = new { iconCss = "e-icons e-c-movedown", cssClass = "e-flat" } });
    lrTasksCommands.Add(new { type = "Edit", buttonOption = new { iconCss = "e-icons e-edit", cssClass = "e-flat" } });

    List<GridColumn> lrTasksGridColumns = new List<GridColumn>()
{
        new GridColumn { Field = "id", Visible=false, ShowInColumnChooser=false, IsPrimaryKey=true  },
        new GridColumn { Field = "routeIndex", Visible = false, HeaderText = "Route Index", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "active", AllowSorting = false, AutoFit=true, HeaderText = "Active", EditType="booleanEdit", DisplayAsCheckBox=true, TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "notifyEmployee", AllowSorting = false, AutoFit=true, HeaderText = "Notify", EditType="booleanEdit", DisplayAsCheckBox=true, TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "getAllDepartmentNames", AllowSorting = false, AutoFit=true, HeaderText = "Department", AllowEditing=false, TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "getAllPositionTitles", AllowSorting = false, AutoFit=true, HeaderText = "Position", AllowEditing=false, TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "getAllEmployeeNames", AllowSorting = false,AutoFit=true, HeaderText = "Employee", AllowEditing=false, TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "taskDescription", AllowSorting = false, AutoFit=true, HeaderText = "Description", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Width = "50", HeaderText = "Actions", TextAlign=TextAlign.Center, MinWidth="10", Commands = lrTasksCommands }
    };
}
<script>
        isEditingLR = false;
        isEditingLRLoaded = false;
        var curLREditRow;

        $(document).ready(function () {
            var lrGrid = $("#AllLeaveRequestsGrid")[0].ej2_instances[0];
            lrGrid.showSpinner();

            cERP.appServices.hR.leaveRequestService.leaveRequestTemplates.getAll().done(function (data) {
                lrGrid.hideSpinner();
                lrGrid.dataSource = data;
                lrGrid.refresh();
            });
            cERP.appServices.setup.lookup.dictionaryValue.getAllByValueType(ValueTypeModules.LeaveType).done(function (data) {
                var leaveTypes = [];
                $.each(data, function (i, d) {
                    leaveTypes.push({ label: d.value, value: d.id });
                });
                $("#lrLeaveTypeId").multiselect('dataprovider', leaveTypes);
            });
            cERP.appServices.setup.lookup.dictionaryValue.getAllByValueType(ValueTypeModules.EmployeeType).done(function (data) {
                var employmentTypes = [];
                $.each(data, function (i, d) {
                    employmentTypes.push({ label: d.value, value: d.id });
                });
                $("#lrEmploymentTypeId").multiselect('dataprovider', employmentTypes);
            });
            cERP.appServices.setup.lookup.dictionaryValue.getAllByValueType(ValueTypeModules.EmployeeStatus).done(function (data) {
                var employmeeStatuses = [];
                $.each(data, function (i, d) {
                    employmeeStatuses.push({ label: d.value, value: d.id });
                });
                $("#lrEmployeeStatusId").multiselect('dataprovider', employmeeStatuses);
            });
            cERP.appServices.hR.holidayService.holidays.getAll().done(function (data) {
                var holidays = [];
                $.each(data, function (i, d) {
                    holidays.push({ label: d.title, value: d.id });
                });
                $("#lrHolidaysDeductionIds").multiselect('dataprovider', holidays);
            });

            //$.ajax({
            //    url: '?handler=LeaveRequests',
            //    async: true,
            //    type: 'GET',
            //    data: {},
            //    success: function (data) {
            //        lrGrid.hideSpinner();
            //        lrGrid.dataSource = data;
            //        lrGrid.refresh();

            //        isLRLoaded = true;
            //    },
            //    error: function (err) {
            //        lrGrid.hideSpinner();
            //        isLRLoaded = false;
            //    }
            //});

            $('#addLeaveRequestBtn').on('click', function () {
                $('#submitLeaveRequestBtn').val('Add Leave Request');

                $('#lrTitle').val('');
                $('#lrTitleLocalized').val('');
                $('#lrPrefix').val('');
                $('#lrStartingNo').val('');
                $('#lrEntitlementDays').val('');

                //$('#lrLeaveTypeId').multiselect('deselectAll', false);
                //$('#lrLeaveTypeId').multiselect('updateButtonText');

                $('#lrDepartmentId').multiselect('deselectAll', false);
                $('#lrDepartmentId').multiselect('updateButtonText');
                $('#lrPositionId').multiselect('deselectAll', false);
                $('#lrPositionId').multiselect('updateButtonText');
                $('#lrEmploymentTypeId').multiselect('deselectAll', false);
                $('#lrEmploymentTypeId').multiselect('updateButtonText');
                $('#lrEmployeeStatusId').multiselect('deselectAll', false);
                $('#lrEmployeeStatusId').multiselect('updateButtonText');

                $('#lrHolidaysDeductionIds').multiselect('deselectAll', false);
                $('#lrHolidaysDeductionIds').multiselect('updateButtonText');

                cERP.appServices.hR.holidayService.holidays.getAll().done(function (data) {
                    var holidays = [];
                    $.each(data, function (i, d) {
                        holidays.push({ label: d.title, value: d.id });
                    });
                    $("#lrHolidaysDeductionIds").multiselect('dataprovider', holidays);
                });

                var apGrid = $("#LRApprovalRouteGrid")[0].ej2_instances[0];
                apGrid.dataSource = [];
                apGrid.dataSource.push({ id: 0, active: true, isDepartmentHead:true, department: { id: "@Guid.Empty", name: "Selected" }, position: { id: "@Guid.Empty", title: "Head" }, employee: { id: "@Guid.Empty", name: "Auto" } })
                apGrid.dataSource.push({ id: 1, active: true, isReportingTo:true, department: { id: "@Guid.Empty", name: "Selected" }, position: { id: "@Guid.Empty", title: "Auto" }, employee: { id: "@Guid.Empty", name: "Auto [Reporting To]" } })
                apGrid.refresh();

                var tasksGrid = $("#LRTasksGrid")[0].ej2_instances[0];
                tasksGrid.dataSource = [];
            });

            
            $("#addToApprovalRouteBtn").on('click', function (args) {
                var apGrid = $("#LRApprovalRouteGrid")[0].ej2_instances[0];
                //var depIds = $("#apDepartmentId").val();
                //var posIds = $("#apPositionId").val();
                var emps = $("#apEmployeeId").val();
                if (depId == '' || posId == '' || empId == '' || apGrid.dataSource.filter(function (e) { return e.employees.id === empId; }).length > 0)
                    return;

                var isActive = $("#APIsActive").parent().hasClass('active');
                var notifyEmployee = $("#APNotify").parent().hasClass('active');
                var isPoster = $("#APIsPoster").parent().hasClass('active');

                var employees = [];
                for (var i = 0; i < emps.length; i++) {
                    var emp = emps[i];
                    employees.push(
                        {
                            id: emp.id,
                            name: emp.name,
                            department: { id: emp.departmentId, name: emp.depName },
                            position: { id: emp.positionId, title: emp.posName }
                        }
                    );
                }
                function getAllEmployeeNames() {
                    var names = '';
                    for (var i = 0; i < this.employees.length; i++) {
                        names += this.employees[i].name + (i == this.employees.length)? '' : ', ';
                    }
                    return names;
                }
                function getAllPositionTitles() {
                    var titles = '';
                    for (var i = 0; i < this.employees.length; i++) {
                        titles += this.employees[i].position.name + (i == this.employees.length) ? '' : ', ';
                    }
                    return titles;
                }
                function getAllDepartmentNames() {
                    var names = '';
                    for (var i = 0; i < this.employees.length; i++) {
                        names += this.employees[i].department.name + (i == this.employees.length) ? '' : ', ';
                    }
                    return names;
                }

                var tasks = $('#LRTasksGrid')[0].ej2_instances[0].dataSource;

                var apRoute = {
                    id: '',
                    active: isActive,
                    //isAny: isAny,
                    isAny: true,
                    notifyEmployee: notifyEmployee,
                    isPoster: isPoster,
                    employees: employees,
                    tasks: tasks,
                    getAllEmployeeNames: getAllEmployeeNames,
                    getAllPositionTitles: getAllPositionTitles,
                    getAllDepartmentNames: getAllDepartmentNames
                }
                apRoute.id = apRoute.getAllEmployeeNames;
                apGrid.dataSource.push(apRoute);
                apGrid.refresh();
            })

            $('#addLRTaskBtn').on('click', function () {
                var isCollapsed = $('#addTaskForm').css('display') == 'none';

                if (isCollapsed) {
                    $('#addLRTaskBtnSection').slideUp(200);
                    $('#addTaskForm').slideDown(200);
                    setTimeout(function () { $('#addLRTaskBtn', '#addLRTaskBtnSection').html('<i class="fa fa-arrow-up p-r-5"></i> Cancel Add') }, 200)
                    $('#addLRTaskBtnSection').slideDown(200);

                } else {
                    $('#addLRTaskBtnSection').slideUp(200);
                    $('#addTaskForm').slideUp(200);
                    setTimeout(function () { $('#addLRTaskBtn', '#addLRTaskBtnSection').html('<i class="fa fa-plus p-r-5"></i> Add Task') }, 200)
                    $('#addLRTaskBtnSection').slideDown(200);
                }
            });
            $("#addTaskBtn").on('click', function (args) {
                var taskGrid = $("#LRTasksGrid")[0].ej2_instances[0];
                var depIds = $("#taskDepartmentId").val();
                var posIds = $("#taskPositionId").val();
                var emps = $("#taskEmployeeId").val();
                var taskDescription = $("#lrTaskDescription").val();
                if (depId == '' || posId == '' || empId == '' || taskDescription == '' || (taskGrid.dataSource.length > 0 && taskGrid.dataSource.filter(function (e) { return e.employee.id === empId; }).length > 0))
                    return;

                var isActive = $("#taskIsActive").parent().hasClass('active');
                var notifyEmployee = $("#taskNotify").parent().hasClass('active');

                var employees = [];
                for (var i = 0; i < emps.length; i++) {
                    var emp = emps[i];
                    employees.push(
                        {
                            id: emp.id,
                            name: emp.name,
                            department: { id: emp.departmentId, name: emp.depName },
                            position: { id: emp.positionId, title: emp.posName }
                        }
                    );
                }
                function getAllEmployeeNames() {
                    var names = '';
                    for (var i = 0; i < this.employees.length; i++) {
                        names += this.employees[i].name + (i == this.employees.length) ? '' : ', ';
                    }
                    return names;
                }
                function getAllPositionTitles() {
                    var titles = '';
                    for (var i = 0; i < this.employees.length; i++) {
                        titles += this.employees[i].position.name + (i == this.employees.length) ? '' : ', ';
                    }
                    return titles;
                }
                function getAllDepartmentNames() {
                    var names = '';
                    for (var i = 0; i < this.employees.length; i++) {
                        names += this.employees[i].department.name + (i == this.employees.length) ? '' : ', ';
                    }
                    return names;
                }

                var task = {
                    id: '',
                    active: isActive,
                    //isAny: isAny,
                    isAny: true,
                    notifyEmployee: notifyEmployee,
                    employees: employees,
                    getAllEmployeeNames: getAllEmployeeNames,
                    getAllPositionTitles: getAllPositionTitles,
                    getAllDepartmentNames: getAllDepartmentNames
                }
                task.id = task.getAllEmployeeNames;
                taskGrid.dataSource.push(task);
                taskGrid.refresh();
            })

            $('#leaveRequestForm').on('submit', function (e) {
                e.preventDefault();
                if (ValidateForm())
                {
                    Swal.showLoading();

                    let form = [];
                    let lrDetails = $('#leaveRequestForm').find("textarea, input").serializeArray();
                    form = form.concat(lrDetails);
                    var params = objectifyForm(form);

                    params.isEditing = isEditingLR;
                    params.LRLeaveTypeId = $("#lrLeaveTypeId").val();
                    params.LRDepartmentIds = $("#lrDepartmentId").val();
                    params.LRPositionsIds = $("#lrPositionId").val();
                    params.LREmploymentTypeIds = $("#lrEmploymentTypeId").val();
                    params.LREmployeeStatusIds = $("#lrEmployeeStatusId").val();
                    params.LRDeductionHolidaysIds = $("#lrHolidaysDeductionIds").val();

                    params.LRApprovalRoute = $("#LRApprovalRouteGrid")[0].ej2_instances[0].dataSource;

                    params.LRAdvanceSalaryAD = $("#LRAdvanceSalaryAD").parent().hasClass('active');
                    params.LRExitReentryAD = $("#LRExitReentryAD").parent().hasClass('active');
                    params.LRAirTicketAD = $("#LRAirTicketAD").parent().hasClass('active');

                    params.LRNotesAR = $("#LRNotesRequired").parent().hasClass('active');
                    params.LRAttachmentAR = $("#LRAttachmentRequired").parent().hasClass('active');

                    if (isEditingLR) {
                        params.Id = curLREditRow.id;

                        //cERP.appServices.hR.leaveRequestTemplates.update()
                    }
                    else {

                        //cERP.appServices.hR.leaveRequestTemplates.update()
                    }
                    let formData = new FormData();
                    formData.append("info", JSON.stringify(params));
                    var xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
                    formData.append("__RequestVerificationToken", xhrToken);

                    $.ajax({
                        url: "?handler=LeaveRequestTemplate",
                        async: true,
                        type: "POST",
                        data: formData,
                        contentType: false,
                        processData: false,
                        success: function (data) {
                            var grid = $("#AllLeaveRequestsGrid")[0].ej2_instances[0];

                            Swal.hideLoading();
                            if (isEditingLR) {
                                grid.refresh(); // refresh the Grid.

                                swal.fire("Success", "Leave request has successfully been updated", "success");

                                for (var i = 0; i < grid.dataSource.length; i++) {
                                    if (grid.dataSource[i].id == data.id) {
                                        grid.dataSource[i] = data;
                                    }
                                }
                                grid.refresh();
                            }
                            else {
                                grid.dataSource.push(data);
                                grid.refresh(); // refresh the Grid.

                                swal.fire("Success", "Leave request has successfully been added", "success");
                            }
                        },
                        error: function (err) {
                            Swal.hideLoading();
                            if (isEditingLR)
                                swal.fire("Failed", "Leave request couldn't be updated, please fix all errors and try again.", "error");
                            else
                                swal.fire("Failed", "Leave request couldn't be added, please fix all errors and try again.", "error");

                            console.log(err);
                        }
                    });
                }
                else
                {
                    Swal.close();
                    Swal.hideLoading();
                }
            });

            function ValidateForm()
            {
                var elmForm = $("#leaveRequestForm");
                // stepDirection === 'forward' :- this condition allows to do the form validation
                // only on forward navigation, that makes easy navigation on backwards still do the validation when going next
                var valid = false;
                elmForm.validator('validate');
                if (elmForm)
                {
                    var elmErr = elmForm.find('.has-error');
                    if (elmErr)
                    {
                        if (elmErr.length > 0)
                        {
                            // Form validation failed
                            valid = false;
                        }
                        else
                        {
                            valid = true;
                        }
                    }
                }
                return valid;
            }
        });
</script>

<style>
    .e-c-moveup:before {
        content: '\e307'
    }

    .e-c-movedown:before {
        content: '\e305'
    }
</style>

<div class="m-l-20 m-t-0">
    <h2>Leave Requests</h2>
    <p>
        Types of leave requests made by employees
    </p>
</div>
<hr />
<div class="panel-body p-t-0" style="padding-bottom:0;">
    <div class="col-lg-12 padding-right-0">

        <div class="areaHeader" style="display:flex;">
            <div class="areaHeaderTitle">
                <span id="areHeadertitle" class="menu-text">Current Leave Requests</span>
                @*<span id="subTitle" class="menu-text" style="padding-left:15px; font-size: 28px; font-family:Roboto; font-weight:200;">@ViewData["SubTitle"]</span>*@
            </div>
            @*<h3 class="control-label" style="flex-grow: 1; margin:0">Approval Route</h3>*@
            <div class="pull-right text-right p-r-20 areaHeaderBtnSec">
                @*<div class="clearfix margin-15"></div>*@
                <a id="addLeaveRequestBtn" onclick="areaHeaderBtnClick(event)" class="btn btn-outline-dark areaHeaderBtn"><i class="fa fa-plus fa-fw"></i> Add New</a>
            </div>
        </div>
        <form id="leaveRequestForm" class="row areaForm" method="post" data-toggle="validator" style="display: none; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
            <div class="row">
                <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                    <div class="col-sm-6" style="padding:0">
                        <div class="form-group">
                            <label class="control-label m-b-5 ">LR Title:</label>
                            <input type="text" id="lrTitle" name="LRTitle" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control " required>
                        </div>
                    </div>
                    <div class="col-sm-6" style="padding:0">
                        <div class="form-group">
                            <label class="control-label m-b-5 ">LR Title (In Arabic):</label>
                            <input type="text" id="lrTitleLocalized" name="LRTitleLocalized" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                        </div>
                    </div>
                </div>
                <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                    <div class="col-sm-6" style="padding:0">
                        <div class="form-group">
                            <label class="margin-bottom-5 control-label">LR Prefix:</label>
                            <input type="text" id="lrPrefix" name="LRPrefix" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" required>
                        </div>
                    </div>
                    <div class="col-sm-6" style="padding:0">
                        <div class="form-group">
                            <label class="margin-bottom-5 control-label">LR Starting No:</label>
                            <input type="number" min="0" id="lrStartingNo" name="LRStartingNo" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" required>
                        </div>
                    </div>
                </div>
                <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                    <div class="form-group">
                        <label class="margin-bottom-5 control-label">Leave Type:</label>
                        <select id="lrLeaveTypeId" name="LRLeaveTypeId" class="form-control" required>
                        </select>
                    </div>
                </div>
                <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                    <div class="form-group">
                        <label class="margin-bottom-5 control-label">Entitlement Days:</label>
                        <input type="number" min="1" id="lrEntitlementDays" name="LREntitlementDays" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" required>
                    </div>
                </div>
            </div>
            <div class="row">

                <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                    <div class="form-group">
                        <label class="control-label m-b-5 ">Department:</label>
                        <select id="lrDepartmentId" name="LRDepartmentId" multiple="multiple" class="form-control" onchange="SelectDepartmentPositions();" required>
                        </select>
                    </div>
                </div>
                <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                    <div class="form-group">
                        <label class="margin-bottom-5 control-label">Position:</label>
                        <select id="lrPositionId" name="LRPositionId" multiple="multiple" class="form-control" required>
                        </select>
                    </div>
                </div>
                <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                    <div class="form-group">
                        <label class="margin-bottom-5 control-label">Employment Type:</label>
                        <select id="lrEmploymentTypeId" name="EmployementTypeId" multiple="multiple" class="form-control" required>
                        </select>
                        @*<ejs-dropdownlist id="vegetables" placeholder="Select an employment type" popupHeight="200px" dataSource="@employementTypes">
                            <e-dropdownlist-fields text="Value" value="Id"></e-dropdownlist-fields>
                        </ejs-dropdownlist>*@
                    </div>
                </div>
                <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                    <div class="form-group">
                        <label class="margin-bottom-5 control-label">Employmee Status:</label>
                        <select id="lrEmployeeStatusId" name="EmployementStatusId" multiple="multiple" class="form-control" required>
                        </select>
                    </div>
                </div>
            </div>
            <hr />
            <div class="areaHeader" style="display:flex;">
                <div class="areaHeaderTitle">
                    <span id="areHeadertitle" class="menu-text">Approval Route</span>
                    @*<span id="subTitle" class="menu-text" style="padding-left:15px; font-size: 28px; font-family:Roboto; font-weight:200;">@ViewData["SubTitle"]</span>*@
                </div>
                @*<h3 class="control-label" style="flex-grow: 1; margin:0">Approval Route</h3>*@
                <div class="pull-right text-right p-r-20 areaHeaderBtnSec">
                    @*<div class="clearfix margin-15"></div>*@
                    <a id="addLRApprovalRouteBtn" onclick="areaHeaderBtnClick(event)" class="btn btn-outline-dark areaHeaderBtn"><i class="fa fa-plus fa-fw"></i> Add New</a>
                </div>
            </div>
            <div id="addApprovalRouteForm" class="areaForm" role="form" data-toggle="validator" style="display: none">
                <div class="row">
                    <div class="col-lg-3 col-md-3 col-sm-6 col-12">
                        <div class="col-sm-6" style="padding:0">
                            <div class="form-group">
                                <label class="control-label m-b-5 ">Department:</label>
                                <select id="apDepartmentId" name="DepartmentId" multiple="multiple" class="form-control" onchange="SelectAPDepartmentPositions();">

                                </select>
                            </div>
                        </div>
                        <div class="col-sm-6" style="padding:0">
                            <div class="form-group">
                            <label class="margin-bottom-5 control-label">Position:</label>
                            <select id="apPositionId" name="PositionId" class="form-control" multiple="multiple" onchange="SelectAPPositionEmployees()">

                            </select>
                        </div>
                        </div>
                    </div>
                    <div class="col-lg-3 col-md-3 col-sm-6 col-12">
                        <div class="form-group">
                            <label class="margin-bottom-5 control-label">Employee:</label>
                            <select id="apEmployeeId" onchange="if ($('#apEmployeeId').val().length > 1) $('#APAllowAnySec').show(); else $('#APAllowAnySec').hide();" name="Employee" multiple="multiple" class="form-control">

                            </select>
                        </div>
                    </div>
                    <div class="col-lg-3 col-md-3 col-sm-6 col-12">
                        <div class="form-group">
                            <label class="control-label m-b-5 ">Additional Information:</label>

                            <div class="btn-group" data-toggle="buttons">
                                <label class="btn btn-default active">
                                    <input type="checkbox" id="APIsActive" autocomplete="off"> Active
                                </label>
                                <label class="btn btn-default active">
                                    <input type="checkbox" id="APNotify" autocomplete="off"> Notify Employee
                                </label>
                                <label class="btn btn-default">
                                    <input type="checkbox" id="APIsPoster" autocomplete="off"> Poster
                                </label>
                                <label class="btn btn-default" id="APAllowAnySec" style="display:none">
                                    <input type="checkbox" id="APAllowAny" autocomplete="off"> Allow Any
                                </label>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3 col-md-3 col-sm-6 col-12">
                        <label class="margin-bottom-5 control-label"></label>
                        <button id="addToApprovalRouteBtn" type="button" class="btn btn-success btn-block"><i class="fa fa-plus p-r-5"></i> Add To Approval Route</button>
                    </div>
                </div>
                <div class="row m-md-t-5 m-md-b-10">
                    
                </div>
                @*<hr style="margin-top:6px">*@
                <div class="areaHeader" style="display:flex;">
                    <div class="areaHeaderTitle">
                        <span id="areHeadertitle" class="menu-text">Tasks</span>
                        @*<span id="subTitle" class="menu-text" style="padding-left:15px; font-size: 28px; font-family:Roboto; font-weight:200;">@ViewData["SubTitle"]</span>*@
                    </div>
                    @*<h3 class="control-label" style="flex-grow: 1; margin:0">Approval Route</h3>*@
                    <div class="pull-right text-right p-r-20 areaHeaderBtnSec">
                        @*<div class="clearfix margin-15"></div>*@
                        <a id="" onclick="areaHeaderBtnClick(event)" class="btn btn-outline-dark areaHeaderBtn"><i class="fa fa-plus fa-fw"></i> Add New</a>
                    </div>
                </div>
                <div id="addTaskForm" class="areaForm" role="form" data-toggle="validator" style="display: none">
                    <div class="row">
                        <div class="col-lg-3 col-md-3 col-sm-6 col-12">
                            <div class="col-sm-6" style="padding:0">
                                <div class="form-group">
                                    <label class="control-label m-b-5 ">Department:</label>
                                    <select id="taskDepartmentId" name="DepartmentId" multiple="multiple" class="form-control" onchange="SelectTaskDepartmentPositions();">

                                    </select>
                                </div>
                            </div>
                            <div class="col-sm-6" style="padding:0">
                                <div class="form-group">
                                    <label class="margin-bottom-5 control-label">Position:</label>
                                    <select id="taskPositionId" name="PositionId" multiple="multiple" class="form-control" onchange="SelectTaskPositionEmployees()">
                                        <option></option>

                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-3 col-md-3 col-sm-6 col-12">
                            <div class="form-group">
                                <label class="margin-bottom-5 control-label">Employee:</label>
                                <select id="taskEmployeeId" name="Employee" onchange="if ($('#taskEmployeeId').val().length > 1) $('#taskAllowAnySec').show(); else $('#taskAllowAnySec').hide();" multiple="multiple" class="form-control">
                                    <option></option>

                                </select>
                            </div>
                        </div>
                        <div class="col-lg-3 col-md-3 col-sm-6 col-12">
                            <div class="form-group">
                                <label class="margin-bottom-5 control-label">Task Description:</label>
                                <input type="text" id="lrTaskDescription" name="LRTaskDescription" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                            </div>
                        </div>
                        <div class="col-lg-3 col-md-3 col-sm-6 col-12">
                            <label class="margin-bottom-5 control-label"></label>
                            <button id="addTaskBtn" type="button" class="btn btn-success btn-block"><i class="fa fa-plus p-r-5"></i> Add Task</button>
                        </div>
                    </div>
                    <div class="row m-md-t-5">
                        <div class="form-group">
                            <div class="col-sm-5">
                                <label class="control-label m-b-5 ">Additional Information:</label>
                                <div class="btn-group" data-toggle="buttons">
                                    <label class="btn btn-default active">
                                        <input type="checkbox" id="taskIsActive" autocomplete="off"> Active
                                    </label>
                                    <label class="btn btn-default">
                                        <input type="checkbox" id="taskNotify" autocomplete="off"> Notify Employee
                                    </label>
                                    <label class="btn btn-default" id="taskAllowAnySec" style="display:none">
                                        <input type="checkbox" id="taskAllowAny" autocomplete="off"> Allow Any
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <ejs-grid id="LRTasksGrid" enableAutoFill="true" columns="@lrTasksGridColumns"
                          dataBound="dataBoundResponsive" commandClick="lrTaskCommandClick" actionBegin="lrTaskActionBegin"
                          allowExcelExport="true" allowPdfExport="true"
                          hierarchyPrintMode="Expanded" allowSelection="true" allowSorting="true"
                          gridLines="Both" rowDataBound="lrTaskRowDataBound"
                          toolbarClick="lrTaskToolbarClick" showColumnChooser="true" toolbar="@initialToolBar"
                          allowResizing="true">

                    <e-grid-sortsettings columns="@(new List<object>() { new { field = "routeIndex", direction = "Ascending" } })"></e-grid-sortsettings>
                    <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowEditing="true" allowDeleting="true"></e-grid-editSettings>
                    <e-grid-selectionsettings type="Multiple">
                    </e-grid-selectionsettings>
                </ejs-grid>
            </div>
            <ejs-grid id="LRApprovalRouteGrid" enableAutoFill="true" columns="@lrApprovalRouteGridColumns"
                        dataBound="dataBoundResponsive" commandClick="lrApprovalRouteCommandClick" actionBegin="lrApprovalRouteActionBegin"
                        allowExcelExport="true" allowPdfExport="true"
                        hierarchyPrintMode="Expanded" allowSelection="true" allowSorting="true"
                        gridLines="Both" rowDataBound="lrApprovalRouteRowDataBound"
                        toolbarClick="lrApprovalRouteToolbarClick" showColumnChooser="true" toolbar="@initialToolBar"
                        allowResizing="true">

                <e-grid-sortsettings columns="@(new List<object>() { new { field = "routeIndex", direction = "Ascending" } })"></e-grid-sortsettings>
                <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowEditing="true" allowDeleting="true"></e-grid-editSettings>
                <e-grid-selectionsettings type="Multiple">
                </e-grid-selectionsettings>
            </ejs-grid>
            <hr />
            <div class="row">
                <div class="form-group">
                    <div class="col-sm-3">
                        <label class="control-label m-b-5 ">Holidays for deduction:</label>
                    </div>
                    <div class="col-sm-9">
                        <select id="lrHolidaysDeductionIds" name="LRHolidaysDeductionIds" multiple="multiple" class="form-control">
                        </select>
                    </div>
                </div>
            </div>
            <div class="row m-md-t-5">
                <div class="form-group">
                    <div class="col-sm-3">
                        <label class="control-label m-b-5 ">Additional Requests:</label>
                    </div>
                    <div class="col-sm-9">
                        <div class="btn-group" data-toggle="buttons">
                            <label class="btn btn-default active">
                                <input type="checkbox" id="LRAdvanceSalaryAD" autocomplete="off"> Advance Salary
                            </label>
                            <label class="btn btn-default active">
                                <input type="checkbox" id="LRExitReentryAD" autocomplete="off"> Exit Re-Entry
                            </label>
                            <label class="btn btn-default active">
                                <input type="checkbox" id="LRAirTicketAD" autocomplete="off"> Air Ticket
                            </label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row m-md-t-5">
                <div class="form-group">
                    <div class="col-sm-3">
                        <label class="control-label m-b-5 ">Additional Requirements:</label>
                    </div>
                    <div class="col-sm-9">
                        <div class="btn-group" data-toggle="buttons">
                            <label class="btn btn-default active">
                                <input type="checkbox" id="LRNotesRequired" autocomplete="off"> Notes
                            </label>
                            <label class="btn btn-default active">
                                <input type="checkbox" id="LRAttachmentRequired" autocomplete="off"> Attachment
                            </label>
                        </div>
                    </div>
                </div>
            </div>
            <hr />
            <div class="row">
                <div class="col-lg-12">
                    <input id="submitLeaveRequestBtn" type="submit" class="btn btn-success btn-block" value="Add Leave Request" required />
                </div>
            </div>
        </form>
        <div id="leaveRequestsCS" class="control-section">
            <ejs-grid id="AllLeaveRequestsGrid" enableAutoFill="true" columns="@leaveRequestsGridColumns"
                        dataBound="dataBoundResponsive" commandClick="leaveRequestsCommandClick" actionBegin="leaveRequestsActionBegin"
                        allowExcelExport="true" height="100%" allowPdfExport="true"
                        hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true"
                        allowSorting="true" allowMultiSorting="true" gridLines="Both"
                        toolbarClick="leaveRequestsToolbarClick" showColumnChooser="true" toolbar="@initialToolBar"
                        allowPaging="true" allowResizing="true">

                @*<e-data-manager url="/api/app/leaveRequestTemplates/getAllAsync" adaptor="WebApiAdaptor" ></e-data-manager>*@

                <e-grid-filterSettings type="CheckBox">
                </e-grid-filterSettings>
                <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="false"></e-grid-editSettings>
                <e-grid-selectionsettings type="Multiple">
                </e-grid-selectionsettings>
                <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
            </ejs-grid>
        </div>
        </div>
    </div>
<script>

    function leaveRequestsActionBegin(args) {
        if (args.requestType == "save") {

        }
        else if (args.requestType == "delete") {
            Swal.showLoading();

            let formData = new FormData();
            formData.append("leaveRequests", JSON.stringify(args.data));
            var xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
            formData.append("__RequestVerificationToken", xhrToken);

            $.ajax({
                url: '?handler=LeaveRequest',
                async: true,
                type: "DELETE",
                data: formData,
                contentType: false,
                processData: false,
                success: function (data) {
                    swal.fire("Success", "Leave request(s) successfully deleted", "success");

                    if ($('#leaveRequestForm').css('display') !== 'none') {
                        $('#addLeaveRequestBtnSection').slideUp(200);
                        $('#leaveRequestForm').slideUp(200);
                        setTimeout(function () { $('#addLeaveRequestBtn', '#addLeaveRequestBtnSection').html('<i class="fa fa-plus p-r-5"></i> Add Leave Request') }, 200)
                        $('#addLeaveRequestBtnSection').slideDown(200);
                    }
                },
                error: function (err) {
                    swal.fire("Failed", "Leave request(s) couldn't be deleted, please fix all errors and try again.", "error");

                    console.log(err);
                }
            });
        }
    }
    function leaveRequestsCommandClick(args) {
        if (args.commandColumn.type == "Edit") {
            curLREditRow = args.rowData;
            isEditingLR = true;
            isEditingLRLoaded = false;
            var isCollapsed = $('#leaveRequestForm').css('display') == 'none';

            var timeout = 0;
            if (!isCollapsed) {
                $('#addLeaveRequestBtnSection').slideUp(200);
                $('#leaveRequestForm').slideUp(200);

                timeout = 200;
            }
            setTimeout(function () {
                $('#addLeaveRequestBtnSection').slideUp(200);
                $('#leaveRequestForm').slideDown(200);
                $('#addLeaveRequestBtnSection').slideDown(200);

                setTimeout(function () {
                    $('#addLeaveRequestBtn', '#addLeaveRequestBtnSection').html('<i class="fa fa-arrow-up p-r-5"></i> Cancel Update');
                    $('#submitLeaveRequestBtn').val('Update Leave Request');

                    $('#lrTitle').val(curLREditRow.title);
                    $('#lrTitleLocalized').val(curLREditRow.titleLocalized);
                    $('#lrPrefix').val(curLREditRow.prefix);
                    $('#lrStartingNo').val(curLREditRow.startingNo);
                    $('#lrEntitlementDays').val(curLREditRow.entitlementDays);
                    $("#lrLeaveTypeId").multiselect('select', curLREditRow.leaveTypeId);
                    $('#lrLeaveTypeId').multiselect('refresh');

                    $('#lrDepartmentId').multiselect('deselectAll', false);
                    $('#lrPositionId').multiselect('deselectAll', false);
                    $('#lrEmploymentTypeId').multiselect('deselectAll', false);
                    $('#lrEmployeeStatusId').multiselect('deselectAll', false);
                    $('#lrHolidaysDeductionIds').multiselect('deselectAll', false);

                    var departs = [];
                    for (var i = 0; i < curLREditRow.departments.length; i++) {
                        departs.push(curLREditRow.departments[i].departmentId);
                    }
                    $('#lrDepartmentId').multiselect('select', departs);
                    $('#lrDepartmentId').change();
                    var empTypes = [];
                    for (var i = 0; i < curLREditRow.employmentTypes.length; i++) {
                        empTypes.push(curLREditRow.employmentTypes[i].employmentTypeId);
                    }
                    $('#lrEmploymentTypeId').multiselect('select', empTypes);
                    var empStatuses = [];
                    for (var i = 0; i < curLREditRow.employeeStatuses.length; i++) {
                        empStatuses.push(curLREditRow.employeeStatuses[i].employeeStatusId);
                    }
                    $('#lrEmployeeStatusId').multiselect('select', empStatuses);
                    var holidays = [];
                    for (var i = 0; i < curLREditRow.holidays.length; i++) {
                        holidays.push(curLREditRow.holidays[i].holidayId);
                    }
                    $('#lrHolidaysDeductionIds').multiselect('select', holidays);
                    //var dedHolids = [];
                    //for (var i = 0; i < curLREditRow.deductionHolidays.length; i++) {
                    //    dedHolids.push(curLREditRow.deductionHolidays[i].deductionHolidayId);
                    //}
                    //$('#lrHolidaysDeductionIds').multiselect('select', dedHolids);

                    var apGrid = $("#LRApprovalRouteGrid")[0].ej2_instances[0];
                    apGrid.dataSource = null;
                    apGrid.showSpinner();
                    cERP.appServices.app.approvalRouteService.approvalRouteTemplates.getFull(curLREditRow.approvalRouteTemplate.id).done(function (data) {
                        apGrid.hideSpinner();
                        apGrid.dataSource = data.approvalRouteTemplateItems;
                        apGrid.refresh();
                    });
                    var taskGrid = $("#LRTasksGrid")[0].ej2_instances[0];
                    taskGrid.dataSource = null;
                    taskGrid.showSpinner();
                    cERP.appServices.app.taskService.taskTemplates.getFull(curLREditRow.taskTemplate.id).done(function (data) {
                        taskGrid.hideSpinner();
                        taskGrid.dataSource = data.taskTemplateItems;
                        taskGrid.refresh();
                    });
                    //for (var i = 0; i < approvalItems.length; i++) {
                    //    if (!approvalItems[i].isDepartmentHead && !approvalItems[i].isReportingTo) {
                    //        cERP.appServices.setup.departmentSetup.department.get(approvalItems[i].departmentId).done(function (data) {
                    //            approvalItems[i].department = data;
                    //        })
                    //        cERP.appServices.setup.positionSetup.position.get(approvalItems[i].positionId).done(function (data) {
                    //            approvalItems[i].position = data;
                    //        })
                    //        cERP.appServices.hR.employeeService.employee.get(approvalItems[i].employeeId).done(function (data) {
                    //            approvalItems[i].employee = data;
                    //        })
                    //    }
                    //}

                    if (curLREditRow.hasAdvanceSalaryRequest)
                        $('#LRAdvanceSalaryAD').parent().addClass('active');
                    else
                        $('#LRAdvanceSalaryAD').parent().removeClass('active');

                    if (curLREditRow.hasExitReentryRequest)
                        $('#LRExitReentryAD').parent().addClass('active');
                    else
                        $('#LRExitReentryAD').parent().removeClass('active');

                    if (curLREditRow.hasAirTicketRequest)
                        $('#LRAirTicketAD').parent().addClass('active');
                    else
                        $('#LRAirTicketAD').parent().removeClass('active');


                    if (curLREditRow.hasNotesRequirement)
                        $('#LRNotesRequired').parent().addClass('active');
                    else
                        $('#LRNotesRequired').parent().removeClass('active');

                    if (curLREditRow.hasAttachmentRequirement)
                        $('#LRAttachmentRequired').parent().addClass('active');
                    else
                        $('#LRAttachmentRequird').parent().removeClass('active');
                }, 150);
            }, timeout);
        }
        else if (args.commandColumn.type == "Copy") {
            this.copy(false);
        }
    }
    function leaveRequestsToolbarClick(args) {
        var gridObj = document.getElementById("AllLeaveRequestsGrid").ej2_instances[0];
        if (args.item.id === 'AllLeaveRequestsGrid_pdfexport') {
            gridObj.pdfExport();
        }
        if (args.item.id === 'AllLeaveRequestsGrid_excelexport') {
            gridObj.excelExport();
        }
        if (args.item.id === 'AllLeaveRequestsGrid_csvexport') {
            gridObj.csvExport();
        }
        if (this.getSelectedRecords().length > 0) {
            var withHeader = false;
            if (args.item.id === 'copyHeader') {
                withHeader = true;
            }
            this.copy(withHeader);
        }
        else {
            if (args.item.id === 'copyHeader') {
                var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                dialogObj.show();
            }
            else if (args.item.id === 'copy') {
                var dialogObj = document.getElementById('alert_dialog_1').ej2_instances[0];
                dialogObj.show();
            }
        }
        if (args.item.id === 'showActions') {
            gridObj.toolbar = [{ text: "Hide Actions", tooltipText: "Actions", prefixIcon: "e-custom-hide-actions", id: "hideActions" }, { text: "Toggle Grouping", tooltipText: "Grouping", prefixIcon: "e-custom-group-toggle", id: "toggleGrouping" }, { text: "Toggle Detailed", tooltipText: "Toggle Detailed", prefixIcon: "e-toggledetailed", id: "toggleDetailed" }, "ExcelExport", "CsvExport", "Print", "Search", "Delete", { text: "Copy", tooltipText: "Copy", prefixIcon: "e-copy", id: "copy" }, { text: "Copy With Header", tooltipText: "Copy With Header", prefixIcon: "e-copy", id: "copyHeader" }, "ColumnChooser"];
            gridObj.refresh();
        }
        if (args.item.id === 'hideActions') {
            gridObj.toolbar = [{ text: "Show Actions", tooltipText: "Actions", prefixIcon: "e-custom-show-actions", id: "showActions" }, "Search", "ColumnChooser"];
            gridObj.showColumnChooser = true;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleGrouping') {
            gridObj.allowGrouping = !gridObj.allowGrouping;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleDetailed') {
            var visCount = 0;
            for (var i = 0; i < gridObj.columns.length; i++) {
                if (gridObj.columns[i].visible) visCount++;
            }
            if (visCount == gridObj.columns.length) {
                for (var i = 0; i < gridObj.columns.length; i++) {
                    var col = gridObj.columns[i];
                    if (typeof col.customAttributes != 'undefined' && typeof col.customAttributes.id != 'undefined' && col.customAttributes.id == 'detailed')
                        gridObj.showHider.hide(col.headerText, 'headerText');
                    else if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
            else {
                for (var i = 0; i < gridObj.columns.length; i++) {
                    var col = gridObj.columns[i];
                    if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
        }
    }

    function array_move(arr, old_index, new_index) {
        while (old_index < 0) {
            old_index += arr.length;
        }
        while (new_index < 0) {
            new_index += arr.length;
        }
        if (new_index >= arr.length) {
            var k = new_index - arr.length + 1;
            while (k--) {
                arr.push(undefined);
            }
        }
        arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);
        return arr; // for testing purposes
    };

    function lrApprovalRouteActionBegin(args) {
        if (args.requestType == "save") {

        }
        else if (args.requestType == "delete") {
        }
    }
    function lrApprovalRouteCommandClick(args) {
        if (args.commandColumn.type == "MoveUp") {
            var grid = $('#LRApprovalRouteGrid')[0].ej2_instances[0];
            var rI = args.rowData.routeIndex - 1;
            if (rI < 1) return;
            array_move(grid.dataSource, rI, rI - 1);
            for (var i = 0; i < grid.dataSource.length; i++) {
                grid.dataSource[i].routeIndex = i + 1;
            }
            grid.refresh();
        }
        if (args.commandColumn.type == "MoveDown") {
            var grid = $('#LRApprovalRouteGrid')[0].ej2_instances[0];
            var rI = args.rowData.routeIndex - 1;
            if (rI == grid.dataSource.length) return;
            array_move(grid.dataSource, rI, rI + 1);
            for (var i = 0; i < grid.dataSource.length; i++) {
                grid.dataSource[i].routeIndex = i + 1;
            }
            grid.refresh();

        }
        if (args.commandColumn.type == "Edit") {

        }
        else if (args.commandColumn.type == "Copy") {
            this.copy(false);
        }
    }
    function lrApprovalRouteToolbarClick(args) {
        var gridObj = document.getElementById("LRApprovalRouteGrid").ej2_instances[0];
        if (args.item.id === 'LRApprovalRouteGrid_pdfexport') {
            gridObj.pdfExport();
        }
        if (args.item.id === 'LRApprovalRouteGrid_excelexport') {
            gridObj.excelExport();
        }
        if (args.item.id === 'LRApprovalRouteGrid_csvexport') {
            gridObj.csvExport();
        }
        if (this.getSelectedRecords().length > 0) {
            var withHeader = false;
            if (args.item.id === 'copyHeader') {
                withHeader = true;
            }
            this.copy(withHeader);
        }
        else {
            if (args.item.id === 'copyHeader') {
                var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                dialogObj.show();
            }
            else if (args.item.id === 'copy') {
                var dialogObj = document.getElementById('alert_dialog_1').ej2_instances[0];
                dialogObj.show();
            }
        }
        if (args.item.id === 'showActions') {
            gridObj.toolbar = [{ text: "Hide Actions", tooltipText: "Actions", prefixIcon: "e-custom-hide-actions", id: "hideActions" }, { text: "Toggle Grouping", tooltipText: "Grouping", prefixIcon: "e-custom-group-toggle", id: "toggleGrouping" }, { text: "Toggle Detailed", tooltipText: "Toggle Detailed", prefixIcon: "e-toggledetailed", id: "toggleDetailed" }, "ExcelExport", "CsvExport", "Print", "Search", "Delete", { text: "Copy", tooltipText: "Copy", prefixIcon: "e-copy", id: "copy" }, { text: "Copy With Header", tooltipText: "Copy With Header", prefixIcon: "e-copy", id: "copyHeader" }, "ColumnChooser"];
            gridObj.refresh();
        }
        if (args.item.id === 'hideActions') {
            gridObj.toolbar = [{ text: "Show Actions", tooltipText: "Actions", prefixIcon: "e-custom-show-actions", id: "showActions" }, "Search", "ColumnChooser"];
            gridObj.showColumnChooser = true;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleGrouping') {
            gridObj.allowGrouping = !gridObj.allowGrouping;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleDetailed') {
            var visCount = 0;
            for (var i = 0; i < gridObj.columns.length; i++) {
                if (gridObj.columns[i].visible) visCount++;
            }
            if (visCount == gridObj.columns.length) {
                for (var i = 0; i < gridObj.columns.length; i++) {
                    var col = gridObj.columns[i];
                    if (typeof col.customAttributes != 'undefined' && typeof col.customAttributes.id != 'undefined' && col.customAttributes.id == 'detailed')
                        gridObj.showHider.hide(col.headerText, 'headerText');
                    else if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
            else {
                for (var i = 0; i < gridObj.columns.length; i++) {
                    var col = gridObj.columns[i];
                    if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
        }
        if (args.requestType == "beginEdit") {
            var Obj = $("#LRApprovalRouteGrid")[0].ej2_instances[0];
            var ajax = new ej.base.Ajax('?handler=LRApprovalRouteData', 'GET');
            ajax.send();
            ajax.onSuccess = function (data) {
                var ds = JSON.parse(data);
                ds.push(args.rowData.valueTypeForDescription);
                Obj.columns[4].edit.params.dataSource = ds;
                //ddldist.dataBind();
            };

            Obj.columns[4].allowEditing = false;
        }
    }
    function lrApprovalRouteRowDataBound(args) {
        if (args.data.isDepartmentHead || args.data.isReportingTo) {
            $(".e-" + "DeleteButton", args.row).addClass("e-hide");
        }
        else {
            $(".e-" + "DeleteButton", args.row).removeClass("e-hide");

        }
    }

    function lrTaskActionBegin(args) {
        if (args.requestType == "save") {

        }
        else if (args.requestType == "delete") {
        }
    }
    function lrTaskCommandClick(args) {
        if (args.commandColumn.type == "MoveUp") {
            var grid = $('#LRTasksGrid')[0].ej2_instances[0];
            var rI = args.rowData.routeIndex - 1;
            if (rI < 1) return;
            array_move(grid.dataSource, rI, rI - 1);
            for (var i = 0; i < grid.dataSource.length; i++) {
                grid.dataSource[i].routeIndex = i + 1;
            }
            grid.refresh();
        }
        if (args.commandColumn.type == "MoveDown") {
            var grid = $('#LRTasksGrid')[0].ej2_instances[0];
            var rI = args.rowData.routeIndex - 1;
            if (rI == grid.dataSource.length) return;
            array_move(grid.dataSource, rI, rI + 1);
            for (var i = 0; i < grid.dataSource.length; i++) {
                grid.dataSource[i].routeIndex = i + 1;
            }
            grid.refresh();

        }
        if (args.commandColumn.type == "Edit") {

        }
        else if (args.commandColumn.type == "Copy") {
            this.copy(false);
        }
    }
    function lrTaskToolbarClick(args) {
        var gridObj = document.getElementById("LRTasksGrid").ej2_instances[0];
        if (args.item.id === 'LRTasksGrid_pdfexport') {
            gridObj.pdfExport();
        }
        if (args.item.id === 'LRTasksGrid_excelexport') {
            gridObj.excelExport();
        }
        if (args.item.id === 'LRTasksGrid_csvexport') {
            gridObj.csvExport();
        }
        if (this.getSelectedRecords().length > 0) {
            var withHeader = false;
            if (args.item.id === 'copyHeader') {
                withHeader = true;
            }
            this.copy(withHeader);
        }
        else {
            if (args.item.id === 'copyHeader') {
                var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                dialogObj.show();
            }
            else if (args.item.id === 'copy') {
                var dialogObj = document.getElementById('alert_dialog_1').ej2_instances[0];
                dialogObj.show();
            }
        }
        if (args.item.id === 'showActions') {
            gridObj.toolbar = [{ text: "Hide Actions", tooltipText: "Actions", prefixIcon: "e-custom-hide-actions", id: "hideActions" }, { text: "Toggle Grouping", tooltipText: "Grouping", prefixIcon: "e-custom-group-toggle", id: "toggleGrouping" }, { text: "Toggle Detailed", tooltipText: "Toggle Detailed", prefixIcon: "e-toggledetailed", id: "toggleDetailed" }, "ExcelExport", "CsvExport", "Print", "Search", "Delete", { text: "Copy", tooltipText: "Copy", prefixIcon: "e-copy", id: "copy" }, { text: "Copy With Header", tooltipText: "Copy With Header", prefixIcon: "e-copy", id: "copyHeader" }, "ColumnChooser"];
            gridObj.refresh();
        }
        if (args.item.id === 'hideActions') {
            gridObj.toolbar = [{ text: "Show Actions", tooltipText: "Actions", prefixIcon: "e-custom-show-actions", id: "showActions" }, "Search", "ColumnChooser"];
            gridObj.showColumnChooser = true;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleGrouping') {
            gridObj.allowGrouping = !gridObj.allowGrouping;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleDetailed') {
            var visCount = 0;
            for (var i = 0; i < gridObj.columns.length; i++) {
                if (gridObj.columns[i].visible) visCount++;
            }
            if (visCount == gridObj.columns.length) {
                for (var i = 0; i < gridObj.columns.length; i++) {
                    var col = gridObj.columns[i];
                    if (typeof col.customAttributes != 'undefined' && typeof col.customAttributes.id != 'undefined' && col.customAttributes.id == 'detailed')
                        gridObj.showHider.hide(col.headerText, 'headerText');
                    else if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
            else {
                for (var i = 0; i < gridObj.columns.length; i++) {
                    var col = gridObj.columns[i];
                    if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
        }
    }
    function lrTaskRowDataBound(args) {
        //if (args.data.isDepartmentHead || args.data.isReportingTo) {
        //    $(".e-" + "DeleteButton", args.row).addClass("e-hide");
        //}
        //else {
        //    $(".e-" + "DeleteButton", args.row).removeClass("e-hide");

        //}
    }

    function alertBtnClick() {
        var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
        var dialogObj1 = document.getElementById('alert_dialog_1').ej2_instances[0];
        dialogObj.hide();
        dialogObj1.hide();
    }

    var curLRPositions = [];
    function SelectDepartmentPositions() {
        var departmentIds = $("#lrDepartmentId").val();
        $("#lrPositionId").empty();
        if (departmentIds.length == 0) return;
        $.ajax({
            type: "GET",
            url: '?handler=DepartmentsPositions',
            data: { departmentIds: JSON.stringify(departmentIds) },
            success: function (data) {
                var dataMS = [];
                $.each(departmentIds, function (i, departmentId) {
                    var positions = [];
                    $.each(data, function (j, position) {
                        if (position.departmentId == departmentId)
                            positions.push({ label: position.title, value: position.id });
                    });
                    dataMS.push({
                        label: $(`#lrDepartmentId option[value='${departmentId}']`).text(), children: positions
                    });
                });
                curLRPositions = dataMS;
                $("#lrPositionId").multiselect('dataprovider', dataMS);
                if (isEditingLR && !isEditingLRLoaded) {
                    var posits = [];
                    for (var i = 0; i < curLREditRow.positions.length; i++) {
                        posits.push(curLREditRow.positions[i].positionId);
                    }
                    $("#lrPositionId").multiselect('select', posits);

                    isEditingLRLoaded = true;
                }

            }
        });
    }

    var curAPPositions = [];
    function SelectAPDepartmentPositions() {
        var departmentIds = $("#apDepartmentId").val();
        $("#apPositionId").empty();
        $("#apEmployeeId").empty();
        if (departmentIds.length == 0) return;
        $.ajax({
            type: "GET",
            url: '?handler=DepartmentsPositions',
            data: { departmentIds: JSON.stringify(departmentIds) },
            success: function (data) {
                var dataMS = [];
                $.each(departmentIds, function (i, departmentId) {
                    var positions = [];
                    $.each(data, function (j, position) {
                        if (position.departmentId == departmentId)
                            positions.push({ label: position.title, value: position.id });
                    });
                    dataMS.push({
                        label: $(`#lrDepartmentId option[value='${departmentId}']`).text(), children: positions
                    });
                });
                curAPPositions = data;
                $("#apPositionId").multiselect('dataprovider', dataMS);
            }
        });
    }

    function SelectAPPositionEmployees() {
        var positionIds = $("#apPositionId").val();
        var positions = curAPPositions;
        //var departmentIds = $("#apDepartmentId").val();
        $("#apEmployeeId").empty();
        if (positionIds.length == 0) return;

        $.ajax({
            type: "GET",
            url: '?handler=Employees',
            data: { positionIds: JSON.stringify(positionIds) },
            success: function (data) {
                var positionEmployees = [];

                $.each(positionIds, function (i, positionId) {
                    var position = positions.find(function (x) { return x.id == positionId });
                    var employees = [];
                    $.each(data, function (j, employee) {
                        if (employee.posId == positionId)
                            employees.push({ id: employee.id, value: employee.id, name: employee.name, label: employee.name, departmentId: employee.depId, depName: employee.depName, positionId: employee.posId, posName: employee.posTitle });
                    });
                    positionEmployees.push({ label: position.title, children: employees })
                });
                $("#apEmployeeId").multiselect('dataprovider', positionEmployees);
            }
        });
    }

    function SelectTaskDepartmentPositions() {
        var departmentId = $("#taskDepartmentId").val();
        $("#taskPositionId").empty();
        $("#taskEmployeeId").empty();
        if (departmentId == '') return;

        $.getJSON(`?handler=Positions&departmentId=${departmentId}`, (data) => {
            $.each(data, function (i, item) {
                $("#taskPositionId").append(`<option value="${item.id}">${item.title}</option>`);
            });
        });
    }
    function SelectTaskPositionEmployees() {
        var positions = $("#taskPositionId").multiselect('dataprovider');
        var departmentIds = $("taskDepartmentId").val();
        $("#taskEmployeeId").empty();
        if (departmentIds.length == 0) return;

        $.ajax({
            type: "GET",
            url: '?handler=Employees',
            data: { positionIds: JSON.stringify(positionIds) },
            success: function (data) {
                var dataMS = [];
                $.each(departmentIds, function (i, departmentId) {
                    var positionEmployees = [];

                    $.each(positions, function (i, position) {
                        var employees = [];
                        $.each(data, function (j, employee) {
                            if (employee.positionId == position.id)
                                employees.push({ id: item.id, name: item.name, label: item.name, departmentId: item.departmentId, depName: item.depName, positionId: item.positionId, posName: item.posName });
                        });
                        positionEmployees.push({ label: position.title, children: employees })
                    });
                    dataMS.push({
                        label: $(`#taskDepartmentId option[value='${departmentId}']`).text(), children: positionEmployees
                    });
                    $("#taskEmployeeId").multiselect('dataprovider', dataMS);
                });

            }
        });
    }

</script>
