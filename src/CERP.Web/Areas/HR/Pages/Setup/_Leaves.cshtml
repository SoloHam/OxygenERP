@using CERP.Setup.DTOs;
@using Syncfusion.EJ2.Grids;
@using CERP;
@{
    var initialToolBar = new List<object>() { new { text = "Show Actions", tooltipText = "Actions", prefixIcon = "e-custom-show-actions", id = "showActions" }, "Search", "ColumnChooser" };
    var fullToolBar = new List<object>() { new { text = "Hide Actions", tooltipText = "Actions", prefixIcon = "e-custom-hide-actions", id = "hideActions" }, new { text = "Toggle Grouping", tooltipText = "Grouping", prefixIcon = "zmdi-chevron-up", id = "toggleGrouping" }, new { text = "Toggle Detailed", tooltipText = "Toggle Detailed", prefixIcon = "e-toggledetailed", id = "toggleDetailed" }, "ExcelExport", "CsvExport", "Print", "Search", "Delete", new { text = "Copy", tooltipText = "Copy", prefixIcon = "e-copy", id = "copy" }, new { text = "Copy With Header", tooltipText = "Copy With Header", prefixIcon = "e-copy", id = "copyHeader" }, "ColumnChooser" };

    List<object> leaveRequestsCommands = new List<object>();
    leaveRequestsCommands.Add(new { type = "Edit", buttonOption = new { iconCss = "e-icons e-edit", cssClass = "e-flat" } });
    leaveRequestsCommands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "e-flat" } });
    leaveRequestsCommands.Add(new
    {
        type = "Cancel",
        buttonOption = new { iconCss = "e-icons e-cancel-icon", cssClass = "e-flat" }
    });

    List<GridColumn> leaveRequestsGridColumns = new List<GridColumn>()
{
        new GridColumn { Field = "id", Width = "80", HeaderText = "", Visible=false, ShowInColumnChooser=false, TextAlign=TextAlign.Center, MinWidth="10", IsPrimaryKey=true  },
        new GridColumn { Field = "title", Width = "110", HeaderText = "Title", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "titleLocalized", Width = "110", HeaderText = "Title (In Arabic)", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "prefix", Width = "110", HeaderText = "Prefix", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "startingNo", Width = "110", HeaderText = "Starting No", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "leaveType.value", Width = "110", HeaderText = "Leave Type", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "entitlementDays", Width = "110", HeaderText = "Employment Days", TextAlign=TextAlign.Center,  MinWidth="10"  },
        //new GridColumn { Field = "getAllDepartments", Width = "110", HeaderText = "Department", TextAlign=TextAlign.Center,  MinWidth="10"  },
        //new GridColumn { Field = "getAllPositions", Width = "110", HeaderText = "Position", TextAlign=TextAlign.Center,  MinWidth="10"  },
        //new GridColumn { Field = "getAllEmploymentTypes", Width = "110", HeaderText = "Employment Type", TextAlign=TextAlign.Center,  MinWidth="10"  },
        //new GridColumn { Field = "getAllEmployeeStatuses", Width = "110", HeaderText = "Employment Status", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "", DisplayAsCheckBox=true, HeaderText = "Additional Requests", TextAlign=TextAlign.Center,  MinWidth="10", Columns = new List<GridColumn>(){
                new GridColumn { Field = "hasAdvanceSalaryRequest", Width = "110", DisplayAsCheckBox=true, HeaderText = "Advance Salary", TextAlign=TextAlign.Center,  MinWidth="10"  },
                new GridColumn { Field = "hasExitReentryRequest", Width = "110", DisplayAsCheckBox=true, HeaderText = "Exit-Reentry", TextAlign=TextAlign.Center,  MinWidth="10"  },
                new GridColumn { Field = "hasAirTicketRequest", Width = "110", DisplayAsCheckBox=true, HeaderText = "Air Ticket", TextAlign=TextAlign.Center,  MinWidth="10"  },
            }
        },
        new GridColumn { Field = "", DisplayAsCheckBox=true, HeaderText = "Additional Requirements", TextAlign=TextAlign.Center,  MinWidth="10", Columns = new List<GridColumn>(){
                new GridColumn { Field = "hasNotesRequirement", Width = "110", DisplayAsCheckBox=true, HeaderText = "Notes", TextAlign=TextAlign.Center,  MinWidth="10"  },
                new GridColumn { Field = "hasAttachmentRequirement", Width = "110", DisplayAsCheckBox=true, HeaderText = "Attachment", TextAlign=TextAlign.Center,  MinWidth="10"  },
            }
        },
        new GridColumn { Width = "150", HeaderText = "Actions", TextAlign=TextAlign.Center, MinWidth="10", Commands = leaveRequestsCommands }
    };

}
<script>
    isEditingLR = false;
    isEditingLRLoaded = false;
    var curLREditRow;

    $(document).ready(function () {
        //createSpinner({
        //    target: document.getElementById('leaveRequestForm')
        //});

        $('#lrDepartmentIds').multiselect({
            buttonWidth: '100%',
            includeSelectAllOption: true,
            enableFiltering: false,
            enableClickableOptGroups: true,
            includeResetOption: true,
            includeResetDivider: true,
            enableCollapsibleOptGroups: true,
            onDeselectAll: function (e) {
                $('#lrPositionIds').empty();
            },
            onSelectAll: SelectDepartmentPositions("lrDepartmentIds", "lrPositionIds", curLRDepartments, curLRPositions)
        });
        $('#lrPositionIds').multiselect(options);
        $('#lrLeaveTypeId').multiselect(options);
        $('#lrEmploymentTypeIds').multiselect(options);
        $('#lrEmployeeStatusIds').multiselect(options);
        $('#lrHolidaysDeductionIds').multiselect(options);
        $('#hTypeId').multiselect(options);
        $('#hReligiousDenominationId').multiselect(options);

        //var lrGrid = $("#AllLeaveRequestsGrid")[0].ej2_instances[0];
        //lrGrid.showSpinner();

        //cERP.appServices.hR.leaveRequestService.leaveRequestTemplates.getAll(false).done(function (data) {
        //    lrGrid.hideSpinner();
        //    lrGrid.dataSource = data;
        //    lrGrid.refresh();
        //});
        //cERP.appServices.setup.lookup.dictionaryValue.getAllByValueType(ValueTypeModules.LeaveType).done(function (data) {
        //    var leaveTypes = [];
        //    $.each(data, function (i, d) {
        //        leaveTypes.push({ label: d.value, value: d.id });
        //    });
        //    $("#lrLeaveTypeId").multiselect('dataprovider', leaveTypes);
        //});
        //cERP.appServices.setup.lookup.dictionaryValue.getAllByValueType(ValueTypeModules.EmployeeType).done(function (data) {
        //    var employmentTypes = [];
        //    $.each(data, function (i, d) {
        //        employmentTypes.push({ label: d.value, value: d.id });
        //    });
        //    $("#lrEmploymentTypeIds").multiselect('dataprovider', employmentTypes);
        //});
        //cERP.appServices.setup.lookup.dictionaryValue.getAllByValueType(ValueTypeModules.EmployeeStatus).done(function (data) {
        //    var employmeeStatuses = [];
        //    $.each(data, function (i, d) {
        //        employmeeStatuses.push({ label: d.value, value: d.id });
        //    });
        //    $("#lrEmployeeStatusIds").multiselect('dataprovider', employmeeStatuses);
        //});
        //cERP.appServices.hR.holidayService.holidays.getAll().done(function (data) {
        //    var holidays = [];
        //    $.each(data, function (i, d) {
        //        holidays.push({ label: d.title, value: d.id });
        //    });
        //    $("#lrHolidaysDeductionIds").multiselect('dataprovider', holidays);
        //});

        $('#addLeaveRequestBtn').on('click', function () {
            $('#submitLeaveRequestBtn').val('Add Leave Request');

            $('#lrTitle').val('');
            $('#lrTitleLocalized').val('');
            $('#lrPrefix').val('');
            $('#lrStartingNo').val('');
            $('#lrEntitlementDays').val('');

            //$('#lrLeaveTypeId').multiselect('deselectAll', false);
            //$('#lrLeaveTypeId').multiselect('updateButtonText');

            $('#lrDepartmentId').multiselect('deselectAll', false);
            $('#lrDepartmentId').multiselect('updateButtonText');
            $('#lrPositionIds').multiselect('deselectAll', false);
            $('#lrPositionIds').multiselect('updateButtonText');
            $('#lrEmploymentTypeIds').multiselect('deselectAll', false);
            $('#lrEmploymentTypeIds').multiselect('updateButtonText');
            $('#lrEmployeeStatusIds').multiselect('deselectAll', false);
            $('#lrEmployeeStatusIds').multiselect('updateButtonText');

            $('#lrHolidaysDeductionIds').multiselect('deselectAll', false);
            $('#lrHolidaysDeductionIds').multiselect('updateButtonText');

            cERP.appServices.hR.holidayService.holidays.getAll().done(function (data) {
                var holidays = [];
                $.each(data, function (i, d) {
                    holidays.push({ label: d.title, value: d.id });
                });
                $("#lrHolidaysDeductionIds").multiselect('dataprovider', holidays);
            });

            var apGrid = $("#LeaveRequest_ApprovalRouteGrid")[0].ej2_instances[0];
            apGrid.dataSource = [];
            apGrid.childGrid.dataSource = [];
            apGrid.dataSource.push({ id: 0, active: true, notifyEmployee: false, isPoster: false, isDepartmentHead: true, getAllDepartmentNames: "Selected", getAllPositionTitles: "Head", getAllEmployeeNames: "Auto", employees: [{ id: "@Guid.Empty", name: "Auto", position: { id: "@Guid.Empty", title: "Head" }, department: { id: "@Guid.Empty", name: "Selected" } }] })
            apGrid.dataSource.push({ id: 1, active: true, notifyEmployee: false, isPoster: false, isReportingTo: true, getAllDepartmentNames: "Selected", getAllPositionTitles: "Auto", getAllEmployeeNames: "Auto", employees: [{ id: "@Guid.Empty", name: "Auto [Reporting To]", position: { id: "@Guid.Empty", title: "Head" }, department: { id: "@Guid.Empty", name: "Selected" } }] })
            apGrid.refresh();

            var tasksGrid = $("#LeaveRequest_TasksGrid")[0].ej2_instances[0];
            tasksGrid.dataSource = [];
        });

        $('#leaveRequestForm').on('submit', function (e) {
            e.preventDefault();
            if (ValidateForm())
            {
                Swal.showLoading();

                let form = [];
                let lrDetails = $('#leaveRequestForm').find("textarea, input").serializeArray();
                form = form.concat(lrDetails);
                var params = objectifyForm(form);

                params.isEditing = isEditingLR;
                params.LRLeaveTypeId = $("#lrLeaveTypeId").val();
                params.LRDepartmentIds = $("#lrDepartmentIds").val();
                params.LRPositionsIds = $("#lrPositionIds").val();
                params.LREmploymentTypeIds = $("#lrEmploymentTypeIds").val();
                params.LREmployeeStatusIds = $("#lrEmployeeStatusIds").val();
                params.LRDeductionHolidaysIds = $("#lrHolidaysDeductionIds").val();

                params.ApprovalRoute = $("#LeaveRequest_ApprovalRouteGrid")[0].ej2_instances[0].dataSource;

                params.LRAdvanceSalaryAD = $("#LRAdvanceSalaryAD").parent().hasClass('active');
                params.LRExitReentryAD = $("#LRExitReentryAD").parent().hasClass('active');
                params.LRAirTicketAD = $("#LRAirTicketAD").parent().hasClass('active');

                params.LRNotesAR = $("#LRNotesRequired").parent().hasClass('active');
                params.LRAttachmentAR = $("#LRAttachmentRequired").parent().hasClass('active');
                params.LRAdvanceSalaryAR = $("#LRAdvanceSalaryRequired").parent().hasClass('active');
                params.LRAirTicketAR = $("#LRAirTicketRequired").parent().hasClass('active');
                params.LRExitReentryAR = $("#LRExitReentryRequired").parent().hasClass('active');

                if (isEditingLR) {
                    params.Id = curLREditRow.id;

                    //cERP.appServices.hR.leaveRequestTemplates.update()
                }
                else {

                    //cERP.appServices.hR.leaveRequestTemplates.update()
                }
                let formData = new FormData();
                formData.append("info", JSON.stringify(params));
                var xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
                formData.append("__RequestVerificationToken", xhrToken);

                $.ajax({
                    url: "?handler=LeaveRequestTemplate",
                    async: true,
                    type: "POST",
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: function (data) {
                        var grid = $("#AllLeaveRequestsGrid")[0].ej2_instances[0];

                        Swal.hideLoading();
                        if (isEditingLR) {
                            grid.refresh(); // refresh the Grid.

                            swal.fire("Success", "Leave request has successfully been updated", "success");

                            for (var i = 0; i < grid.dataSource.length; i++) {
                                if (grid.dataSource[i].id == data.id) {
                                    grid.dataSource[i] = data;
                                }
                            }
                            grid.refresh();
                        }
                        else {
                            grid.dataSource.push(data);
                            grid.refresh(); // refresh the Grid.

                            swal.fire("Success", "Leave request has successfully been added", "success");
                        }
                    },
                    error: function (err) {
                        Swal.hideLoading();
                        if (isEditingLR)
                            swal.fire("Failed", "Leave request couldn't be updated, please fix all errors and try again.", "error");
                        else
                            swal.fire("Failed", "Leave request couldn't be added, please fix all errors and try again.", "error");

                        console.log(err);
                    }
                });
            }
            else
            {
                Swal.close();
                Swal.hideLoading();
            }
        });

        function ValidateForm()
        {
            var elmForm = $("#leaveRequestForm");
            // stepDirection === 'forward' :- this condition allows to do the form validation
            // only on forward navigation, that makes easy navigation on backwards still do the validation when going next
            var valid = false;
            elmForm.validator('validate');
            if (elmForm)
            {
                var elmErr = elmForm.find('.has-error');
                if (elmErr)
                {
                    if (elmErr.length > 0)
                    {
                        // Form validation failed
                        valid = false;
                    }
                    else
                    {
                        valid = true;
                    }
                }
            }
            return valid;
        }
    });
</script>

<style>
    .e-c-moveup:before {
        content: '\e307'
    }

    .e-c-movedown:before {
        content: '\e305'
    }
</style>

<div class="m-l-20 m-t-0">
    <h2>Leave Requests</h2>
    <p>
        Types of leave requests made by employees
    </p>
</div>
<hr />
<div class="panel-body p-t-0" style="padding-bottom:0;">
    <div class="col-lg-12 padding-right-0">
        <div class="areaHeader" style="display:flex;">
            <div id="lrLoader" class="pull-left loader-inline" style="display:none"></div>        
            <div class="areaHeaderTitle">
                <span id="areHeadertitle" class="areaHeaderTitleNode menu-text">Current Leave Requests</span>
                @*<span id="" class="areaHeaderTitleInNode menu-text"> > </span>*@
                @*<span id="subTitle" class="menu-text" style="padding-left:15px; font-size: 28px; font-family:Roboto; font-weight:200;">@ViewData["SubTitle"]</span>*@
            </div>     
            @*<h3 class="control-label" style="flex-grow: 1; margin:0">Approval Route</h3>*@
            <div class="pull-right text-right p-r-20 areaHeaderBtnSec">
                @*<div class="clearfix margin-15"></div>*@
                <a id="addLeaveRequestBtn" onclick="areaHeaderBtnClick(event); isEditingLR = false;" class="btn btn-outline-dark areaHeaderBtn"><i class="fa fa-plus fa-fw"></i> Add New</a>
            </div>
        </div>
        <form id="leaveRequestForm" class="row areaForm" method="post" data-toggle="validator" style="display: none; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
            <div class="row">
                <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                    <div class="col-sm-6" style="padding:0">
                        <div class="form-group">
                            <label class="control-label m-b-5 ">LR Title:</label>
                            <input type="text" id="lrTitle" name="LRTitle" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control " required>
                        </div>
                    </div>
                    <div class="col-sm-6" style="padding:0">
                        <div class="form-group">
                            <label class="control-label m-b-5 ">LR Title (In Arabic):</label>
                            <input type="text" id="lrTitleLocalized" name="LRTitleLocalized" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                        </div>
                    </div>
                </div>
                <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                    <div class="col-sm-6" style="padding:0">
                        <div class="form-group">
                            <label class="margin-bottom-5 control-label">LR Prefix:</label>
                            <input type="text" id="lrPrefix" name="LRPrefix" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" required>
                        </div>
                    </div>
                    <div class="col-sm-6" style="padding:0">
                        <div class="form-group">
                            <label class="margin-bottom-5 control-label">LR Starting No:</label>
                            <input type="number" min="0" id="lrStartingNo" name="LRStartingNo" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" required>
                        </div>
                    </div>
                </div>
                <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                    <div class="form-group">
                        <label class="margin-bottom-5 control-label">Leave Type:</label>
                        <select id="lrLeaveTypeId" name="LRLeaveTypeId" class="form-control" required>
                        </select>
                    </div>
                </div>
                <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                    <div class="form-group">
                        <label class="margin-bottom-5 control-label">Entitlement Days:</label>
                        <input type="number" min="1" id="lrEntitlementDays" name="LREntitlementDays" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" required>
                    </div>
                </div>
            </div>
            <div class="row">

                <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                    <div class="form-group">
                        <label class="control-label m-b-5 ">Department:</label>
                        <select id="lrDepartmentIds" name="LRDepartmentIds" multiple="multiple" class="form-control" onchange="SelectDepartmentPositions('lrDepartmentIds', 'lrPositionIds', curLRDepartments, curLRPositions);" required>
                        </select>
                    </div>
                </div>
                <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                    <div class="form-group">
                        <label class="control-label m-b-5 ">Position:</label>
                        <select id="lrPositionIds" name="LRPositionIds" multiple="multiple" class="form-control" required>
                        </select>
                    </div>
                </div>
                <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                    <div class="form-group">
                        <label class="margin-bottom-5 control-label">Employment Type:</label>
                        <select id="lrEmploymentTypeIds" name="EmployementTypeIds" multiple="multiple" class="form-control" required>
                        </select>
                        @*<ejs-dropdownlist id="vegetables" placeholder="Select an employment type" popupHeight="200px" dataSource="@employementTypes">
                        <e-dropdownlist-fields text="Value" value="Id"></e-dropdownlist-fields>
                    </ejs-dropdownlist>*@
                    </div>
                </div>
                <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                    <div class="form-group">
                        <label class="margin-bottom-5 control-label">Employmee Status:</label>
                        <select id="lrEmployeeStatusIds" name="EmployementStatusIds" multiple="multiple" class="form-control" required>
                        </select>
                    </div>
                </div>
            </div>
            <hr />
            <div class="row">
                <div class="form-group">
                    <div class="col-sm-3">
                        <label class="control-label m-b-5 ">Holidays for deduction:</label>
                    </div>
                    <div class="col-sm-9">
                        <select id="lrHolidaysDeductionIds" name="LRHolidaysDeductionIds" multiple="multiple" class="form-control">
                        </select>
                    </div>
                </div>
            </div>
            <div class="row m-md-t-5">
                <div class="form-group">
                    <div class="col-sm-3">
                        <label class="control-label m-b-5 ">Additional Requests:</label>
                    </div>
                    <div class="col-sm-9">
                        <div class="btn-group" data-toggle="buttons">
                            <label class="btn btn-default">
                                <input type="checkbox" id="LRAdvanceSalaryAD" onchange="if ($('#LRAdvanceSalaryAD').parent().hasClass('active')) { $('#LRAdvanceSalaryRequired').parent().show(); } else { $('#LRAdvanceSalaryRequired').parent().hide(); }" autocomplete="off"> Advance Salary
                            </label>
                            <label class="btn btn-default">
                                <input type="checkbox" id="LRExitReentryAD" onchange="if ($('#LRExitReentryAD').parent().hasClass('active')) { $('#LRExitReentryRequired').parent().show(); } else { $('#LRExitReentryRequired').parent().hide(); }" autocomplete="off"> Exit Re-Entry
                            </label>
                            <label class="btn btn-default">
                                <input type="checkbox" id="LRAirTicketAD" onchange="if ($('#LRAirTicketAD').parent().hasClass('active')) { $('#LRAirTicketRequired').parent().show(); } else { $('#LRAirTicketRequired').parent().hide(); }" autocomplete="off"> Air Ticket
                            </label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row m-md-t-5">
                <div class="form-group">
                    <div class="col-sm-3">
                        <label class="control-label m-b-5 ">Additional Requirements:</label>
                    </div>
                    <div class="col-sm-9">
                        <div class="btn-group" data-toggle="buttons">
                            <label class="btn btn-default">
                                <input type="checkbox" id="LRNotesRequired" autocomplete="off"> Notes
                            </label>
                            <label class="btn btn-default">
                                <input type="checkbox" id="LRAttachmentRequired" autocomplete="off"> Attachment
                            </label>
                            <label class="btn btn-default" style="display: none;">
                                <input type="checkbox" id="LRAdvanceSalaryRequired" autocomplete="off"> Advance Salary
                            </label>
                            <label class="btn btn-default" style="display: none;">
                                <input type="checkbox" id="LRExitReentryRequired" autocomplete="off"> Exit Re-Entry
                            </label>
                            <label class="btn btn-default" style="display: none;">
                                <input type="checkbox" id="LRAirTicketRequired" autocomplete="off"> Air Ticket
                            </label>
                        </div>
                    </div>
                </div>
            </div>
            <hr />
            <vc:work-flow id="LeaveRequest" workflow-module="@CERP.App.WorkflowModule.LeaveRequest" parent-title="Current Leave Requests"></vc:work-flow>
            <hr />
            <div class="row m-t-20">
                <div class="col-lg-12">
                    <input id="submitLeaveRequestBtn" type="submit" class="btn btn-success btn-block" value="Add Leave Request" required />
                </div>
            </div>
        </form>
        <div id="leaveRequestsCS" class="control-section">
            <ejs-grid id="AllLeaveRequestsGrid" enableAutoFill="true" columns="@leaveRequestsGridColumns"
                        dataBound="dataBoundResponsive" commandClick="leaveRequestsCommandClick" actionBegin="leaveRequestsActionBegin"
                        allowExcelExport="true" height="100%" allowPdfExport="true"
                        hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true"
                        allowSorting="true" allowMultiSorting="true" gridLines="Both"
                        toolbarClick="leaveRequestsToolbarClick" showColumnChooser="true" toolbar="@initialToolBar"
                        allowPaging="true" allowResizing="true">

                @*<e-data-manager url="/api/app/leaveRequestTemplates/getAllAsync" adaptor="WebApiAdaptor" ></e-data-manager>*@

                <e-grid-filterSettings type="CheckBox">
                </e-grid-filterSettings>
                <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="false"></e-grid-editSettings>
                <e-grid-selectionsettings type="Multiple">
                </e-grid-selectionsettings>
                <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
            </ejs-grid>
        </div>
    </div>
</div>
<script>

    function leaveRequestsActionBegin(args) {
        if (args.requestType == "save") {

        }
        else if (args.requestType == "delete") {
            Swal.showLoading();

            console.log(args.data);
            let formData = new FormData();
            formData.append("leaveRequests", JSON.stringify(args.data));
            var xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
            formData.append("__RequestVerificationToken", xhrToken);

            $.ajax({
                url: '?handler=LeaveRequest',
                async: true,
                type: "DELETE",
                data: formData,
                contentType: false,
                processData: false,
                success: function (data) {
                    swal.fire("Success", "Leave request(s) successfully deleted", "success");

                    if ($('#leaveRequestForm').css('display') !== 'none') {
                        $('#addLeaveRequestBtnSection').slideUp(200);
                        $('#leaveRequestForm').slideUp(200);
                        setTimeout(function () { $('#addLeaveRequestBtn', '#addLeaveRequestBtnSection').html('<i class="fa fa-plus p-r-5"></i> Add Leave Request') }, 200)
                        $('#addLeaveRequestBtnSection').slideDown(200);
                    }
                },
                error: function (err) {
                    swal.fire("Failed", "Leave request(s) couldn't be deleted, please fix all errors and try again.", "error");

                    console.log(err);
                }
            });
        }
    }
    function leaveRequestsCommandClick(args) {
        if (args.commandColumn.type == "Edit") {
            curLREditRow = args.rowData;
            isEditingLR = true;
            isEditingLRLoaded = false;
            var isCollapsed = $('#leaveRequestForm').css('display') == 'none';

            $('#lrLoader').show();

            var timeout = 0;
            if (!isCollapsed) {
                $('#addLeaveRequestBtnSection').slideUp(200);
                $('#leaveRequestForm').slideUp(200);

                timeout = 200;
            }
            setTimeout(function () {
                $('#addLeaveRequestBtnSection').slideUp(200);
                $('#leaveRequestForm').slideDown(200);
                $('#addLeaveRequestBtnSection').slideDown(200);

                setTimeout(function () {
                    $('#addLeaveRequestBtn', '#addLeaveRequestBtnSection').html('<i class="fa fa-arrow-up p-r-5"></i> Cancel Update');
                    $('#submitLeaveRequestBtn').val('Update Leave Request');

                    console.log(curLREditRow);
                    $('#lrTitle').val(curLREditRow.title);
                    $('#lrTitleLocalized').val(curLREditRow.titleLocalized);
                    $('#lrPrefix').val(curLREditRow.prefix);
                    $('#lrStartingNo').val(curLREditRow.startingNo);

                    var apGrid = $("#LRApprovalRouteGrid")[0].ej2_instances[0];
                    apGrid.showSpinner();
                    apGrid.dataSource = null;
                    cERP.appServices.hR.leaveRequestService.leaveRequestTemplates.getCustom(curLREditRow.id).done(function (data) {
                        curLREditRow = data;
                        console.log(curLREditRow);

                        $('#lrEntitlementDays').val(curLREditRow.entitlementDays);
                        $("#lrLeaveTypeId").multiselect('select', curLREditRow.leaveTypeId);
                        $('#lrLeaveTypeId').multiselect('refresh');

                        $('#lrDepartmentId').multiselect('deselectAll', false);
                        $('#lrPositionIds').multiselect('deselectAll', false);
                        $('#lrEmploymentTypeIds').multiselect('deselectAll', false);
                        $('#lrEmployeeStatusIds').multiselect('deselectAll', false);
                        $('#lrHolidaysDeductionIds').multiselect('deselectAll', false);

                        var departs = [];
                        for (var i = 0; i < curLREditRow.departments.length; i++) {
                            departs.push(curLREditRow.departments[i].departmentId);
                        }
                        $('#lrDepartmentId').multiselect('select', departs);
                        $('#lrDepartmentId').change();
                        var empTypes = [];
                        for (var i = 0; i < curLREditRow.employmentTypes.length; i++) {
                            empTypes.push(curLREditRow.employmentTypes[i].employmentTypeId);
                        }
                        $('#lrEmploymentTypeIds').multiselect('select', empTypes);
                        var empStatuses = [];
                        for (var i = 0; i < curLREditRow.employeeStatuses.length; i++) {
                            empStatuses.push(curLREditRow.employeeStatuses[i].employeeStatusId);
                        }
                        $('#lrEmployeeStatusIds').multiselect('select', empStatuses);
                        var holidays = [];
                        for (var i = 0; i < curLREditRow.holidays.length; i++) {
                            holidays.push(curLREditRow.holidays[i].holidayId);
                        }
                        $('#lrHolidaysDeductionIds').multiselect('select', holidays);

                        //cERP.appServices.app.approvalRouteService.approvalRouteTemplates.getFull(curLREditRow.approvalRouteTemplateId).done(function (data) {
                        var data = curLREditRow.approvalRouteTemplate;
                        apGrid.hideSpinner();
                        apGrid.dataSource = data.approvalRouteTemplateItems;
                        console.log(data);
                        var allTaskTemplateItems = [];
                        for (var i = 0; i < data.approvalRouteTemplateItems.length; i++) {
                            var approvalRouteTempItem = data.approvalRouteTemplateItems[i];
                            approvalRouteTempItem.apId = i;
                            if (approvalRouteTempItem.taskTemplate != null) {
                                for (var j = 0; j < approvalRouteTempItem.taskTemplate.taskTemplateItems.length; j++) {
                                    var taskTemplateItem = approvalRouteTempItem.taskTemplate.taskTemplateItems[j];
                                    taskTemplateItem.apId = i;
                                    allTaskTemplateItems.push(taskTemplateItem);
                                }
                            }
                        }
                        apGrid.childGrid.dataSource = allTaskTemplateItems;
                        apGrid.refresh();
                        //});
                        //for (var i = 0; i < approvalItems.length; i++) {
                        //    if (!approvalItems[i].isDepartmentHead && !approvalItems[i].isReportingTo) {
                        //        cERP.appServices.setup.departmentSetup.department.get(approvalItems[i].departmentId).done(function (data) {
                        //            approvalItems[i].department = data;
                        //        })
                        //        cERP.appServices.setup.positionSetup.position.get(approvalItems[i].positionId).done(function (data) {
                        //            approvalItems[i].position = data;
                        //        })
                        //        cERP.appServices.hR.employeeService.employee.get(approvalItems[i].employeeId).done(function (data) {
                        //            approvalItems[i].employee = data;
                        //        })
                        //    }
                        //}

                        if (curLREditRow.hasAdvanceSalaryRequest)
                            $('#LRAdvanceSalaryAD').parent().addClass('active');
                        else
                            $('#LRAdvanceSalaryAD').parent().removeClass('active');

                        if (curLREditRow.hasExitReentryRequest)
                            $('#LRExitReentryAD').parent().addClass('active');
                        else
                            $('#LRExitReentryAD').parent().removeClass('active');

                        if (curLREditRow.hasAirTicketRequest)
                            $('#LRAirTicketAD').parent().addClass('active');
                        else
                            $('#LRAirTicketAD').parent().removeClass('active');


                        if (curLREditRow.hasNotesRequirement)
                            $('#LRNotesRequired').parent().addClass('active');
                        else
                            $('#LRNotesRequired').parent().removeClass('active');

                        if (curLREditRow.hasAttachmentRequirement)
                            $('#LRAttachmentRequired').parent().addClass('active');
                        else
                            $('#LRAttachmentRequird').parent().removeClass('active');
    
                        if (curLREditRow.hasAirTicketRequirement)
                            $('#LRAirTicketRequired').parent().addClass('active');
                        else
                            $('#LRAirTicketRequired').parent().removeClass('active');
                        
                        if (curLREditRow.hasAdvanceSalaryRequirement)
                            $('#LRAdvanceSalaryRequired').parent().addClass('active');
                        else
                            $('#LRAdvanceSalaryRequired').parent().removeClass('active');
                        
                        if (curLREditRow.hasExitReentryRequirement)
                            $('#LRExitReentryRequired').parent().addClass('active');
                        else
                            $('#LRExitReentryRequired').parent().removeClass('active');


                        $('#lrLoader').hide();
                    });
                }, 150);
            }, timeout);
        }
        else if (args.commandColumn.type == "Copy") {
            this.copy(false);
        }
    }
    function leaveRequestsToolbarClick(args) {
        var gridObj = document.getElementById("AllLeaveRequestsGrid").ej2_instances[0];
        if (args.item.id === 'AllLeaveRequestsGrid_pdfexport') {
            gridObj.pdfExport();
        }
        if (args.item.id === 'AllLeaveRequestsGrid_excelexport') {
            gridObj.excelExport();
        }
        if (args.item.id === 'AllLeaveRequestsGrid_csvexport') {
            gridObj.csvExport();
        }
        if (this.getSelectedRecords().length > 0) {
            var withHeader = false;
            if (args.item.id === 'copyHeader') {
                withHeader = true;
            }
            this.copy(withHeader);
        }
        else {
            if (args.item.id === 'copyHeader') {
                var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                dialogObj.show();
            }
            else if (args.item.id === 'copy') {
                var dialogObj = document.getElementById('alert_dialog_1').ej2_instances[0];
                dialogObj.show();
            }
        }
        if (args.item.id === 'showActions') {
            gridObj.toolbar = [{ text: "Hide Actions", tooltipText: "Actions", prefixIcon: "e-custom-hide-actions", id: "hideActions" }, { text: "Toggle Grouping", tooltipText: "Grouping", prefixIcon: "e-custom-group-toggle", id: "toggleGrouping" }, { text: "Toggle Detailed", tooltipText: "Toggle Detailed", prefixIcon: "e-toggledetailed", id: "toggleDetailed" }, "ExcelExport", "CsvExport", "Print", "Search", "Delete", { text: "Copy", tooltipText: "Copy", prefixIcon: "e-copy", id: "copy" }, { text: "Copy With Header", tooltipText: "Copy With Header", prefixIcon: "e-copy", id: "copyHeader" }, "ColumnChooser"];
            gridObj.refresh();
        }
        if (args.item.id === 'hideActions') {
            gridObj.toolbar = [{ text: "Show Actions", tooltipText: "Actions", prefixIcon: "e-custom-show-actions", id: "showActions" }, "Search", "ColumnChooser"];
            gridObj.showColumnChooser = true;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleGrouping') {
            gridObj.allowGrouping = !gridObj.allowGrouping;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleDetailed') {
            var visCount = 0;
            for (var i = 0; i < gridObj.columns.length; i++) {
                if (gridObj.columns[i].visible) visCount++;
            }
            if (visCount == gridObj.columns.length) {
                for (var i = 0; i < gridObj.columns.length; i++) {
                    var col = gridObj.columns[i];
                    if (typeof col.customAttributes != 'undefined' && typeof col.customAttributes.id != 'undefined' && col.customAttributes.id == 'detailed')
                        gridObj.showHider.hide(col.headerText, 'headerText');
                    else if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
            else {
                for (var i = 0; i < gridObj.columns.length; i++) {
                    var col = gridObj.columns[i];
                    if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
        }
    }

    function alertBtnClick() {
        var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
        var dialogObj1 = document.getElementById('alert_dialog_1').ej2_instances[0];
        dialogObj.hide();
        dialogObj1.hide();
    }

    var curLRDepartments = [];
    var curLRPositions = [];
    var curTaskPositions = [];
    var curTaskDepartments = [];
</script>
