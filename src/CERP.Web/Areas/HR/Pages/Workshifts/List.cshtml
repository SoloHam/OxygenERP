@page "/HR/WorkShifts"
@using CERP.Setup.DTOs;
@model CERP.Web.Areas.HR.Pages.WorkShifts.ListModel
@{
    ViewData["Title"] = "Work Shifts";
    ViewData["IconClass"] = "fa fa-user-tie";
    ViewData["HeaderTitle"] = "WORK SHIFTS";
    ViewData["SubTitle"] = "List of Work Shifts";
    ViewData["Area"] = "HR";

    ViewData["IsList"] = false;
    ViewData["IsCreate"] = false;
    ViewData["CreateNewText"] = "New Work Shift";
    ViewData["CreateNewLink"] = "/WorkShifts/New";

    List<Department_Dto> departments = (await Model.DepartmentAppService.GetListAsync(new Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto())).Items.ToList();

    var alertanimation = new Syncfusion.EJ2.Popups.DialogAnimationSettings { Effect = Syncfusion.EJ2.Popups.DialogEffect.None };

    var initialToolBar = new List<object>() { new { text = "Show Actions", tooltipText = "Actions", prefixIcon = "e-custom-show-actions", id = "showActions" }, "Search", "ColumnChooser" };
    var fullToolBar = new List<object>() { new { text = "Hide Actions", tooltipText = "Actions", prefixIcon = "e-custom-hide-actions", id = "hideActions" }, new { text = "Toggle Grouping", tooltipText = "Grouping", prefixIcon = "zmdi-chevron-up", id = "toggleGrouping" }, new { text = "Toggle Detailed", tooltipText = "Toggle Detailed", prefixIcon = "e-toggledetailed", id = "toggleDetailed" }, "ExcelExport", "CsvExport", "Print", "Search",new { text = "Copy", tooltipText = "Copy", prefixIcon = "e-copy", id = "copy" }, new { text = "Copy With Header", tooltipText = "Copy With Header", prefixIcon = "e-copy", id = "copyHeader" }, "ColumnChooser" };
}
@section styles {
    <link href="~/libs/syncfusion/ej2-grid/styles/fabric.css" rel="stylesheet" />

    <style>
        .e-grid .e-headercell {
            background-color: #f5f5f5;
            /*font-size: 18px;*/
        }

        .e-detailcell .e-headercell {
            background-color: #6691b1 !important;
            color: rgb(253,253,253);
            /*font-size: 18px;*/
        }
    </style>
}
@section scripts {
    <!-- Syncfusion Essential JS 2 Scripts -->
    <script src="~/libs/syncfusion/ej2-grid/scripts/ej2.min.js"></script>
    <script>
        var isEditing = false;
        var curEditRow;
        $(document).ready(function () {
            $(".control-section").stop().animate({ height: '87%' }, 150);
            $('#newWorkshiftForm').on('submit', function (e) {
                e.preventDefault();
                if (ValidateForm()) {
                    Swal.showLoading();

                    let form = [];
                    let generalInfo = $('#newWorkshiftForm').find("select, textarea, input").serializeArray();
                    form = form.concat(generalInfo);
                    var params = objectifyForm(form);
                    params.isEditing = isEditing;

                    if (isEditing)
                        params.Id = curEditRow.id;

                    let formData = new FormData();
                    formData.append("info", JSON.stringify(params));
                    var xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
                    formData.append("__RequestVerificationToken", xhrToken);

                    $.ajax({
                        url: "@Url.Content("~")/HR/Workshifts",
                        async: true,
                        type: "POST",
                        data: formData,
                        contentType: false,
                        processData: false,
                        success: function (data) {
                            var grid = $("#AllWorkshiftsGrid")[0].ej2_instances[0];
                            console.log("Response");
                            console.log(data);
                            console.log(params);
                            Swal.hideLoading();
                            if (isEditing) {
                                curEditRow.id = data.id;
                                curEditRow.title = data.title;
                                curEditRow.department.name = data.department.name;
                                curEditRow.startHour = data.startHour;
                                curEditRow.endHour = data.endHour;

                                grid.refresh(); // refresh the Grid.

                                swal.fire("Success", "Workshift has successfully been updated", "success");
                            }
                            else {
                                grid.dataSource.push(data);
                                grid.refresh(); // refresh the Grid.

                                swal.fire("Success", "Workshift has successfully been added", "success");
                            }
                            //window.location = "@Url.Content("~")/HR/Employees";
                        },
                        error: function (err) {
                            Swal.hideLoading();
                            if (isEditing)
                                swal.fire("Failed", "Workshift couldn't be updated, please fix all errors and try again.", "error");
                            else
                                swal.fire("Failed", "Workshift couldn't be added, please fix all errors and try again.", "error");

                            console.log(err);
                        }
                    })
                }
                else {
                    Swal.close();
                    Swal.hideLoading();
                }
            });

            function ValidateForm() {
                var elmForm = $("#newWorkshiftForm");
                // stepDirection === 'forward' :- this condition allows to do the form validation
                // only on forward navigation, that makes easy navigation on backwards still do the validation when going next
                var valid = false;
                elmForm.validator('validate');
                if (elmForm) {
                    //elmForm.validate({
                    //    submitHandler: function (form) {
                    //        console.log("Submit")
                    //        valid = true;
                    //    },
                    //    invalidHandler: function (form) {
                    //        console.log("Invalid")
                    //        valid = false;
                    //    }
                    //})
                    var elmErr = elmForm.find('.has-error');
                    if (elmErr) {
                        if (elmErr.length > 0) {
                            // Form validation failed
                            valid = false;
                        }
                        else {
                            valid = true;
                        }
                    }
                }
                return valid;
            }
        });

    </script>
    <ejs-scripts></ejs-scripts>

}
<partial name="_DefaultPageHeader" />
<div class="site-content customContentArea">
    <div class="well">
        <div id="toggleAddSection" class="p-t-0">
            <div class="row">
                <div class="col-lg-12">
                    <button id="addSecToggleBtn" type="button" class="btn btn-primary btn-block" onclick="toggleAddSection();">Add New Workshift</button>
                </div>
            </div>
        </div>
        <div id="addWorkshiftSection" class="panel-body p-t-0 p-b-0" style="display:none;">
        <div class="m-l-0 m-t-0">
            <h2 id="addSecTitle">Add Workshift</h2>
            <p>
                Provide details regarding the workshift
            </p>
        </div>
        <form id="newWorkshiftForm" method="post" data-toggle="validator">
            <div class="row">
                <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                    @*<div class="col-sm-3" style="padding:0">
                            <div class="form-group">
                                <label class="control-label m-b-5">Code:</label>
                                <input type="number" id="phoneKey" name="PhoneKey" style="width:100% !important" class="form-control inline pull-left">
                            </div>
                        </div>*@
                    <div class="col-sm-12" style="padding:0">
                        <div class="form-group">
                            <label class="control-label m-b-5 ">Department:</label>
                            <select id="departmentId" name="Department.Id" class="form-control" required>
                                <option></option>
                                @for (int i = 0; i < departments.Count; i++)
                                {
                                    <option value="@departments[i].Id" data-value="@departments[i].Name">@departments[i].Name</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>
                <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                    @*<div class="col-sm-3" style="padding:0">
                            <div class="form-group">
                                <label class="control-label m-b-5">Code:</label>
                                <input type="number" id="mobileKey" name="MobileKey" style="width:100% !important" class="form-control inline pull-left">
                            </div>
                        </div>*@
                    <div class="col-sm-12" style="padding:0">
                        <div class="form-group">
                            <label class="control-label m-b-5 ">Title</label>
                            <input type="text" id="title" name="Title" @*value="@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" required>
                        </div>
                    </div>
                </div>
                <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                    @*<div class="col-sm-3" style="padding:0">
                            <div class="form-group">
                                <label class="control-label m-b-5">Code:</label>
                                <input type="number" id="faxKey" name="FaxKey" style="width:100% !important" class="form-control inline pull-left">
                            </div>
                        </div>*@
                    <div class="col-sm-12" style="padding:0">
                        <div class="form-group">
                            <label class="control-label m-b-5 ">Start Hour:</label>
                            <input type="text" id="startHour" name="StartHour" @*value="@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" required>
                        </div>
                    </div>
                </div>
                <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                    <div class="form-group">
                        <label class="margin-bottom-5  control-label">End Hour:</label>
                        <input type="text" id="endHour" name="EndHour" @*value="@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" required>
                    </div>
                </div>
            </div>
            <div class="clearfix margin-5"></div>
            
            <div class="row">
                <div class="col-lg-12">
                    <input id="submitAddSection" type="submit" class="btn btn-primary btn-block" value="Add Workshift" required />
                </div>
            </div>
            @*<div class="row">
                <div class="col-lg-12">
                    <input id="submitAddSection" type="submit" class="btn btn-primary btn-block" value="Submit Workshift" required />
                </div>
            </div>*@
        </form>
        </div>
    </div>

    <div class="control-section">
        <ejs-grid id="AllWorkshiftsGrid" dataSource="@ViewData["Workshifts_DS"]" enableAutoFill="true" columns="@Model.GetPrimaryGridColumns()"
                  dataBound="dataBoundResponsive"commandClick="commandClick" dataBound="dataBoundResponsive" actionComplete="actionComplete"
                  allowExcelExport="true" height="100% "allowPdfExport="true"
                  hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true"
                  allowSorting="true" allowMultiSorting="true" gridLines="Both"
                  toolbarClick="toolbarClick" showColumnChooser="true" toolbar="@initialToolBar"
                  
                  allowPaging="true" allowResizing="true">

            <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
            <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="false"></e-grid-editSettings>
            <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
            <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
        </ejs-grid>
    </div>
    </div>
</div>

<ejs-dialog id="alert_dialog" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy with Header" content="Atleast one row should be selected to copy with header">
    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
    </e-dialog-buttons>
</ejs-dialog>
<ejs-dialog id="alert_dialog_1" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy" content="Atleast one row should be selected to copy">
    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
    </e-dialog-buttons>
</ejs-dialog>

<script>
    
    function actionComplete(args) {
        if (args.requestType == "save") {

        }
        else if (args.requestType == "delete")
        {
            Swal.showLoading();

            let formData = new FormData();
            formData.append("workshifts", JSON.stringify(args.data));
            var xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
            formData.append("__RequestVerificationToken", xhrToken);

            $.ajax({
                url: '@Url.Content("~")/HR/Workshifts?handler=Workshift',
                async: true,
                type: "DELETE",
                data: formData,
                contentType: false,
                processData: false,
                success: function (data) {
                    //console.log(data.success);
                    swal.fire("Success", "Workshift has successfully been deleted", "success");

                    if ($('#addWorkshiftSection').css('display') !== 'none') {
                        $('#addWorkshiftSection').slideUp();
                        $('#toggleAddSection').slideUp(50);
                        setTimeout(function () {
                            $('#addSecToggleBtn').html('Add New Workshift');
                        }, 50);
                        $('#toggleAddSection').slideDown(250);
                    }
                },
                error: function (err) {
                    swal.fire("Failed", "Workshift couldn't be deleted, please fix all errors and try again.", "error");

                    console.log(err);
                }
            });
        }
    }
    function commandClick(args)
    {
        if (args.commandColumn.type == "Edit")
        {
            console.log(args);
            var params = args.rowData;  // display row data
            curEditRow = args.rowData;

            $('#toggleAddSection').slideUp(50);
            $('#toggleAddSection').slideDown(250);
            $('#addWorkshiftSection').slideUp(50);
            $('#addWorkshiftSection').slideDown(250);

            $('#submitAddSection').val('Update Workshift');
            $('#addSecTitle').html('Update Workshift');

            setTimeout(function () {
                $('#addSecToggleBtn').html('Close Section');
                
                $('#title').val(params.title);
                $('#departmentId').val(params.department.id);
                $('#startHour').val(params.startHour);
                $('#endHour').val(params.endHour);

                isEditing = true;
            }, 50);
        }
        else if (args.commandColumn.type == "Copy") {
            this.copy(false);
        }
    }

    function toggleAddSection() {
        if ($('#addWorkshiftSection').css('display') == 'none') {
           $('#toggleAddSection').slideUp(50);
            setTimeout(function () {
                $('#addSecToggleBtn').html('Cancel');
            }, 50);
            $('#toggleAddSection').slideDown(250);

            $('#addWorkshiftSection').slideUp(50);
            
            $('#submitAddSection').val('Add Workshift');
            $('#addSecTitle').html('Create New Workshift');

            setTimeout(function () {
                $('#departmentId').val('');
                $('#title').val('');
                $('#startHour').val('');
                $('#endHour').val('');

                isEditing = false;
            }, 50);

            $('#addWorkshiftSection').slideDown(250);

            $(".control-section").stop().animate({ height: '63%' }, 150);
        }
        else {
            $('#addWorkshiftSection').slideUp(250);

            $(".control-section").stop().animate({ height: '87%' }, 150);
            $('#toggleAddSection').slideUp(50);
            setTimeout(function () {
                $('#addSecToggleBtn').html('Add New Workshift');
            }, 50);
            $('#toggleAddSection').slideDown(250);
        }
    }
    function onLoad() {
        this.parentDetails.parentKeyFieldValue = this.parentDetails.parentRowData['Id'];
    }
    function toolbarClick(args) {
        var gridObj = document.getElementById("AllWorkshiftsGrid").ej2_instances[0];
        if (args.item.id === 'AllWorkshiftsGrid_pdfexport') {
            gridObj.pdfExport();
        }
        if (args.item.id === 'AllWorkshiftsGrid_excelexport') {
            gridObj.excelExport();
        }
        if (args.item.id === 'AllWorkshiftsGrid_csvexport') {
            gridObj.csvExport();
        }
        if (this.getSelectedRecords().length > 0) {
            var withHeader = false;
            if (args.item.id === 'copyHeader') {
                withHeader = true;
            }
            this.copy(withHeader);
        } else {
            if (args.item.id === 'copyHeader') {
                var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                dialogObj.show();
            }
            else if (args.item.id === 'copy') {
                var dialogObj = document.getElementById('alert_dialog_1').ej2_instances[0];
                dialogObj.show();
            }
        }
        if (args.item.id === 'showActions') {
            gridObj.toolbar = [{ text: "Hide Actions", tooltipText: "Actions", prefixIcon: "e-custom-hide-actions", id: "hideActions" }, { text: "Toggle Grouping", tooltipText: "Grouping", prefixIcon: "e-custom-group-toggle", id: "toggleGrouping" }, { text: "Toggle Detailed", tooltipText: "Toggle Detailed", prefixIcon: "e-toggledetailed", id: "toggleDetailed" }, "ExcelExport", "CsvExport", "Print", "Search",{ text: "Copy", tooltipText: "Copy", prefixIcon: "e-copy", id: "copy" }, { text: "Copy With Header", tooltipText: "Copy With Header", prefixIcon: "e-copy", id: "copyHeader" }, "ColumnChooser"];
            gridObj.refresh();
        }
        if (args.item.id === 'hideActions') {
            gridObj.toolbar = [{ text: "Show Actions", tooltipText: "Actions", prefixIcon: "e-custom-show-actions", id: "showActions" }, "Search", "ColumnChooser"];
            gridObj.showColumnChooser = true;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleGrouping') {
            gridObj.allowGrouping = !gridObj.allowGrouping;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleDetailed') {
            var visCount = 0;
            for (var i = 0; i < gridObj.columns.length; i++) {
                if (gridObj.columns[i].visible) visCount++;
            }
            if (visCount == gridObj.columns.length) {
                for (var i = 0; i < gridObj.columns.length; i++) {
                    var col = gridObj.columns[i];
                    if (typeof col.customAttributes != 'undefined' && typeof col.customAttributes.id != 'undefined' && col.customAttributes.id == 'detailed')
                        gridObj.showHider.hide(col.headerText, 'headerText');
                    else if(col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
            else {
                for (var i = 0; i < gridObj.columns.length; i++) {
                    var col = gridObj.columns[i];
	    if(col.showInColumnChooser)
                         gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
        }
}
    function alertBtnClick() {
        var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
        var dialogObj1 = document.getElementById('alert_dialog_1').ej2_instances[0];
        dialogObj.hide();
        dialogObj1.hide();
    }
    var initial = true;
    function dataBound(args) {
        //this.autoFitColumns();
        //if (initial == true) {
        //    this.groupModule.collapseAll();
        //    initial = false;
        //}
        //console.log(args);
    }
</script>