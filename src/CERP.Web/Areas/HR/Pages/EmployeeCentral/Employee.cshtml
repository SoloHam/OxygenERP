@page "/HR/EmployeeCentral/Employee/{Id:Guid?}"
@using Syncfusion.EJ2.Navigations;
@using CERP.HR.Employee.Enums;
@using CERP.HR.EmployeeCentral.Employee;
@using CERP.App.Helpers;
@using CERP.HR.Setup.OrganizationalManagement.OrganizationStructure;
@using CERP.HR.Setup.OrganizationalManagement.PayrollStructure;
@using Syncfusion.EJ2;
@using Syncfusion.EJ2.Charts;
@addTagHelper *, Syncfusion.EJ2
@model CERP.Web.Areas.HR.Pages.EmployeeCentral.EmployeeModel
@{
    ViewData["Title"] = "Employee";
    ViewData["IconClass"] = "fa fa-user-tie";
    ViewData["HeaderTitle"] = "EMPLOYEE";
    ViewData["SubTitle"] = "List of Employee";
    ViewData["Area"] = "HR";

    ViewData["IsList"] = false;
    ViewData["IsCreate"] = false;

    var alertanimation = new Syncfusion.EJ2.Popups.DialogAnimationSettings { Effect = Syncfusion.EJ2.Popups.DialogEffect.None };

    var initialToolBar = new List<object>() { new { text = "Show Actions", tooltipText = "Actions", prefixIcon = "e-custom-show-actions", id = "showActions" }, "Search", "ColumnChooser" };
    var initialCrudToolBar = new List<object>() { new { text = "Show Actions", tooltipText = "Actions", prefixIcon = "e-custom-show-actions", id = "showActions" }, "Add", "Delete", "Search", "ColumnChooser" };
    //var fullToolBar = new List<object>() { new { text = "Hide Actions", tooltipText = "Actions", prefixIcon = "e-custom-hide-actions", id = "hideActions" }, new { text = "Toggle Grouping", tooltipText = "Grouping", prefixIcon = "zmdi-chevron-up", id = "toggleGrouping" }, new { text = "Audit Trail", tooltipText = "View Audit Trail", prefixIcon = "e-toggleaudittrail", id = "toggleaudittrail" }, new { text = "Toggle Detailed", tooltipText = "Toggle Detailed", prefixIcon = "e-toggledetailed", id = "toggleDetailed" }, new { text = "ExcelExport", tooltipText = "Excel Export", prefixIcon = "e-excelexport", id = "excelexport", align = "Right" }, "CsvExport", "Print", "Search", new { text = "Copy", tooltipText = "Copy", prefixIcon = "e-copy", id = "copy" }, new { text = "Copy With Header", tooltipText = "Copy With Header", prefixIcon = "e-copy", id = "copyHeader" }, "ColumnChooser" };

    List<object> payslipCommands = new List<object>();
    payslipCommands.Add(new { type = "ViewPayslip", buttonOption = new { iconCss = "e-icons e-view", cssClass = "e-flat" } });

    List<object> attachmentsCommands = new List<object>();
    attachmentsCommands.Add(new { type = "View", buttonOption = new { iconCss = "e-icons e-view", cssClass = "e-flat" } });
    attachmentsCommands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "e-flat" } });

    List<object> defaultCrudCommands = new List<object>();
    defaultCrudCommands.Add(new { type = "Edit", buttonOption = new { iconCss = "e-icons e-edit", cssClass = "e-flat" } });
    defaultCrudCommands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "e-flat" } });
    defaultCrudCommands.Add(new { type = "Cancel", buttonOption = new { iconCss = "e-icons e-cancel-icon", cssClass = "e-flat" } });

    var integerFieldEdit = new
    {
@@params = new Syncfusion.EJ2.Inputs.NumericTextBox() { Created = "numericTextBoxEditCreated", Decimals = 0 }
};
var dicValueTypeEdit = new
{
@@params = new Syncfusion.EJ2.DropDowns.DropDownList() { Created = "dicValueTypeCreated", Change = "dicValueEditChanged", Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Text = "label", Value = "value" }, DataSource = new List<object>(), Query = "new ej.data.Query()", AllowFiltering = true }
};
var codeNameTypeEdit = new
{
@@params = new Syncfusion.EJ2.DropDowns.DropDownList() { Created = "codeNameTypeCreated", Change = "codeNameEditChanged", Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Text = "label", Value = "value" }, DataSource = new List<object>(), Query = "new ej.data.Query()", AllowFiltering = true }
};

var complexNameEdit = new
{
@@params = new Syncfusion.EJ2.DropDowns.DropDownList() { Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Text = "name", Value = "id" }, DataSource = new List<object>(), Query = "new ej.data.Query()", AllowFiltering = true }
};
var payComponentValueTypeEdit = new
{
@@params = new Syncfusion.EJ2.DropDowns.DropDownList() { Created = "payComponentValueTypeCreated", DataSource = EnumExtensions.GetDescriptions(typeof(PS_PayComponentTypeValueType)), Query = "new ej.data.Query()", AllowFiltering = true }
};

Syncfusion.EJ2.Navigations.TabTabAnimationSettings horizontalAnimation = new TabTabAnimationSettings()
{
    Next = new TabTabActionSettings() { Effect = "SlideLeftIn" },
    Previous = new TabTabActionSettings() { Effect = "SlideLeftIn" }
}; //new { name = "SlideLeftIn" };
Syncfusion.EJ2.Navigations.TabTabAnimationSettings verticalAnimation = new TabTabAnimationSettings()
{
    Next = new TabTabActionSettings() { Effect = "SlideBottomIn", Duration = 500 },
    Previous = new TabTabActionSettings() { Effect = "SlideBottomIn", Duration = 500 }
}; //new { name = "SlideLeftIn" };

List<EC_IqamaSponsorType> iqamaSponsorTypes = Enum.GetValues(typeof(EC_IqamaSponsorType)).Cast<EC_IqamaSponsorType>().ToList();
}

@section styles {
    <style>
        /* Tile view card customization */

        .tile_layout.card-control-section .row.filter .tile_search {
            justify-content: flex-end;
        }

        .tile_layout.card-control-section .row .e-card {
            text-align: left;
        }

        .tile_layout.card-control-section .control-wrapper {
            padding: 0 20px;
        }

        .tile_layout.card-control-section .row.filter {
            margin: 0;
        }

        .tile_layout.card-control-section .e-card .e-card-actions a {
            border: 1px solid;
            display: block;
            margin: auto;
            width: 100px;
            border-radius: inherit;
        }

        .tile_layout.card-control-section .e-card .e-card-header .e-card-header-caption .e-card-header-title {
            font-size: 18px;
        }

        .tile_layout.card-control-section .e-card .e-card-image {
            height: 165px;
            width: 200px;
        }

        .tile_layout.card-control-section .row.filter .col-xs-6.col-sm-6.col-lg-6.col-md-6 {
            display: inline-flex;
            flex-direction: column;
            width: 100%;
        }

        .tile_layout.card-control-section .col-xs-6.col-sm-6.col-lg-6.col-md-6 {
            width: 100%;
            padding: 10px;
        }

        .card-control-section.tile_layout .e-card-layout {
            margin: auto;
            max-width: 190px;
        }

        #source_link {
            float: right;
            margin-right: 10px;
        }

        @@media screen and (max-width: 768px) {
            #source_link {
                margin-right: 0px;
            }
        }

        @@media (min-width: 960px) {
            .tile_layout.card-control-section .col-xs-6.col-sm-6.col-lg-6.col-md-6 {
                width: 25%;
            }

            .card-control-section.tile_layout .e-card-layout {
                max-width: 850px;
            }
        }

        @@media (min-width: 540px) {
            .tile_layout.card-control-section .row.filter {
                display: flex
            }

            .tile_layout.card-control-section .e-card .e-card-content {
                min-height: 170px;
                max-height: 170px;
            }
        }

        @@media (max-width: 960px) and (min-width: 540px) {
            .tile_layout.card-control-section .col-xs-6.col-sm-6.col-lg-6.col-md-6 {
                width: 50%;
            }

            .card-control-section.tile_layout .e-card-layout {
                max-width: 410px;
            }
        }

        .avatar-upload {
            position: relative;
        }

            .avatar-upload .avatar-edit {
                position: absolute;
                right: 40%;
                z-index: 1;
                top: 105%;
            }

                .avatar-upload .avatar-edit input {
                    display: none;
                }

                    .avatar-upload .avatar-edit input + label {
                        display: inline-block;
                        width: 34px;
                        height: 34px;
                        margin-bottom: 0;
                        border-radius: 0%;
                        background: #FFFFFF;
                        border: 1px solid transparent;
                        box-shadow: 0px 2px 4px 0px rgba(0, 0, 0, 0.12);
                        cursor: pointer;
                        font-weight: normal;
                        transition: all 0.2s ease-in-out;
                    }

                        .avatar-upload .avatar-edit input + label:hover {
                            background: #f1f1f1;
                            border-color: #d6d6d6;
                        }

                    .avatar-upload .avatar-edit input#imageCancel + label#remove:after {
                        content: "\f136";
                        font-size: 1.35em;
                        font-family: Material-Design-Iconic-Font;
                        color: #757575;
                        position: absolute;
                        top: 6px;
                        left: 11px;
                        text-align: center;
                        margin: auto;
                    }

                    .avatar-upload .avatar-edit input#profileImageUpload + label#upload:after {
                        content: "\f11f";
                        font-size: 1.35em;
                        font-family: Material-Design-Iconic-Font;
                        color: #757575;
                        position: absolute;
                        top: 6px;
                        right: 11px;
                        text-align: center;
                        margin: auto;
                    }

            .avatar-upload .avatar-preview {
                height: auto;
                position: relative;
                border-radius: 0%;
                border: 6px solid #F8F8F8;
                box-shadow: 0px 2px 4px 0px rgba(0, 0, 0, 0.1);
                max-width: 260px;
            }

                .avatar-upload .avatar-preview > div {
                    width: 100%;
                    height: auto;
                    border-radius: 0%;
                    background-size: cover;
                    background-repeat: no-repeat;
                    background-position: center;
                }

        .e-grid .e-headercell {
            background-color: #ffffff;
            font-weight: 600 !important
            /*font-size: 18px;*/;
        }

        .EmployeeHeader {
            height: 400px;
            background-image: url('/images/banner2.jpg');
            background-size: cover;
        }

        .customTab .e-tab-header.e-control.e-toolbar {
            background-color: #24344D !important;
        }

        .customTab .e-toolbar .e-toolbar-items {
            display: flex;
            justify-content: center;
            background-color: #24344D !important;
            color: #fff !important;
        }

        .customTab.e-tab .e-tab-header .e-toolbar-item.e-active .e-tab-text {
            color: #fff !important;
            font-weight: 500;
        }

        .customTab.e-tab .e-tab-header .e-toolbar-item .e-tab-text {
            color: #fff !important;
            font-weight: 500;
        }

        .customTab.e-tab .e-tab-header .e-toolbar-item.active .e-tab-text:hover {
            color: #fff !important;
        }

        .customTab.e-tab .e-tab-header .e-toolbar-item .e-tab-text:hover {
            color: #eeeeee !important;
        }

        .customTab.e-tab .e-tab-header .e-toolbar-item .e-tab-wrap {
            color: #24344D !important;
            border-radius: 0;
            color: #333;
            border: 1px solid !important;
        }

        .customTab .e-tab .e-tab-header .e-toolbar-item.e-active .e-text-wrap::before {
            border: 1.5px solid #0078d6;
            content: '';
            display: block;
            position: absolute;
            top: 95%;
            width: 100%;
        }

        .customTab .e-toolbar-item.e-template {
            padding: 0 20px 0 0 !important;
        }


        .classicTab .e-tab-header.e-control.e-toolbar {
            background-color: #eaeaea !important;
        }

        .classicTab .e-toolbar .e-toolbar-items {
            display: initial !important;
            /*justify-content: center;*/
            background-color: #fff !important;
            color: #333 !important;
            width: 250px !important;
            border-right: 2px Solid #0078d6;
        }

        .classicTab.e-tab .e-tab-header .e-toolbar-item.e-active .e-tab-text {
            color: #fff !important;
        }

        .classicTab.e-tab .e-tab-header .e-toolbar-item .e-tab-text {
            color: #333 !important;
            font-weight: 500;
        }
            .classicTab.e-tab .e-tab-header .e-toolbar-item .e-tab-text:hover {
                color: #030303 !important;
                font-weight: 600
            }

        .classicTab.e-tab .e-tab-header .e-toolbar-item.e-active .e-tab-text:hover {
            /*color: #fff !important;*/
            color: #fff !important;
            font-weight: 600;
        }

        .classicTab.e-tab .e-tab-header .e-toolbar-item .e-tab-wrap {
            color: #eaeaea !important;
            border-radius: 0;
            color: #333;
            border: 1px solid !important;
        }

        .classicTab .e-tab .e-tab-header .e-toolbar-item.e-active .e-text-wrap::before {
            border: 1.5px solid #0078d6;
            content: '';
            display: block;
            position: absolute;
            top: 95%;
            width: 100%;
        }

        .classicTab .e-toolbar-item.e-template {
            padding: 0 0px 0px 0 !important;
            margin: 5px 0px 0px 0 !important;
            height: 20px;
        }


        .defaultTab .e-tab-header.e-control.e-toolbar {
            background-color: #eaeaea !important;
        }

        .defaultTab .e-toolbar .e-toolbar-items {
            display: initial !important;
            /*justify-content: center;*/
            background-color: initial !important;
            color: #333 !important;
            width: initial !important;
            border-right: initial !important;
        }

        .defaultTab.e-tab .e-tab-header .e-toolbar-item.e-active .e-tab-text {
            color: #333 !important;
        }

        .defaultTab.e-tab .e-tab-header .e-toolbar-item .e-tab-text {
            color: initial !important;
        }

            .defaultTab.e-tab .e-tab-header .e-toolbar-item .e-tab-text:hover {
                color: initial !important;
            }

        .defaultTab.e-tab .e-tab-header .e-toolbar-item.active .e-tab-text:hover {
            color: #fff !important;
        }

        .defaultTab.e-tab .e-tab-header .e-toolbar-item .e-tab-wrap {
            color: #eaeaea !important;
            border-radius: 0 !important;
            color: #333 !important;
            border: none !important;
        }

        .defaultTab.e-tab .e-tab-header .e-toolbar-item.e-active .e-text-wrap::before {
            border: 1.5px solid #0078d6;
            content: '';
            display: block;
            position: absolute;
            top: 95%;
            width: 100%;
        }

        .defaultTab.e-tab .e-tab-header .e-toolbar-item.e-active .e-tab-wrap {
            background: none !important;
            border-radius: 0;
            border-color: #0078d6;
        }

        .defaultTab .e-toolbar-item.e-template {
            padding: initial !important;
            margin: initial !important;
            height: initial !important;
        }

        .mainTab {
            background: #fff;
            margin: 20px 10px;
            border-top: 2px Solid #0078d6;
        }

        .secondaryTab {
            background: #fff;
            margin-left: 96px;
            border-left: 2px Solid #0078d6;
        }

        .customForm {
            margin: 0 0 0 10px;
            background: #fff;
            border: 1px solid #cccccc
        }

            .customForm .formHeader {
                background: #fff;
                padding: 5px;
                border-bottom: 1px solid #cccccc
            }

                .customForm .formHeader .headerTitle {
                    text-shadow: 0px 0px 350px #2c5173;
                    font-size: 22px;
                    font-family: "Segoe UI", "GeezaPro", "DejaVu Serif", sans-serif, "-apple-system", "BlinkMacSystemFont";
                    font-weight: 600;
                    /* align-self: center; */
                    flex: auto;
                    background-color: transparent;
                    height: inherit;
                    padding: 0px 0 0px 10px !important;
                    display: inherit;
                }

            .customForm .formContent {
                padding: 10px 10px 20px 10px;
            }

            .orgchart{
                min-height: 100%;
                min-width: 100%;
            }
            .orgchart table{
                background-color: transparent !important;
            }
    </style>
}
<script id="card_template" type="text/x-template">
    <div class="e-card ${if(isHorizontal)} e-card-horizontal ${/if}">
        ${if(cardImage)}
        <div class="e-card-image" style="background-image:url(${cardImage.url})">
            ${if(cardImage.title)}
            <div class="e-card-title"> ${cardImage.title} </div>
            ${/if}
        </div>
        ${/if} ${if(cardTitle)}
        <div class="e-card-title"> ${cardTitle} </div>
        ${/if} ${if(header_title || header_subtitle || header_img)}
        <div class="e-card-header">
            ${if(header_img)}
            <div class="e-card-header-image ${if(header_img.isRounded)} e-card-corner ${/if}" style="background-image:url(${header_img.url})"></div>
            ${/if} ${if(header_title || header_subtitle)}
            <div class="e-card-header-caption">
                ${if(header_title)}
                <div class="e-card-header-title">${header_title}</div>${/if}
                ${if(header_subtitle)}
                <div class="e-card-sub-title">${header_subtitle}</div>${/if}
                ${if(header_dateOfBirth)}
                <div class="e-card-sub-title">${header_dateOfBirth}</div>${/if}
                ${if(header_birthCountry)}
                <div class="e-card-sub-title">${header_birthCountry}</div>${/if}
                ${if(header_placeOfBirth)}
                <div class="e-card-sub-title">${header_placeOfBirth}</div>${/if}
            </div>
            ${/if}
        </div>
        ${/if} ${if(cardContent)}
        <div class="e-card-content"> ${cardContent} </div>
        ${/if} ${if(card_action_btn)}
        <div class="e-card-actions ${if(card_action_btn.isVertical)} e-card-vertical ${/if}">
            ${for(action_btn of card_action_btn.action_btns)} ${if(action_btn.tag === 'a')}
            <a href="${action_btn.href}" target="${action_btn.target}">${action_btn.text}</a>
            ${else}
            <button class="e-card-btn" onclick=${action_btn.action}>${action_btn.text}</button>
            ${/if} ${/for}
        </div>
        ${/if}
    </div>
</script>
@section scripts {

    <script>
    let isEditingEmployee = @(Model.Id != Guid.Empty? "true" : "false");
    let curEmployee;

    let isEditingNationalIdentity = false;
    let curNationalIdentityEditRow;

    let departments = [];
    let possibleSubDepartments = [];


    let disabilitiesGrid;

    let iqamaRenewValidityGrid;
    let labourOfficeRenewValidityGrid;
    let nationalIdentityGrid;
    let passportTravelGrid;
    let emailAddressesGrid;
    let phoneAddressesGrid;
    let homeAddressesGrid;
    let emergencyContactsGrid;

    let dependantsGrid;
    let dependantBiosGrid;
    let dependantNationalIndentitiesGrid;
    let dependantPassportTravelDocsGrid;

    let oSJobsGrid;

    let compBenefitsGrid;
    let cashPaymentTypesGrid;
    let chequePaymentTypesGrid;
    let bankPaymentTypesGrid;
    let payslipsGrid;

    let academiaProfileGrid;
    let skillsProfileGrid;

    let loansGrid;
        let isNotNational;

    let allOrgStructures = [];
    let allOrgLegalEntities = [];
    let allBUs = [];
    let allDivisions = [];
    let allDepartments = [];

    let curOrgStructure;
    let curBU;
    let curDiv;
    let curDep;
    let loadedOrgStructureInfo = false;
    let loadedCompBenefits = false;
    var $ocJs;
    var cardObj;
    $(document).ready(function () {
        $ocJs = $('#orgChartJs').orgchart({ data: [], nodeTitle: 'type', nodeContent: 'name'});
        if (isEditingEmployee) {
        $('#submitEmployeeBtn').text('UPDATE EMPLOYEE');
        cERP.appServices.hR.employeeService.employee.getEmployee('@Model.Id', true).done(function (data) {
            curEmployee = data;
            console.log(curEmployee);
            curEmployee.profilePic = typeof curEmployee.profilePic == 'undefined' || curEmployee.profilePic == null ? 'noimage.jpg' : curEmployee.profilePic;

            $('#EmpPhoto').attr('src', '@Url.Content("~")' +  curEmployee.profilePic);
            $('#headerName').text(curEmployee.firstName + ' ' + curEmployee.middleName + ' ' + curEmployee.lastName);

            FillFormByObject(curEmployee, $('#personalInfoTab'));
            FillFormByObject(curEmployee, $('#timeTab'));
            FillFormByObject(curEmployee, $('#compensationTab'));
            //FillFormByObject(curEmployee, $('#identityInfoTab'));
            if (loadedOrgStructureInfo && $('#empCompany').val() != curEmployee.legalEntityId) {
                $('#empCompany').multiselect('deselectAll');
                $('#empCompany').multiselect('select', curEmployee.legalEntityId);
                $('#empCompany').multiselect('refresh');
                $('#empCompany').change();

                loadedOrgStructureInfo = true;
            }
        });

        cERP.appServices.hR.employeeService.employee.getFullEmployee('@Model.Id').done(function (data) {
            curEmployee.nationalIdentities = data.nationalIdentities;
            curEmployee.passportTravelDocuments = data.passportTravelDocuments;
            curEmployee.organizationStructureTemplateDepartment = data.organizationStructureTemplateDepartment;
            curEmployee.emailAddresses = data.emailAddresses;
            curEmployee.phoneAddresses = data.phoneAddresses;
            curEmployee.homeAddresses = data.homeAddresses;
            curEmployee.contacts = data.contacts;
            curEmployee.employeeBenefits = data.employeeBenefits;
            curEmployee.cashPaymentTypes = data.cashPaymentTypes;
            curEmployee.chequePaymentTypes = data.chequePaymentTypes;
            curEmployee.bankPaymentTypes = data.bankPaymentTypes;

            curEmployee.academiaProfile = data.academiaProfile;
            curEmployee.skillsProfile = data.skillsProfile;
            curEmployee.employeeDisabilities = data.employeeDisabilities;
            curEmployee.employeeSponsorLegalEntities = data.employeeSponsorLegalEntities;
            curEmployee.employeeLoans = data.employeeLoans;

            let clonedData = rfdc()(curEmployee);

            fullNameValueObjects = fullNameValueObjects.filter(function (x) { return  clonedData.dependants.filter(function (y) { return y.id == x.id }).length > 0 });
            fullNameValueObjects = fullNameValueObjects.concat(clonedData.dependants);

            console.log(clonedData.employeeDisabilities);
            disabilitiesGrid.dataSource = clonedData.employeeDisabilities.map(function (x) { return x.disability });

            if(clonedData.nationalIdentities)
                nationalIdentityGrid.dataSource = clonedData.nationalIdentities.primaryValidityAttachments;
            if (clonedData.passportTravelDocuments)
                passportTravelGrid.dataSource = clonedData.passportTravelDocuments.map(function (x) { return x.passportTravelDocument });

            emailAddressesGrid.dataSource = clonedData.emailAddresses.map(function (x) { return x.emailAddress });
            phoneAddressesGrid.dataSource = clonedData.phoneAddresses.map(function (x) { return x.phoneAddress });
            homeAddressesGrid.dataSource = clonedData.homeAddresses.map(function (x) { return x.homeAddress });
            emergencyContactsGrid.dataSource = clonedData.contacts.map(function (x) { return x.contact });
            if (!loadedCompBenefits) {
                console.log('SETTING AT RANDEVU 1');
                compBenefitsGrid.dataSource = clonedData.employeeBenefits;
                compBenefitsGrid.refresh();
                loadedCompBenefits = true;
            }
            codeNameTypes.removeIf(function (x) { return clonedData.cashPaymentTypes.filter(function (y) { return y.collectionLocationId == x.id }).length > 0 })
            codeNameTypes = codeNameTypes.concat(clonedData.cashPaymentTypes.map(function (x) { x.collectionLocation.code = x.collectionLocation.locationCode; x.collectionLocation.name = x.collectionLocation.locationName; return x.collectionLocation }));
            cashPaymentTypesGrid.dataSource = clonedData.cashPaymentTypes;

            chequePaymentTypesGrid.dataSource = clonedData.chequePaymentTypes;
            bankPaymentTypesGrid.dataSource = clonedData.bankPaymentTypes;
            dictionaryValueTypes.removeIf(function (x) { return clonedData.academiaProfile.filter(function (y) { return y.academiaCertificateSubTypeId == x.id }).length > 0 })
            dictionaryValueTypes = dictionaryValueTypes.concat(clonedData.academiaProfile.map(function (x) { return x.academiaCertificateSubType }));
            academiaProfileGrid.dataSource = clonedData.academiaProfile;

            dictionaryValueTypes.removeIf(function (x) { return clonedData.skillsProfile.filter(function (y) { return y.skillSubTypeId == x.id }).length > 0 })
            dictionaryValueTypes = dictionaryValueTypes.concat(clonedData.skillsProfile.map(function (x) { return x.skillSubType }));
            skillsProfileGrid.dataSource = clonedData.skillsProfile;

            loansGrid.dataSource = clonedData.employeeLoans;

            if (curEmployee.employeeSponsorLegalEntities) {
                $('#empIqamaSponsorLegalEntitiesId').multiselect('select', curEmployee.employeeSponsorLegalEntities.map(function (x) { return x.legalEntityId }));
            }

            cERP.appServices.hR.employeeService.employee.getFullEmployee('@Model.Id', 2).done(function (data) {
                curEmployee.dependants = data.dependants;

                curEmployee.iqamaNumberValidities = data.iqamaNumberValidities;
                curEmployee.iqamaLabourOfficeValidities = data.iqamaLabourOfficeValidities;

                let clonedData = rfdc()(curEmployee);

                fullNameValueObjects = fullNameValueObjects.filter(function (x) { return clonedData.dependants.filter(function (y) { return y.id == x.id }).length > 0 });
                fullNameValueObjects = fullNameValueObjects.concat(clonedData.dependants);

                dependantsGrid.dataSource = clonedData.dependants;
                dependantNationalIndentitiesGrid.dataSource = clonedData.dependants.map(function (x) { return x.nationalIdentities.map(function (y) { return { dependantId: y.dependantId, ...y.nationalIdentity } }) }).flat();
                dependantPassportTravelDocsGrid.dataSource = clonedData.dependants.map(function (x) { return x.passportTravelDocuments.map(function (y) { return { dependantId: y.dependantId, ...y.passportTravelDocument } }) }).flat();

                let dependantsBook = [];

                for (var i = 0; i < clonedData.dependants.length; i++) {
                    let curDependant = clonedData.dependants[i];
                    let data = {
                        relationshipTypeId: curDependant.relationshipTypeId,
                        header_title: curDependant.firstName + ' ' + curDependant.lastName,
                        header_subtitle: dictionaryValueAccessor('relationshipTypeId', curDependant),
                        header_birthCountry: dictionaryValueAccessor('birthCountryId', curDependant),
                        header_dateOfBirth: curDependant.dateOfBirth,
                        header_placeOfBirth: curDependant.placeOfBirth,
                        cardImage: false,//{ url: '../css/card/Tile_2.png', tag: 'client' },
                        cardContent: false,//'Node.js is a wildly popular platform for writing web applications that has revolutionized web development in many ways.',
                        card_action_btn: {
                            action_btns: [{ tag: '', target: '_blank', text: 'Edit', action: editDependant(clonedData.dependants[i]) }],
                            isVertical: true
                        },
                        isHorizontal: false
                    };
                    dependantsBook.push(data);
                }
                console.log('Dependants Book');
                console.log(dependantsBook);
                cardObj = dependantsBook;
                cardRendering(cardObj);
                //$.each(clonedData.employeeBenefits, function (i, x) {
                //    x.payComponentTypeId = 7;
                //});
                //clonedData.employeeBenefits[0].payComponentTypeId = 7;

                if (clonedData.iqamaNumberValidities)
                    iqamaRenewValidityGrid.dataSource = clonedData.iqamaNumberValidities.primaryValidityAttachments;
                if (clonedData.iqamaLabourOfficeValidities)
                    labourOfficeRenewValidityGrid.dataSource = clonedData.iqamaLabourOfficeValidities.primaryValidityAttachments;


            });
        });
    }

        let accordion = $('#identityInfoAccordion')[0].ej2_instances[0];
        accordion.hideItem(0, true);
       

        $('#empIqamaSponsorType').change();

    $('#empBirthCountry').multiselect(options);
    $('#empGender').multiselect(options);
    $('#empMaritalStatus').multiselect(options);
    $('#empNationality').multiselect(options);
    $('#empPreferredLanguage').multiselect(options);
    $('#empTitle').multiselect(options);

    $('#empCompany').multiselect(options);
    $('#empBU').multiselect(options);
    $('#empDIV').multiselect(options);
    $('#empDEP').multiselect(options);
    $('#empLOC').multiselect(options);
    $('#empTimezone').multiselect(options);
    $('#empCostCenter').multiselect(options);

    $('#empCBS_PayGrade').multiselect(options);
    $('#empCBS_PayGrade').multiselect(options);

        disabilitiesGrid = $('#DisabilitiesGrid')[0].ej2_instances[0];

        iqamaRenewValidityGrid = $('#IqamaRenewValidityGrid')[0].ej2_instances[0];
        labourOfficeRenewValidityGrid = $('#LabourOfficeRenewValidityGrid')[0].ej2_instances[0];
        nationalIdentityGrid = $('#NationalIdentitiesGrid')[0].ej2_instances[0];
        $('#empNationality').on('change', function () {
            let ties = dictionaryValueTypes.filter(function (x) { return x.id == $('#empNationality').val() });
            if (ties.length == 0) return;
            let nationality = ties[0].value;
        let accordion = $('#identityInfoAccordion')[0].ej2_instances[0];

        try {
            console.log(nationality);
            if (nationality.includes('Saudi')) {
                accordion.hideItem(0, true);
                accordion.hideItem(1, false);
                let value = dictionaryValueTypes.filter(function (x) { return x.value.includes('National Identity') })[0].id;
                //nationalIdentitiesGrid.columns[1].value = value;
                $('#empNationalIdentityTypeId').multiselect('select', value);
                $('#natIdNumberField').text('National ID Number:');
                isNotNational = false;
            }
            else if (nationality.includes('UAE') ||
                nationality.includes('United Arab Emirates') ||
                nationality.includes('Bahrain') ||
                nationality.includes('Qatar') ||
                nationality.includes('Oman') ||
                nationality.includes('Kuwait')) {

                accordion.hideItem(0, true);
                accordion.hideItem(1, false);
                let value = dictionaryValueTypes.filter(function (x) { return x.value.includes('GCC') })[0].id;
                //nationalIdentitiesGrid.columns[1].value = value;

                $('#empNationalIdentityTypeId').multiselect('select', value);
                $('#natIdNumberField').text('GCC ID Number:');
                isNotNational = false;
            }
            else {
                accordion.hideItem(0, false);
                accordion.hideItem(1, true);
                let value = dictionaryValueTypes.filter(function (x) { return x.value.includes('Iqama') })[0].id;
                //nationalIdentitiesGrid.columns[1].value = value;
                $('#empNationalIdentityTypeId').multiselect('select', value);
                isNotNational = true;
            }
        }
        catch (ex) {
            console.log({ nationality, ex });
        }
    });

    passportTravelGrid = $('#PassportTravelsGrid')[0].ej2_instances[0];

    emailAddressesGrid = $('#EmailAddressesGrid')[0].ej2_instances[0];
    loadDictionaryValues(ValueTypeModules.EmailType, [emailAddressesGrid], [1]);

    phoneAddressesGrid = $('#PhoneAddressesGrid')[0].ej2_instances[0];
    loadDictionaryValues(ValueTypeModules.PhoneType, [phoneAddressesGrid], [1]);

    homeAddressesGrid = $('#HomeAddressesGrid')[0].ej2_instances[0];
    loadDictionaryValues(ValueTypeModules.AddressType, [homeAddressesGrid], [1]);

    emergencyContactsGrid = $('#EmergencyContactsGrid')[0].ej2_instances[0];


    dependantsGrid = $('#DependantsGrid')[0].ej2_instances[0];
    dependantBiosGrid = $('#DependantsBiosGrid')[0].ej2_instances[0];
    dependantNationalIndentitiesGrid = $('#DependantsNationalIdentitiesGrid')[0].ej2_instances[0];
    dependantPassportTravelDocsGrid = $('#DependantsPassportTravelDocsGrid')[0].ej2_instances[0];


    oSJobsGrid = $('#JobsGrid')[0].ej2_instances[0];

    compBenefitsGrid = $('#BenefitsGrid')[0].ej2_instances[0];
    cashPaymentTypesGrid = $('#CashPaymentTypesGrid')[0].ej2_instances[0];
    chequePaymentTypesGrid = $('#ChequePaymentTypesGrid')[0].ej2_instances[0];
    bankPaymentTypesGrid = $('#BankPaymentTypesGrid')[0].ej2_instances[0];
    payslipsGrid = $('#PayslipsGrid')[0].ej2_instances[0];


    academiaProfileGrid = $('#AcademiaGrid')[0].ej2_instances[0];
    skillsProfileGrid = $('#SkillsGrid')[0].ej2_instances[0];


    loansGrid = $('#LoansGrid')[0].ej2_instances[0];

        loadDictionaryValues(ValueTypeModules.IDType, [nationalIdentityGrid, dependantNationalIndentitiesGrid], [1, 2], ['#empNationalIdentityTypeId'], function () {
            $('#empNationalIdentityTypeId').multiselect('disable');
        });

    loadDictionaryValues(ValueTypeModules.Country,
        [passportTravelGrid, homeAddressesGrid, emergencyContactsGrid, dependantsGrid, dependantsGrid, dependantPassportTravelDocsGrid, bankPaymentTypesGrid],
        [2, 8, 11, 'birthCountryId', 'nationalityId', 'issuingCountryId', 7],
        ['#empBirthCountry', '#empNationality'], function (data) {
            if (isEditingEmployee) {
                $('#empNationality').multiselect('select', curEmployee.nationalityId)
                $('#empCountry').multiselect('select', curEmployee.countryId)
            }
            $('#empNationality').change()
        });

    loadDictionaryValues(ValueTypeModules.Relationship, [emergencyContactsGrid, dependantsGrid], [1, 5], [], function (data) {
        filterCategory = data;
        multiselectComp.dataSource = filterCategory;
    });

    loadDictionaryValues(ValueTypeModules.Gender, [], [], ['#empGender']);
    loadDictionaryValues(ValueTypeModules.MaritalStatus, [], [], ['#empMaritalStatus']);
    loadDictionaryValues(ValueTypeModules.Language, [], [], ['#empPreferredLanguage']);
        loadDictionaryValues(ValueTypeModules.Salutation, [], [], ['#empTitle']);

    loadDictionaryValues(ValueTypeModules.Bank, [bankPaymentTypesGrid], [1]);

    loadDictionaryValues(ValueTypeModules.OrganizationPositionJobEmployeeClasses, [oSJobsGrid], ['employeeClassId']);
    loadDictionaryValues(ValueTypeModules.OrganizationPositionJobContractTypes, [oSJobsGrid], ['contractTypeId']);

    //loadDictionaryValues(ValueTypeModules.CostCenter, [cashPaymentTypesGrid], ['collectionLocationId'], ['#empCostCenter']);

    loadDictionaryValues(ValueTypeModules.LoanType, [loansGrid], [1]);

    loadDictionaryValues(ValueTypeModules.CostCenter, [], [], ['#empCostCenter']);
    loadDictionaryValues(ValueTypeModules.EmployeeGroup, [], [], ['#empEmployeeGroup']);
    loadDictionaryValues(ValueTypeModules.EmployeeSubGroup, [], [], ['#empEmployeeSubGroup']);
        loadDictionaryValues(ValueTypeModules.EmploymentType, [], [], ['#empEmploymentType']);

    loadDictionaryValues(ValueTypeModules.AcademicInstitution, [academiaProfileGrid], ['instituteId']);

    loadDictionaryValues(ValueTypeModules.Timezone, [], [], ['#empT_Timezone']);
    //loadDictionaryValues(ValueTypeModules., [academiaProfileGrid], ['instituteId']);

    let payGradesGridsArr = [oSJobsGrid];
    let payGradesGridsColsArr = ['payGradeId'];
    let payGradesMultiselectsArr = ['#empCBS_PayGrade'];

    loadCodeNameTypes(cERP.appServices.hR.organizationalManagement.payrollStructure.pS_PaySubGroup.getAllPaySubGroups, [], [], ['#empCBS_PaySubGroup']);

    loadCodeNameTypes(cERP.appServices.hR.organizationalManagement.payrollStructure.pS_PayGrade.getAllPayGrades, payGradesGridsArr, payGradesGridsColsArr, payGradesMultiselectsArr);

    loadCodeNameTypes(cERP.appServices.hR.organizationalManagement.payrollStructure.pS_PayComponentType.getAllPayComponentTypes, [compBenefitsGrid], ['payComponent.payComponentTypeId'], [], undefined, undefined,
        function (data) {
        console.log('LOADED COMPONENT TYPES');
        if (isEditingEmployee && curEmployee && curEmployee.employeeBenefits.length > 0 && !loadedCompBenefits) {
            console.log('SETTING AT RANDEVU 2');
            let clonedData = curEmployee.employeeBenefits;
            compBenefitsGrid.dataSource = clonedData;
            console.log({ curEmployee, org: clonedData, set: compBenefitsGrid.dataSource });
            compBenefitsGrid.refresh();
            loadedCompBenefits = true;
        }
    });
    //loadCodeNameTypes(cERP.appServices.hR.organizationalManagement.payrollStructure.pS_PayComponentType.getAllPayComponentTypes, [compBenefitsGrid], ['payComponentTypeId']);

        loadCodeNameTypes(cERP.appServices.setup.companySetup.company.getAllCompanies, [], [], ['#empCompany', '#empIqamaSponsorLegalEntitiesId'], 'clientID', 'companyName', function () {
            if (isEditingEmployee && typeof curEmployee != 'undefined' && $('#empCompany').val() != curEmployee.legalEntityId)
            {
                $('#empCompany').multiselect('deselectAll');
                $('#empCompany').multiselect('select', curEmployee.legalEntityId);
                $('#empCompany').multiselect('refresh');
                $('#empCompany').change();

                loadedOrgStructureInfo = true;
            }
            else
            {
                $('#empCompany').change();
            }
        });

    //loadCodeNameTypes(cERP.appServices.hR.organizationalManagement.organizationStructure.oS_OrganizationStructureTemplate.getAllOrganizationStructureTemplates, [], ['#empCompany']);

    $('#empCompany').on('change', function (x) {
        let lEId = $('#empCompany').val();


        let orgStructureGridsArr = [];
        let orgStructureGridsColsArr = [];
        let orgStructureMultiselectsArr = [];
        let orgStructureLEMultiselectsArr = [];
        $.each(orgStructureGridsArr, function (i, x) { x.showSpinner(); });
        cERP.appServices.hR.organizationalManagement.organizationStructure.oS_OrganizationStructureTemplate.getOrganizationStructureTemplateByCompany(lEId).done(function (data) {
            if (!data) return;
            $.each(orgStructureGridsArr, function (i, x) { x.hideSpinner(); });

            codeNameTypes.removeIf(function (x) { data.id == x.id });
            codeNameTypes = codeNameTypes.concat(data);

            curOrgStructure = data;

            //allOrgLegalEntities = allOrgStructures.map(function (x) { x.legalEntity });
            //allBUs = allOrgStructures.map(function (x) { x.organizationStructureTemplateBusinessUnits });
            //allDivisions = allOrgStructures.map(function (x) { x.organizationStructureTemplateDivisions });
            //allDepartments = allOrgStructures.map(function (x) { x.organizationStructureTemplateDepartments });

            $.each(orgStructureGridsArr, function (i, x) { populateCodeNameTypes(data, x, orgStructureGridsColsArr[i]) });
            if (orgStructureMultiselectsArr.length > 0)
            $.each(orgStructureMultiselectsArr, function (i, x) { populateMSCodeNameTypes(data, x) });

            $.each(orgStructureLEMultiselectsArr, function (i, x) { populateMSCodeNameTypes(allOrgLegalEntities, x) });

            let bUs = curOrgStructure.organizationStructureTemplateBusinessUnits.map(function (x) {
                return x.businessUnitTemplate;
            });
            //let dIvs = curOrgStructure.organizationStructureTemplateDivisions.map(function (x) {
            //    return x.divisionTemplate;
            //});
            //let dEps = curOrgStructure.organizationStructureTemplateDepartments.map(function (x) {
            //    return x.departmentTemplate;
            //});

            let orgStructureBUMultiselectsArr = ['#empBU'];
                        $.each(orgStructureBUMultiselectsArr, function (i, x) { populateMSCodeNameTypes(bUs, x) });
            //let orgStructureDIVMultiselectsArr = ['#empDIV'];
            //            $.each(orgStructureDIVMultiselectsArr, function (i, x) { populateMSCodeNameTypes(dIvs, x) });
            //let orgStructureDEPMultiselectsArr = ['#empDEP'];
            //            $.each(orgStructureDEPMultiselectsArr, function (i, x) { populateMSCodeNameTypes(dEps, x) });

            if (isEditingEmployee) $('#empBU').val(curEmployee.organizationStructureTemplateBusinessUnitId);
            $('#empBU').change();
            //if (!curOrgStructure) return;
            //let posManDG = $('#PosManagementDiagram')[0].ej2_instances[0];
            let diagramDS = {};
            let ds = JSON.parse(curOrgStructure.extraProperties['Structure'][0]);
            let indegree0 = ds.filter(function (x) { return typeof x.parentId == 'undefined' || x.parentId == null });
            for (var i = 0; i < indegree0.length; i++) {
                let curNode = indegree0[i];
                if (i == 0) {
                    diagramDS = {
                        id: curNode.id,
                        type: curNode._unit.unitType,
                        name: curNode._unit.name,
                        children: []
                    };
                }

                let children = getAllChildren(ds, curNode);
                diagramDS.children = children;
            }
            $ocJs.init({ pan: true, parentNodeSymbol: '', data: diagramDS, nodeTitle: 'type', nodeContent: 'name' });
            //posManDG.nodes = [];
            //posManDG.connectors = [];
            //posManDG.dataSourceSettings.dataSource.dataSource.data = diagramDS;
            //posManDG.refresh();
        });
    });
        $('#empBU').on('change', function (x) {
let bUId = $('#empBU').val();

let bU = curOrgStructure.organizationStructureTemplateBusinessUnits.filter(function (x) {
    return x.businessUnitTemplateId == bUId;
})[0];

            console.log('bu');
            console.log(bU);
            if (!bU) return;

            cERP.appServices.hR.organizationalManagement.organizationStructure.oS_OrganizationStructureTemplate.getBusinessUnit(bU.id, curOrgStructure.id).done(function (data) {
curBU = data;

let dIvs = curBU.organizationStructureTemplateDivisions.map(function (x) {
    return x.divisionTemplate;
});
let dEps = curBU.organizationStructureTemplateDepartments.map(function (x) {
    return x.departmentTemplate;
});

let orgStructureDIVMultiselectsArr = ['#empDIV'];
                $.each(orgStructureDIVMultiselectsArr, function (i, x) { populateMSCodeNameTypes(dIvs, x) });
let orgStructureDEPMultiselectsArr = ['#empDEP'];
                $.each(orgStructureDEPMultiselectsArr, function (i, x) { populateMSCodeNameTypes(dEps, x) });

                if (isEditingEmployee) {
                    $('#empDIV').multiselect('deselectAll');
                    $('#empDIV').multiselect('select', curEmployee.organizationStructureTemplateDivisionId);
                    $('#empDIV').multiselect('refresh');
                }
                $('#empDIV').change();
});
        });
        $('#empDIV').on('change', function (x) {
let divId = $('#empDIV').val();

let div;
if (curBU) {
    div = curBU.organizationStructureTemplateDivisions.filter(function (x) {
        return x.divisionTemplateId == divId;
    })[0];
            } else {
                div = curOrgStructure.organizationStructureTemplateDivisions.filter(function (x) {
                    return x.divisionTemplateId == divId;
                })[0];
            }

            console.log(div);
            if (!div) return;
            cERP.appServices.hR.organizationalManagement.organizationStructure.oS_OrganizationStructureTemplate.getDivision(div.id, curBU ? curBU.id : 0, curOrgStructure.id).done(function (data) {
curDiv = data;

//let dIvs = curDiv.organizationStructureTemplateDivisions.map(function (x) {
//    return x.divisionTemplate;
//});
let dEps = curDiv.organizationStructureTemplateDepartments.map(function (x) {
    return x.departmentTemplate;
});

let orgStructureDEPMultiselectsArr = ['#empDEP'];
                $.each(orgStructureDEPMultiselectsArr, function (i, x) { populateMSCodeNameTypes(dEps, x) });

                if (isEditingEmployee) {
                    $('#empDEP').multiselect('deselectAll');
                    $('#empDEP').multiselect('select', curEmployee.departmentTemplateId);
                    $('#empDEP').multiselect('refresh');
                }
                console.log('changing');
                $('#empDEP').change();
});

        });
        $('#empDEP').on('change', function (x) {
let depId = $('#empDEP').val();

let dep;
if (curDiv) {
    dep = curDiv.organizationStructureTemplateDepartments.filter(function (x) {
        return x.departmentTemplateId == depId;
    })[0];
}
else {
                dep = curOrgStructure.organizationStructureTemplateDepartments.filter(function (x) {
                    return x.departmentTemplateId == depId;
                })[0];
            }

            console.log(dep);
            if (!dep) return;
            let location = curBU.location;
console.log(location);
            let orgStructureDEPLocMultiselectsArr = ['#empLOC'];
            $.each(orgStructureDEPLocMultiselectsArr, function (i, x) { populateMSCodeNameTypes([location], x, 'locationCode', 'locationName') });

            codeNameTypes.removeIf(function (x) { return [location].filter(function (y) { return y.id == x.id }).length > 0 })
            codeNameTypes = codeNameTypes.concat([{ ...location, code: location.locationCode, name: location.locationName }]);

            $.each([cashPaymentTypesGrid], function (i, x) { populateCodeNameTypes([location], x, 'collectionLocationId', 'locationCode', 'locationName') });
            //cERP.appServices.hR.organizationalManagement.organizationStructure.oS_OrganizationStructureTemplate.getDepartment(dep.id, curBU ? curBU.id : 0, curDiv ? curDiv.divisionTemplateId : 0, curOrgStructure.id).done(function (data) {
            //    curDep = data;

            //    //let dIvs = curDiv.organizationStructureTemplateDivisions.map(function (x) {
            //    //    return x.divisionTemplate;
            //    //});
            //    let location = curDep.location;
            //    console.log(location);
            //    let orgStructureDEPLocMultiselectsArr = ['#empLOC'];
            //    $.each(orgStructureDEPLocMultiselectsArr, function (i, x) { populateMSCodeNameTypes([location], x, 'locationCode', 'locationName') });
            //});
        });

        $('#empCBS_PaySubGroup').on('change', function () {
let curPGID = $('#empCBS_PaySubGroup').val();

//loadCodeNameTypes(cERP.appServices.hR.organizationalManagement.payrollStructure.pS_PayGrade.getAllPayGradesByGroup , [], ['#empCBS_PayGrade']);
});

        $('#firstName').on('keyup', function () {
let firstName = $('#firstName').val();
let middleName = $('#middleName').val();
let lastName = $('#lastName').val();
            $('#headerName').text(firstName + ' ' + middleName + ' ' + lastName);
});
        $('#middleName').on('keyup', function () {
let firstName = $('#firstName').val();
let middleName = $('#middleName').val();
let lastName = $('#lastName').val();
            $('#headerName').text(firstName + ' ' + middleName + ' ' + lastName);
});
        $('#lastName').on('keyup', function () {
let firstName = $('#firstName').val();
let middleName = $('#middleName').val();
let lastName = $('#lastName').val();
            $('#headerName').text(firstName + ' ' + middleName + ' ' + lastName);
});

        $('#submitEmployeeBtn').on('cliyck', function () {
console.log('CUSTOM STUFF');
let data = '{"FirstName":"Hamza","FirstNameLocalized":"ھمزا","MiddleName":"Muhammad","MiddleNameLocalized":"مھمد","LastName":"Abdullah","LastNameLocalized":"ابدللھ","Title":"Mr.","Initials":"HA","PreferredName":"Hamza","DisplayName":"Hamza","GenderId":"f127dd99-b242-1416-735d-39f58cf17825","MaritalStatusId":"e1aaa7ad-5278-3fce-1d97-39f58cf1dd99","MarriedSince":"","PreferredLanguageId":"af7acc76-66f6-7471-91f6-39f50f387c4c","NationalityId":"af7acc76-66f6-7471-91f6-39f50f387c4c","DateOfBirth":"2000-10-12","BirthCountryId":"c927ad21-0692-cfce-2b6e-39f50f326ba7","PlaceOfBirth":"Hafr Al-Batin","nationalIdentities":[{"nationalIdentity":{"id":35,"idTypeId":"6f827849-c272-07b6-3a8f-39f58ae17940","idNumber":"416511651514","validityFromDate":"2020-06-02T19:00:00.000Z","validityToDate":"2020-06-18T19:00:00.000Z","isPrimary":true,"attachment":[{"name":"Business-Event-Invitation-Template.jpg","rawFile":{},"size":38408,"status":"Ready to upload","type":"jpg","validationMessages":{"minSize":"","maxSize":""},"statusCode":"1","id":"Business-Event-Invitation-Template_466.jpg","list":{},"input":{}}],"files":[{"name":"Business-Event-Invitation-Template.jpg","rawFile":{},"size":38408,"status":"Ready to upload","type":"jpg","validationMessages":{"minSize":"","maxSize":""},"statusCode":"1","id":"Business-Event-Invitation-Template_466.jpg","list":{},"input":{}}]}}],"passportTravelDocuments":[{"passportTravelDocument":{"id":38,"documentTypeId":"Travel","issuingCountryId":"c927ad21-0692-cfce-2b6e-39f50f326ba7","documentNumber":"614511116","validityFromDate":"2020-05-31T19:00:00.000Z","validityToDate":"2020-06-24T19:00:00.000Z","isPrimary":true,"attachment":[{"name":"FBLogo.jpg","rawFile":{},"size":13137,"status":"Ready to upload","type":"jpg","validationMessages":{"minSize":"","maxSize":""},"statusCode":"1","id":"FBLogo_720.jpg","list":{},"input":{}}],"files":[{"name":"FBLogo.jpg","rawFile":{},"size":13137,"status":"Ready to upload","type":"jpg","validationMessages":{"minSize":"","maxSize":""},"statusCode":"1","id":"FBLogo_720.jpg","list":{},"input":{}}]}}],"emailAddresses":[{"emailAddress":{"id":80,"emailTypeId":"ac4c349f-6d4e-f633-d68e-39f58c527cec","email":"monosoft54@gmail.com","isPrimary":true}}],"phoneAddresses":[{"phoneAddress":{"id":29,"phoneTypeId":"47ac09b5-edcc-3711-9df1-39f58c52d7e2","phoneNumber":"5651615615615","extention":"1521","isPrimary":true}}],"homeAddresses":[{"homeAddress":{"id":58,"addressTypeId":"97ffc61a-e4e4-f8c3-8056-39f58c538b7a","regularAddress":true,"addressLine1":"gedgreg","addressLine2":"rwthrth","city":"Islamabad","state":"Punjab","postalCode":"03210","countryId":"af7acc76-66f6-7471-91f6-39f50f387c4c","isPrimary":true}}],"contacts":[{"contact":{"id":47,"relationshipTypeId":"d0a26a2f-fb42-e90c-8673-39f58c53d76e","name":"fdgjk","phoneNumber":"415354354","emailAddress":"gttgfdf@hgh","alternatePhone":"42745685","addressLine1":"hgh","addressLine2":"jugh","city":"fhfgh","state":"jukufy","postalCode":"56","countryId":"af7acc76-66f6-7471-91f6-39f50f387c4c","isPrimary":true}}],"CompanyId":"20dd3c2a-7c97-baee-6b96-39f59a2dd75a","OrganizationStructureTemplateId":"1043", "OrganizationStructureTemplateBusinessUnitId":"1","OrganizationStructureTemplateDivisionId":"1","DepartmentTemplateId":"8","LocationId":"b41b15c1-2cc9-e0bd-fa88-39f51684eff7","CostCenterId":"fd094f6e-256e-eba1-0a9f-39f53f405157","PaySubGroupId":"8","PayGradeId":"8","employeeBenefits":[{"id":74, "payComponent":{ "payComponentTypeId":7, "payComponentType":{"id":7,"valueTypeDescription":"Percentage","valueComponentTypeId":6}, "payFrequencyId":4 }, "payComponentId":3,"payComponentComponentTypeAmount":0,"validityFromDate":"2020-06-02T19:00:00.000Z","validityToDate":"2020-06-23T19:00:00.000Z"}],"cashPaymentTypes":[{"id":28,"collectionLocationId":"b41b15c1-2cc9-e0bd-fa88-39f51684eff7","validityFromDate":"2020-06-02T19:00:00.000Z","validityToDate":"2020-06-16T19:00:00.000Z","isPrimary":true}],"chequePaymentTypes":[{"id":89,"nameOnCheque":"fgtghtr","validityFromDate":"2020-06-02T19:00:00.000Z","validityToDate":"2020-06-17T19:00:00.000Z","isPrimary":true}],"bankPaymentTypes":[{"id":79,"bankNameId":"41924827-3eb4-2a75-8e9f-39f5906ec2cb","bankAccountName":"hsrth","bankAccountNumber":"478484","bankIBAN":"48944494","bankAddress":"gthrtsh","city":"srthtr","countryId":"af7acc76-66f6-7471-91f6-39f50f387c4c","validityFromDate":"2020-06-03T19:00:00.000Z","validityToDate":"2020-06-11T19:00:00.000Z","isPrimary":true}],"TimezoneId":"9d207390-9eeb-398e-1cc5-39f5a5dc0a68","HiringDate":"","YearlyTimeOffAllowance":"54","academiaProfile":[{"id":35,"academicTypeDescription":"External","instituteId":"d010e3c8-3e06-6033-3591-39f53ef99743","academiaCertificateTypeDescription":"Education","academiaCertificateSubTypeId":"d115236a-4ce1-3460-32bd-39f595c438b6","description":"hsryhrt"}],"skillsProfile":[{"skillAquisitionTypeDescription":"External","skillTypeDescription":"Type II","skillSubTypeId":"8bcdfa17-9139-5ea5-e3d0-39f595c513fe","description":"rsthtrh"}],"employeeLoans":[{"id":51,"loanTypeId":"e9bdc389-03bb-35a9-bfaf-39f5909a22fb","name":"hsrth","validityFromDate":"2020-06-02T19:00:00.000Z","validityToDate":"2020-06-24T19:00:00.000Z","amount":"5464546","loanStatusId":"Active"}]}'
            let identityInfo = {
                nationalIdentities: nationalIdentityGrid.dataSource,
                passportTravelDocs: passportTravelGrid.dataSource
            };
let isIdentityI = {
                isNationalIdentity: identityInfo.nationalIdentities.length > 0,
                isPassportTravelDocs: identityInfo.passportTravelDocs.length > 0
            }
            //if (isIdentityI.isNationalIdentity && isIdentityI.isPassportTravelDocs) {
            //    empPersonalInformation.identityInfo = identityInfo;
            //}

console.log('------------');
            console.log('dependantsInfo');
            let dependantsInfo = dependantsGrid.dataSource;
//let dependantsBioInfo = dependantBiosGrid.dataSource;
let dependantsNatIdsInfo = dependantNationalIndentitiesGrid.dataSource;
let dependantsPassportIdsInfo = dependantPassportTravelDocsGrid.dataSource;
let isDependantsInfo = { issueDependants: [] };
            for (var i = 0; i < dependantsInfo.length; i++) {
                console.log('----DEP---');
                let dependant = dependantsInfo[i];
                let dependantId = dependant.id;

console.log('----DEP-S---');
                console.log(dependant);

                //let dependantBios = dependantsBioInfo.filter(function (x) { return x.dependantId == dependantId });
                //let isBio = dependantBios.length > 0;

                //console.log('----DEP-BS---');
                //console.log(dependantBios);
                //console.log(isBio);

                let dependantNatIds = dependantsNatIdsInfo.filter(function (x) { return x.dependantId == dependantId });
                let isNatID = dependantNatIds.length > 0;

console.log('----DEP-NI---');
                console.log(dependantNatIds);
                console.log(isNatID);

                let dependantPassportTravelIds = dependantsPassportIdsInfo.filter(function (x) { return x.dependantId == dependantId });
                let isPassportTravelID = dependantPassportTravelIds.length > 0;

console.log('----DEP-PTI---');
                console.log(dependantPassportTravelIds);
                console.log(isPassportTravelID);

                if (!isNatID || !isPassportTravelID)
                    isDependantsInfo.issueDependants.push({ id: dependantId, isNatID, isPassportTravelID });

                //dependant = { ...dependant };
                dependant.nationalIdentities = dependantNatIds.map(function (x) { return { nationalIdentity: x } });
                dependant.passportTravelDocuments = dependantPassportTravelIds.map(function (x) { return { passportTravelDocument: x } });

                dependantsInfo[i] = dependant;
                console.log('----DEP-E---');
                console.log(dependant);
            }
            //if (isDependantsInfo.issueDependants.length == 0) {
            //    empPersonalInformation.dependantsInfo = dependantsInfo;
            //}
            console.log(isDependantsInfo);

            if (isEditingEmployee) data.id = curEmployee.id;
            let employeeVM = JSON.parse(data);
employeeVM.dependants = dependantsInfo;
            employeeVM.nationalIdentities = identityInfo.nationalIdentities.map(function (x) { return { nationalIdentity: x } });
            employeeVM.passportTravelDocuments = identityInfo.passportTravelDocs.map(function (x) { return { passportTravelDocument: x } });

            let formData = new FormData();
let profilePic = $('#profileImageUpload')[0].files[0];
            let bioAttachment = $('#bioAttachment')[0].files[0];
            formData.append("general", JSON.stringify(employeeVM));
            formData.append("ProfilePicture", profilePic);
            formData.append("BioAttachment", bioAttachment);

            for (var i = 0; i < employeeVM.nationalIdentities.length; i++) {
                let object = employeeVM.nationalIdentities[i].nationalIdentity;
                if(typeof object.files !== 'undefined' && object.files.length > 0)
                    formData.append(`ENatId_${object.id}_Attachment`, object.files[0].rawFile);
            }
            for (var i = 0; i < employeeVM.passportTravelDocuments.length; i++) {
                let object = employeeVM.passportTravelDocuments[i].passportTravelDocument;
                if (typeof object.files !== 'undefined' && object.files.length > 0)
                    formData.append(`EPTD_${object.id}_Attachment`, object.files[0].rawFile);
            }

            for (var i = 0; i < dependantsNatIdsInfo.length; i++) {
                let object = dependantsNatIdsInfo[i];
                if (typeof object.files !== 'undefined' && object.files.length > 0)
                    formData.append(`DNatId_${object.dependantId}_${object.id}_Attachment`, object.files[0].rawFile);
            }
            for (var i = 0; i < dependantsPassportIdsInfo.length; i++) {
                let object = dependantsPassportIdsInfo[i];
                if(typeof object.files !== 'undefined' && object.files.length > 0)
                    formData.append(`DPTD_${object.dependantId}_${object.id}_Attachment`, object.files[0].rawFile);
            }


            formData.append("__RequestVerificationToken", $('input:hidden[name="__RequestVerificationToken"]').val());
            console.log('-----------------------------------------------------');
            console.log(formData);

            Swal.showLoading();
            $.ajax({
                url: "",
                async: true,
                type: "POST",
                data: formData,
                contentType: false,
                processData: false,
                success: function (data) {
                    Swal.hideLoading();
                    if (isEditingEmployee)
                        swal.fire("Success", "Employee has successfully been updated", "success");
                    else
                        swal.fire("Success", "Employee has successfully been created", "success");
                },
                error: function (err) {
                    Swal.hideLoading();
                    if (isEditingEmployee)
                        swal.fire("Failed", "Employee couldn't be updated, please fix all errors and try again.", "error");
                    else
                        swal.fire("Failed", "Employee couldn't be created, please fix all errors and try again.", "error");

                    console.log("ERROR" + err);
                }
            })
        })
        $('#submitEmployeeBtn').on('click', function () {
            Swal.showLoading();


            console.log('-----------------------------------------------------');
            let employeeData = {};
            console.log('-----------------------------------');
            console.log('empPersonalInformation');
            let empPersonalInformation = {};

            console.log('------------');
            console.log('generalInfo');
            let generalInfo;
            let isGI = ValidateForm('generalInfoTab');
            if (isGI) {
                let details = $('#generalInfoTab').find("textarea, input, select").serializeArray();
                generalInfo = objectifyForm(details);

                empPersonalInformation.generalInfo = generalInfo;
            }
            else {
                Swal.hideLoading();

                if (isEditingEmployee)
                    swal.fire("Failed", "Employee couldn't be created, please fix all errors and try again.", "error");
                else
                    swal.fire("Failed", "Employee couldn't be created, please fix all errors and try again.", "error");

                let items = $('#employeeMainTabs')[0].ej2_instances[0].items;
                let item = items.filter(function (x) { return x.content.includes('personalInfoTab') })[0];
                let itemIndex = items.indexOf(item);

                $('#employeeMainTabs')[0].ej2_instances[0].select(itemIndex);

                let subItems = $('#personalInfoTabs')[0].ej2_instances[0].items;
                let subItem = subItems.filter(function (x) { return x.content.includes('generalInfoTab') })[0];
                let subItemIndex = subItems.indexOf(subItem);
                $('#personalInfoTabs')[0].ej2_instances[0].select(subItemIndex);
            }

            console.log('------------');
            console.log('bioInfo');
            let bioInfo;
            let isBI = ValidateForm('bioInfoTab');
            if (isBI) {
                let details = $('#bioInfoTab').find("textarea, input, select").serializeArray();
                bioInfo = objectifyForm(details);

                empPersonalInformation.bioInfo = bioInfo;
            }

            let disabilityInfo = {
                disabilities: disabilitiesGrid.dataSource.map(function (x) { return { disability: { ...x } }}),
            };
            //let isIdentityI = {
            //    isNationalIdentity: identityInfo.nationalIdentities.length > 0,
            //    isPassportTravelDocs: identityInfo.passportTravelDocs.length > 0
            //}
            //if (isIdentityI.isNationalIdentity && isIdentityI.isPassportTravelDocs) {
            //    empPersonalInformation.identityInfo = identityInfo;
            //}
            empPersonalInformation.disabilityInfo = disabilityInfo;

            let identityDetails = $('#identityInfoTab').find("textarea, input, select").serializeArray();
            let identityInfo = {
                raw: objectifyForm(identityDetails),
                nationalIdentities: nationalIdentityGrid.dataSource.map(function (x) { return { ...x }}),
                iqamaNumberValidities: iqamaRenewValidityGrid.dataSource.map(function (x) { return { ...x }}),
                iqamaLabourOfficeValidities: labourOfficeRenewValidityGrid.dataSource.map(function (x) { return { ...x }}),
                passportTravelDocs: passportTravelGrid.dataSource.map(function (x) { return { ...x } })
            };
            let isIdentityI = {
                isNationalIdentity: identityInfo.nationalIdentities.length > 0,
                isPassportTravelDocs: identityInfo.passportTravelDocs.length > 0
            }
            empPersonalInformation.identityInfo = [];
            if (isIdentityI.isNationalIdentity && isIdentityI.isPassportTravelDocs) {
                empPersonalInformation.identityInfo = identityInfo;
            }

            let contactsInfo = {
                emailAddresses: emailAddressesGrid.dataSource,
                phoneNumbers: phoneAddressesGrid.dataSource,
                homeAddresses: homeAddressesGrid.dataSource,
                emergencyContacts: emergencyContactsGrid.dataSource
            };
            let isContactsInfo = {
                isEmailAddresses: contactsInfo.emailAddresses.length > 0,
                isPhoneNumbers: contactsInfo.phoneNumbers.length > 0,
                isHomeAddresses: contactsInfo.homeAddresses.length > 0,
                isEmergencyContacts: contactsInfo.emergencyContacts.length > 0
            }
            //isContactsInfo.isAll = isContactsInfo.isEmailAddresses && isContactsInfo.isPhoneNumbers && isContactsInfo.isHomeAddresses && isContactsInfo.isEmergencyContacts
            //if (isContactsInfo.isAll) {
            //    empPersonalInformation.contactsInfo = contactsInfo;
            //}
            empPersonalInformation.contactsInfo = contactsInfo;

            console.log('------------');
            console.log('dependantsInfo');
            let dependantsInfo = dependantsGrid.dataSource;
            //let dependantsBioInfo = dependantBiosGrid.dataSource;
            let dependantsNatIdsInfo = dependantNationalIndentitiesGrid.dataSource;
            let dependantsPassportIdsInfo = dependantPassportTravelDocsGrid.dataSource;
            let isDependantsInfo = { issueDependants: [] };
            for (var i = 0; i < dependantsInfo.length; i++) {
                console.log('----DEP---');
                let dependant = dependantsInfo[i];

                console.log('----DEP-S---');
                console.log(dependant);

                let dependantId = dependant.id;
                //let dependantBios = dependantsBioInfo.filter(function (x) { return x.dependantId == dependantId });
                //let isBio = dependantBios.length > 0;

                //console.log('----DEP-BS---');
                //console.log(dependantBios);
                //console.log(isBio);

                let dependantNatIds = dependantsNatIdsInfo.filter(function (x) { return x.dependantId == dependantId });
                let isNatID = dependantNatIds.length > 0;

                console.log('----DEP-NI---');
                console.log(dependantNatIds);
                console.log(isNatID);

                let dependantPassportTravelIds = dependantsPassportIdsInfo.filter(function (x) { return x.dependantId == dependantId });
                let isPassportTravelID = dependantPassportTravelIds.length > 0;

                console.log('----DEP-PTI---');
                console.log(dependantPassportTravelIds);
                console.log(isPassportTravelID);

                if (!isNatID || !isPassportTravelID)
                    isDependantsInfo.issueDependants.push({ id: dependantId, isNatID, isPassportTravelID });

                //dependant = { ...dependant };
                dependant.nationalIdentities = dependantNatIds.map(function (x) { return { nationalIdentity : x } });
                dependant.passportTravelDocuments = dependantPassportTravelIds.map(function (x) { return { passportTravelDocument : x } });

                dependantsInfo[i] = dependant;
                console.log('----DEP-E---');
                console.log(dependant);
            }
            empPersonalInformation.dependantsInfo = [];
            if (isDependantsInfo.issueDependants.length == 0) {
                empPersonalInformation.dependantsInfo = dependantsInfo;
            }
            console.log(isDependantsInfo);

            console.log(empPersonalInformation);
            employeeData.personalInformation = empPersonalInformation;

            console.log('-----------------------------------');
            console.log('empOrganizationalInformation');
            let empOrganizationalInformation = {};

            console.log('------------');
            console.log('structureInfo');
            let structureInfo;
            let isStructureI = ValidateForm('orgStructureInfoTab');
            empOrganizationalInformation.structureInfo = {};
            if (isStructureI) {
                let details = $('#orgStructureInfoTab').find("textarea, input, select").serializeArray();
                structureInfo = objectifyForm(details);
                structureInfo.OrganizationStructureTemplateId = curOrgStructure.id;
                empOrganizationalInformation.structureInfo = structureInfo;
            }

            console.log(empOrganizationalInformation);
            employeeData.organizationalInformation = empOrganizationalInformation;

            console.log('-----------------------------------');
            console.log('empCompensationInformation');
            let empCompensationInformation = {};

            console.log('------------');
            console.log('basicSalaryInfo');
            let basicSalaryInfo;
            let isBasicSalaryI = ValidateForm('basicSalaryTab');
            empCompensationInformation.basicSalaryInfo = {};
            if (isBasicSalaryI) {
                let details = $('#basicSalaryTab').find("textarea, input, select").serializeArray();
                basicSalaryInfo = objectifyForm(details);

                empCompensationInformation.basicSalaryInfo = basicSalaryInfo;
            }

            console.log('------------');
            console.log('benefitsInfo');
            let benefitsInfo = compBenefitsGrid.dataSource;
            let isBenefitsI = benefitsInfo.length > 0;
            empCompensationInformation.benefitsInfo = [];
            if (isBenefitsI) {
                empCompensationInformation.benefitsInfo = benefitsInfo;
            }

            console.log('------------');
            console.log('paymentDetailsInfo');
            let paymentDetailsInfo = {
                cashPaymentTypes: cashPaymentTypesGrid.dataSource,
                chequePaymentTypes: chequePaymentTypesGrid.dataSource,
                bankPaymentTypes: bankPaymentTypesGrid.dataSource
            };
            let isPaymentDetailsInfo = {
                isCashPaymentTypes: paymentDetailsInfo.cashPaymentTypes.length > 0,
                isChequePaymentTypes: paymentDetailsInfo.chequePaymentTypes.length > 0,
                isBankPaymentTypes: paymentDetailsInfo.bankPaymentTypes.length > 0
            }
            isPaymentDetailsInfo.isAll = true;//isPaymentDetailsInfo.isCashPaymentTypes && isPaymentDetailsInfo.isChequePaymentTypes && isPaymentDetailsInfo.isBankPaymentTypes && isPaymentDetailsInfo.isEmergencyPaymentDetails
            //if (isPaymentDetailsInfo.isAll) {
            //    empCompensationInformation.paymentDetailsInfo = paymentDetailsInfo;
            //}
            empCompensationInformation.paymentDetailsInfo = paymentDetailsInfo;

            console.log(empCompensationInformation);
            employeeData.compensationInformation = empCompensationInformation;

            console.log('-----------------------------------');
            console.log('empTimeInformation');
            let empTimeInformation = {};

            console.log('------------');
            console.log('timeGeneralInfo');
            let timeGeneralInfo;
            let isTGeneralI = ValidateForm('timeGeneralTab');
            if (isTGeneralI) {
                let details = $('#timeGeneralTab').find("textarea, input, select").serializeArray();
                timeGeneralInfo = objectifyForm(details);

                empTimeInformation.generalInfo = timeGeneralInfo;
            }

            console.log('------------');
            console.log('timeOffsInfo');
            let timeOffsInfo;
            let isTOffsI = ValidateForm('timeOffsTab');
            if (isTOffsI) {
                let details = $('#timeOffsTab').find("textarea, input, select").serializeArray();
                timeOffsInfo = objectifyForm(details);

                empTimeInformation.timeOffsInfo = timeOffsInfo;
            }

            console.log(empTimeInformation);
            employeeData.timeInformation = empTimeInformation;

            console.log('-----------------------------------');
            console.log('empAcademiaSkillsInformation');
            let empAcademiaSkillsInformation = {};

            console.log('------------');
            console.log('academiaInfo');
            let academiaInfo = academiaProfileGrid.dataSource;
            let isAcademiaI = academiaInfo.length > 0;
            empAcademiaSkillsInformation.academiaProfile = [];
            if (isAcademiaI) {
                empAcademiaSkillsInformation.academiaProfile = academiaInfo;
            }
            console.log('------------');
            console.log('skillsInfo');
            let skillsInfo = skillsProfileGrid.dataSource;
            let isSkillsI = skillsInfo.length > 0;
            empAcademiaSkillsInformation.skillsProfile = [];
            if (isSkillsI) {
                empAcademiaSkillsInformation.skillsProfile = skillsInfo;
            }

            console.log(empAcademiaSkillsInformation);
            employeeData.academiaSkillsInformation = empAcademiaSkillsInformation;


            console.log('-----------------------------------');
            console.log('empLoansInformation');
            let empLoansInformation = {};

            console.log('------------');
            console.log('loansInfo');
            let loansInfo = loansGrid.dataSource;
            let isLoansI = loansInfo.length > 0;
            empLoansInformation.loansInfo = [];
            if (isLoansI) {
                empLoansInformation.loansInfo = loansInfo;
            }

            console.log(empLoansInformation);
            employeeData.loansInformation = empLoansInformation;

            console.log('-----------------------------------------------------');
            console.log(employeeData);
            //console.log(JSON.stringify(employeeData));

            let formData = new FormData();
            let employeeVM = {
                ...employeeData.personalInformation.generalInfo,
                ...employeeData.personalInformation.bioInfo,
                ...employeeData.personalInformation.identityInfo.raw,
                nationalIdentityTypeId: $('#empNationalIdentityTypeId').val(),

                nationalIdentities: { primaryValidityAttachments: employeeData.personalInformation.identityInfo.nationalIdentities },
                iqamaNumberValidities: { primaryValidityAttachments: employeeData.personalInformation.identityInfo.iqamaNumberValidities },
                iqamaLabourOfficeValidities: { primaryValidityAttachments: employeeData.personalInformation.identityInfo.iqamaLabourOfficeValidities },
                passportTravelDocuments: employeeData.personalInformation.identityInfo.passportTravelDocs.map(function (x) { return { passportTravelDocument: x } }),

                emailAddresses: employeeData.personalInformation.contactsInfo.emailAddresses.map(function (x) { return { emailAddress: x } }),
                phoneAddresses: employeeData.personalInformation.contactsInfo.phoneNumbers.map(function (x) { return { phoneAddress: x } }),
                homeAddresses: employeeData.personalInformation.contactsInfo.homeAddresses.map(function (x) { return { homeAddress: x } }),
                contacts: employeeData.personalInformation.contactsInfo.emergencyContacts.map(function (x) { return { contact: x } }),

                dependants: employeeData.personalInformation.dependantsInfo,

                ...employeeData.organizationalInformation.structureInfo,

                ...employeeData.compensationInformation.basicSalaryInfo,
                employeeBenefits: employeeData.compensationInformation.benefitsInfo,
                employeeDisabilities: employeeData.personalInformation.disabilityInfo.disabilities,
                ...employeeData.compensationInformation.paymentDetailsInfo,

                ...employeeData.timeInformation.generalInfo,
                ...employeeData.timeInformation.timeOffsInfo,

                ...employeeData.academiaSkillsInformation,

                employeeLoans: employeeData.loansInformation.loansInfo,
            };
            employeeVM.employeeSponsorLegalEntities = [];
            if (isNotNational)
                employeeVM.employeeSponsorLegalEntities = $('#empIqamaSponsorLegalEntitiesId').val().map(function (x) { return { legalEntityId: x } });

            if (isEditingEmployee) employeeVM.id = curEmployee.id;
            let employee = JSON.stringify(employeeVM);
            console.log(employeeVM);

            let profilePic = $('#profileImageUpload')[0].files[0];
            let bioAttachment = $('#bioAttachment')[0].files[0];
            formData.append("general", employee);
            formData.append("ProfilePicture", profilePic);
            formData.append("BioAttachment", bioAttachment);

            for (var i = 0; i < employeeVM.nationalIdentities.primaryValidityAttachments.length; i++) {
                let object = employeeVM.nationalIdentities.primaryValidityAttachments[i];
                if (typeof object.files !== 'undefined' && object.files.length > 0)
                    formData.append(`ENatId_${object.id}_Attachment`, object.files[0].rawFile);
            }
            for (var i = 0; i < employeeVM.iqamaNumberValidities.primaryValidityAttachments.length; i++) {
                let object = employeeVM.iqamaNumberValidities.primaryValidityAttachments[i];
                if (typeof object.files !== 'undefined' && object.files.length > 0)
                    formData.append(`EIQN_${object.id}_Attachment`, object.files[0].rawFile);
            }
            for (var i = 0; i < employeeVM.iqamaLabourOfficeValidities.primaryValidityAttachments.length; i++) {
                let object = employeeVM.iqamaLabourOfficeValidities.primaryValidityAttachments[i];
                if (typeof object.files !== 'undefined' && object.files.length > 0)
                    formData.append(`EIQLN_${object.id}_Attachment`, object.files[0].rawFile);
            }
            for (var i = 0; i < employeeVM.passportTravelDocuments.length; i++) {
                let object = employeeVM.passportTravelDocuments[i].passportTravelDocument;
                if (typeof object.files !== 'undefined' && object.files.length > 0)
                    formData.append(`EPTD_${object.id}_Attachment`, object.files[0].rawFile);
            }

            for (var i = 0; i < dependantsNatIdsInfo.length; i++) {
                let object = dependantsNatIdsInfo[i];
                if (typeof object.files !== 'undefined' && object.files.length > 0)
                    formData.append(`DNatId_${object.dependantId}_${object.id}_Attachment`, object.files[0].rawFile);
            }
            for (var i = 0; i < dependantsPassportIdsInfo.length; i++) {
                let object = dependantsPassportIdsInfo[i];
                if (typeof object.files !== 'undefined' && object.files.length > 0)
                    formData.append(`DPTD_${object.dependantId}_${object.id}_Attachment`, object.files[0].rawFile);
            }


            formData.append("__RequestVerificationToken", $('input:hidden[name="__RequestVerificationToken"]').val());
            console.log('-----------------------------------------------------');
            console.log(formData);

            $.ajax({
                url: "",
                async: true,
                type: "POST",
                data: formData,
                contentType: false,
                processData: false,
                success: function (data) {
                    Swal.showLoading();
                    if (isEditingEmployee)
                        swal.fire("Success", "Employee has successfully been updated", "success");
                    else
                        swal.fire("Success", "Employee has successfully been created", "success");
                },
                error: function (err) {
                    Swal.showLoading();
                    if(isEditingEmployee)
                        swal.fire("Failed", "Employee couldn't be updated, please fix all errors and try again.", "error");
                    else
                        swal.fire("Failed", "Employee couldn't be created, please fix all errors and try again.", "error");

                    console.log("ERROR" + err);
                }
            })
        });

        //----------

        cardTemplateFn = ej.base.compile(document.getElementById('card_template').innerHTML.trim());
        var card;
        var cardEle;
        var data = [];
        var multiSelectData = [];
        var searchData = [];
        var searchValCount = 0;
        filterCategory = [];
        var emptyData = true;
        multiselectComp = new ej.dropdowns.MultiSelect({
            dataSource: filterCategory,
            fields: { text: 'value', value: 'id' },
            placeholder: 'Search by relationships',
            tagging: multiSelectFun,
            removed: multiSelectRemove,
        });
        multiselectComp.appendTo('#dependantsSelection');

        function multiSelectRemove(e) {
            var cardDa = searchData.length > 0 ? searchData : (multiSelectData.length > 0 ? multiSelectData : cardObj);
            if (multiselectComp.value && multiselectComp.value.length === 0 && searchValCount === 0) {
                multiSelectData = cardDa;
                destroyAllCard();
                cardRendering(cardObj);
            }
            else if (multiselectComp.value.length === 0 && searchValCount > 0) {
                searchFilter(document.getElementById('search_Card').value);
            }
            else if (multiselectComp.value.length === 0) {
                destroyAllCard();
                multiSelectData = cardDa;
                cardRendering(cardDa);
            }
            else {
                var keywords = e.itemData.Code.split(',');
                var dublicate_1;
                keywords.forEach(function (key) {
                    dublicate_1 = new ej.data.DataManager(cardObj).executeLocal(new ej.data.Query().where('cardImage.tag', 'Contains', key, true));
                    dublicate_1.forEach(function (da) {
                        if (cardDa.indexOf(da) !== -1) {
                            cardDa.splice(cardDa.indexOf(da), 1);
                        }
                    });
                    multiSelectData = cardDa;
                });
                destroyAllCard();
                cardRendering(multiSelectData);
            }
        }
        function multiSelectFun(e) {
            var keywords = e.itemData.id.split(',');
            var dublicate;
            var cardDa = searchData.length > 0 ? searchData : cardObj;
            if (multiselectComp.value && multiselectComp.value.length === 0 && searchValCount === 0) {
                multiSelectData = [];
            }
            keywords.forEach(function (key) {
                dublicate = new ej.data.DataManager(cardDa).executeLocal(new ej.data.Query().where('relationshipTypeId', 'equal', key, true));
                if (dublicate.length === 0) {
                    multiSelectData = [];
                    destroyAllCard();
                    return;
                }
                dublicate.forEach(function (da) {
                    if (multiSelectData.indexOf(da) === -1) {
                        multiSelectData.push(da);
                    }
                });
            });
            destroyAllCard();
            cardRendering(multiSelectData);
        }
        function searchFilter(key) {
            searchValCount = key.length;
            var predicate = new ej.data.Predicate('cardContent', 'Contains', key, true);
            predicate = predicate.or('cardImage.title', 'Contains', key, true)
                .or('header_title', 'Contains', key, true)
                .or('header_subtitle', 'Contains', key, true)
                .or('header_dateOfBirth', 'Contains', key, true)
                .or('header_placeOfBirth', 'Contains', key, true)
                .or('header_birthCountry', 'Contains', key, true);
            var cardDa = (multiSelectData.length > 0 && multiselectComp.value.length > 0) ? multiSelectData : cardObj;
            searchData = data = new ej.data.DataManager(cardDa).executeLocal(new ej.data.Query().where(predicate));
            destroyAllCard();
            cardRendering(data);
        }
        document.getElementById('search_Card').onkeyup = function (e) {
            if (e.code === 'Tab' || e.code === 'Escape' || e.code === 'ShiftLeft' || (e.code === 'Backspace' && emptyData)) {
                return;
            }
            var inputVal = e.target.value;
            /*jshint -W030 */
            inputVal.length === 0 ? emptyData = true : emptyData = false;
            searchFilter(inputVal);
        };
    });
        var filterCategory;
        var multiselectComp;
        var cardTemplateFn;
        function destroyAllCard() {
            var cards = document.querySelectorAll('.card-control-section .e-card');
            [].slice.call(cards).forEach(function (el) {
                ej.base.detach(el);
            });
        }
        function cardRendering(cardObj) {
            var errorContent = document.querySelector('.tile_layout .row.error');
            if (cardObj.length > 0) {
                errorContent.style.display = 'none';
                cardObj.forEach(function (data, index) {
                    card = cardTemplateFn(data);
                    cardEle = document.getElementById('card_sample_' + (++index));
                    if (cardEle) {
                        cardEle.appendChild(card[0]);
                    }
                });
            }
            else {
                errorContent.style.display = 'flex';
            }
        }
    </script>
}

<div class="site-content" style="background-color: rgb(253,253,253);">
    <div id="employeeHeader" class="EmployeeHeader">
        <div class="row" style="height: 100%; margin-left: 0; margin-right: 0">
            <div class="col-md-1 col-sm-1">

            </div>
            <div class="col-md-3 col-sm-4" style="
                    display: flex;
                    height: inherit;
                    justify-content: center;
                    flex-direction: column;
                    max-width: 220px;
                ">
                <div class="avatar-upload">
                    <div class="avatar-edit">
                        <input id="imageCancel" accept=".png, .jpg, .jpeg" onclick="removeImage(this);" />
                        <label id="remove" for="imageCancel"></label>
                        <input type='file' id="profileImageUpload" accept=".png, .jpg, .jpeg" onchange="showpreview(this);" />
                        <label id="upload" for="profileImageUpload"></label>
                    </div>
                    <div class="avatar-preview" style="border-radius: 50%">
                        @*<div id="imagePreview" style="background-image: url(/images/@(isEditing && employee != null? employee.ProfilePic : "noimage.jpg"));">
                            </div>*@
                        <img id="EmpPhoto" src="/Uploads/noimage.jpg" class="img-responsive padding-5" style="cursor:pointer; border-radius: 50%" />
                    </div>
                </div>
            </div>
            <div class="col-md-5 col-sm-5" style="
                    display: flex;
                    height: inherit;
                    justify-content: flex-start;
                    flex-direction: column;
                    max-width: 350px;
                    padding: 130px 10px;
                    font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    color: white">
                <h1 id="headerName" style="font-weight: 500"></h1>
                @*<h2>Lorem Ipsum</h2>*@
            </div>
            <div class="col-md-3 col-sm-3">

            </div>
            <div class="col-md-2 col-sm-2" style="  
                        display: flex;
                        height: 400px;
                        justify-content: flex-end;
                        flex-direction: column;
                        max-width: 350px;
                        padding: 90px 10px;
                        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                        color: white;">
                <div id="full-background">

                </div>
                <form>
                </form>
                <button id="submitEmployeeBtn" class="btn btn-primary btn-block" style="font-weight: 500">CREATE EMPLOYEE</button>
            </div>
        </div>

    </div>

    <ejs-tab id="employeeMainTabs" animation="horizontalAnimation" headerPlacement="Top" heightAdjustMode="Content" cssClass="customTab" overflowMode="Scrollable" created="mainTabCreated">
        <e-tab-tabitems>
            <e-tab-tabitem header="@(new TabHeader { Text = "PERSONAL INFORMATION" })" content="#personalInfoTab"></e-tab-tabitem>
            <e-tab-tabitem header="@(new TabHeader { Text = "EMPLOYMENT" })" content="#employmentInfoTabs"></e-tab-tabitem>
            <e-tab-tabitem header="@(new TabHeader { Text = "COMPENSATION" })" content="#compensationTab"></e-tab-tabitem>
            <e-tab-tabitem header="@(new TabHeader { Text = "TIME" })" content="#timeTab"></e-tab-tabitem>
            <e-tab-tabitem header="@(new TabHeader { Text = "ACADEMIA & SKILLS PROFILE" })" content="#academiaSkillsProfileTab"></e-tab-tabitem>
            <e-tab-tabitem header="@(new TabHeader { Text = "LOANS" })" content="#loansTab"></e-tab-tabitem>
        </e-tab-tabitems>
    </ejs-tab>

    <div id="employeeDataTabs">

        <div id="personalInfoTab" class="mainTab" style="display: none">
            <ejs-tab id="personalInfoTabs" animation="verticalAnimation" heightAdjustMode="None" overflowMode="Scrollable" headerPlacement="Left" cssClass="e-fill classicTab">
                <e-tab-tabitems>
                    <e-tab-tabitem header="@(new TabHeader { Text = "General Information" })" content="#generalInfoTab"></e-tab-tabitem>
                    <e-tab-tabitem header="@(new TabHeader { Text = "Biographical Information" })" content="#bioInfoTab"></e-tab-tabitem>
                    <e-tab-tabitem header="@(new TabHeader { Text = "Identity" })" content="#identityInfoTab"></e-tab-tabitem>
                    <e-tab-tabitem header="@(new TabHeader { Text = "Contact Information" })" content="#contactInfoTab"></e-tab-tabitem>
                    <e-tab-tabitem header="@(new TabHeader { Text = "Dependants Information" })" content="#dependantsInfoTab"></e-tab-tabitem>
                </e-tab-tabitems>
            </ejs-tab>
            <div id="generalInfoTab" role="form" class="secondaryTab" data-toggle="validator" style="display: none">
                <div class="customForm">
                    <div class="formHeader">
                        <span class="headerTitle">General Information</span>
                    </div>
                    <div class="formContent h-fill-available">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div class="form-group" style="padding: 15px">
                                        <div class="col-sm-4" style="">
                                            <label class="p-t-5 control-label pull-right">First Name:</label>
                                        </div>
                                        <div class="col-sm-8" style="">
                                            <input type="text" id="firstName" name="FirstName" class="form-control" required>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div class="form-group" style="padding: 15px">
                                        <div class="col-sm-4" style="">
                                            <label class="p-t-5 control-label pull-right">First Name AR:</label>
                                        </div>
                                        <div class="col-sm-8" style="">
                                            <input type="text" id="firstNameLocal" name="FirstNameLocalized" class="form-control">
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div class="form-group" style="padding: 15px">
                                        <div class="col-sm-4" style="">
                                            <label class="p-t-5 control-label pull-right">Middle Name:</label>
                                        </div>
                                        <div class="col-sm-8" style="">
                                            <input type="text" id="middleName" name="MiddleName" class="form-control" required>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div class="form-group" style="padding: 15px">
                                        <div class="col-sm-4" style="">
                                            <label class="p-t-5 control-label pull-right">Middle Name AR:</label>
                                        </div>
                                        <div class="col-sm-8" style="">
                                            <input type="text" id="middleNameLocal" name="MiddleNameLocalized" class="form-control">
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div class="form-group" style="padding: 15px">
                                        <div class="col-sm-4" style="">
                                            <label class="p-t-5 control-label pull-right">Last Name:</label>
                                        </div>
                                        <div class="col-sm-8" style="">
                                            <input type="text" id="lastName" name="LastName" class="form-control" required>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div class="form-group" style="padding: 15px">
                                        <div class="col-sm-4" style="">
                                            <label class="p-t-5 control-label pull-right">Last Name AR:</label>
                                        </div>
                                        <div class="col-sm-8" style="">
                                            <input type="text" id="lastNameLocal" name="LastNameLocalized" class="form-control">
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div class="form-group" style="padding: 15px">
                                        <div class="col-sm-4" style="">
                                            <label class="p-t-5 control-label pull-right">Title:</label>
                                        </div>
                                        <div class="col-sm-8" style="">
                                            <select id="empTitle" name="TitleId" class="form-control" required>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div class="form-group" style="padding: 15px">
                                        <div class="col-sm-4" style="">
                                            <label class="p-t-5 control-label pull-right">Initials:</label>
                                        </div>
                                        <div class="col-sm-8" style="">
                                            <input type="text" id="empInitials" name="Initials" class="form-control" required>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div class="form-group" style="padding: 15px">
                                        <div class="col-sm-4" style="">
                                            <label class="p-t-5 control-label pull-right">Preferred Name:</label>
                                        </div>
                                        <div class="col-sm-8" style="">
                                            <input type="text" id="empPreferredName" name="PreferredName" class="form-control" required>
                                        </div>
                                    </div>
                                </div>

                            </div>
                            <div class="col-md-6" style="padding-left:0">
                                <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div class="form-group" style="padding: 15px">
                                        <div class="col-sm-4" style="">
                                            <label class="p-t-5 control-label pull-right">Display Name:</label>
                                        </div>
                                        <div class="col-sm-8" style="">
                                            <input type="text" id="empDisplayName" name="DisplayName" class="form-control" required>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div class="form-group" style="padding: 15px">
                                        <div class="col-sm-4" style="">
                                            <label class="p-t-5 control-label pull-right">Gender:</label>
                                        </div>
                                        <div class="col-sm-8" style="">
                                            <select id="empGender" name="GenderId" class="form-control" required>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div class="form-group" style="padding: 15px">
                                        <div class="col-sm-4" style="">
                                            <label class="p-t-5 control-label pull-right">Marital Status:</label>
                                        </div>
                                        <div class="col-sm-8" style="">
                                            <select id="empMaritalStatus" onchange="
                                                if (typeof $('option:selected', '#empMaritalStatus').attr('data-value') !== 'undefined' && $('option:selected', '#empMaritalStatus').attr('data-value').includes('Married')) {
                                                    $('#empMarriedSinceField').slideDown(100);
                                                } else {
                                                    $('#empMarriedSinceField').slideUp(100);
                                                }
                                            " name="MaritalStatusId" class="form-control" required>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div id="empMarriedSinceField" class="col-lg-12 col-md-12 col-sm-12 col-12" style="display:none">
                                    <div class="form-group" style="padding: 15px">
                                        <div class="col-sm-4" style="">
                                            <label class="p-t-5 control-label pull-right">Married Since:</label>
                                        </div>
                                        <div class="col-sm-8" style="">
                                            <input type="month" id="empMarriedSince" name="MarriedSince" class="form-control">
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div class="form-group" style="padding: 15px">
                                        <div class="col-sm-4" style="">
                                            <label class="p-t-5 control-label pull-right">Preferred Language:</label>
                                        </div>
                                        <div class="col-sm-8" style="">
                                            <select id="empPreferredLanguage" name="PreferredLanguageId" class="form-control" required>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div class="form-group" style="padding: 15px">
                                        <div class="col-sm-4" style="">
                                            <label class="p-t-5 control-label pull-right">Nationality:</label>
                                        </div>
                                        <div class="col-sm-8" style="">
                                            <select id="empNationality" name="NationalityId" class="form-control" required>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="bioInfoTab" role="form" class="secondaryTab" data-toggle="validator" style="display: none">
                <div class="customForm">
                    <div class="formHeader">
                        <span class="headerTitle">Biographical Information</span>
                    </div>
                    <div class="formContent h-fill-available">
                        <ejs-accordion id="bioInfoAccordion">
                            <e-accordion-accordionitems>
                                <e-accordion-accordionitem expanded="true" header="General Details" content="#bioGeneralDetails"></e-accordion-accordionitem>
                                <e-accordion-accordionitem header="Disablitites Information" content="#bioDisabilitiestDetails"></e-accordion-accordionitem>
                            </e-accordion-accordionitems>
                        </ejs-accordion>
                        <div id="bioGeneralDetails" style="display:none">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-4" style="">
                                                <label class="p-t-5 control-label pull-right">Date of Birth:</label>
                                            </div>
                                            <div class="col-sm-8" style="">
                                                <input type="date" id="dateOfBirth" name="DateOfBirth" class="form-control" required>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-4" style="">
                                                <label class="p-t-5 control-label pull-right">Country of Birth:</label>
                                            </div>
                                            <div class="col-sm-8" style="">
                                                <select id="empBirthCountry" name="BirthCountryId" class="form-control" required>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-4" style="">
                                                <label class="p-t-5 control-label pull-right">Place of Birth:</label>
                                            </div>
                                            <div class="col-sm-8" style="">
                                                <input type="text" id="birthPlace" name="PlaceOfBirth" class="form-control" required>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-4" style="">
                                                <label class="p-t-5 control-label pull-right">Attachment:</label>
                                            </div>
                                            <div class="col-sm-8" style="">
                                                <input type="file" id="bioAttachment" name="BioAttachment" class="form-control">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="bioDisabilitiestDetails" style="display:none">
                            <div class="control-section">
                                <div id="disabilitiesCS" class="control-section">
                                    <ejs-grid id="DisabilitiesGrid" enableAutoFill="true" dataBound="dataBoundResponsive" commandClick="defaultFilesCrudCommandClick"
                                              showColumnChooser="true" allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true" dataSource="new List<object>()"
                                              hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true" actionBegin="defaultFilesCrudActionBegin" actionComplete="defaultFilesCrudActionComplete"
                                              allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" allowTextWrap="true" textWrapSettings="@(new Syncfusion.EJ2.Grids.GridTextWrapSettings() { WrapMode = Syncfusion.EJ2.Grids.WrapMode.Header })"
                                              toolbarClick="defaultCrudToolbarClick" toolbar="@initialCrudToolBar.Where(x => { if (x.GetType() == typeof(string)) { return (string)x != "ColumnChooser"; } else return true; })"
                                              allowPaging="true" allowResizing="true">

                                        @{


                                        }
                                        <e-grid-columns>
                                            <e-grid-column field="id" headerText="Id" isIdentity="true" isPrimaryKey="true" textAlign="Center" visible="false" showInColumnChooser="false"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="certificateIssuingAuthority" headerText="Certificate Issuing Authority" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column valueAccessor="@("singleFileNameAccessor")" type='string' edit="@(new {create="fileCreate", read="fileRead", destroy="fileDestroy", write="fileWrite"  })" field="attachment" headerText="Certificate Attachment" allowEditing="true" textAlign="Center"></e-grid-column>

                                            <e-grid-column headerText="Actions" textAlign="Center" commands="defaultCrudCommands"></e-grid-column>
                                        </e-grid-columns>

                                        <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                        <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true" mode="Dialog"></e-grid-editSettings>
                                        <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                        <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                    </ejs-grid>
                                </div>
                                <div id="auditTrail" style="display:none;">
                                    @*<partial na me="_DataAuditTrailPartialView" model="@Model.GetDataAuditTrailModel()" />*@
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="identityInfoTab" class="secondaryTab" style="display: none">
                <div class="customForm">
                    <div class="formHeader">
                        <span class="headerTitle">Identity Information</span>
                    </div>
                    <div class="formContent h-fill-available">
                        <ejs-accordion id="identityInfoAccordion">
                            <e-accordion-accordionitems>
                                <e-accordion-accordionitem id="iqamaIdItem" header="Iqama Information" content="#iqamaIdentityInfo"></e-accordion-accordionitem>
                                <e-accordion-accordionitem id="natIdItem" expanded="true" header="National Identity" content="#nationalIdentityInfo"></e-accordion-accordionitem>
                                <e-accordion-accordionitem header="Passports/Travel Documents" content="#passportTravelInfo"></e-accordion-accordionitem>
                            </e-accordion-accordionitems>
                        </ejs-accordion>
                        <div id="iqamaIdentityInfo" style="display:none">
                            <ejs-tab id="iqamaIdentityInfoTabs" animation="horizontalAnimation" heightAdjustMode="None" overflowMode="Scrollable" headerPlacement="Top" cssClass="e-fill customTab">
                                <e-tab-tabitems>
                                    <e-tab-tabitem header="@(new TabHeader { Text = "Iqama Number" })" content="#iqamaNumberIdentityInfo"></e-tab-tabitem>
                                    <e-tab-tabitem header="@(new TabHeader { Text = "Labour Office Number" })" content="#labourOfficeNumberIdentityInfo"></e-tab-tabitem>
                                    <e-tab-tabitem header="@(new TabHeader { Text = "Sponsorship Details" })" content="#sponsorshipIqamaIdentityInfo"></e-tab-tabitem>
                                </e-tab-tabitems>
                            </ejs-tab>
                            
                            <div id="iqamaNumberIdentityInfo" style="display:none">
                                <div class="row">
                                    <div class="col-sm-2">

                                    </div>
                                    <div class="col-sm-8" style="padding:0">
                                        <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                            <div class="form-group" style="padding: 15px">
                                                <div class="col-sm-4" style="">
                                                    <label class="p-t-5 control-label pull-right">Iqama Number:</label>
                                                </div>
                                                <div class="col-sm-8" style="">
                                                    <input type="text" id="iqamaNumberField" name="IqamaNumber" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" required>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                            <div class="form-group" style="padding: 15px">
                                                <div class="col-sm-4" style="">
                                                    <label class="p-t-5 control-label pull-right ">Place of Issue:</label>
                                                </div>
                                                <div class="col-sm-8" style="">
                                                    <input type="text" id="iqamaPlaceOfIssue" name="IqamaPlaceOfIssue" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control " required>
                                                </div>
                                            </div>
                                        </div>
                                        @*<div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                            <div class="form-group" style="padding: 15px">
                                                <div class="col-sm-4" style="">
                                                    <label class="p-t-5 control-label pull-right ">Valid From:</label>
                                                </div>
                                                <div class="col-sm-8" style="">
                                                    <input type="date" id="iqamaValidityFromDate" name="IqamaValidityFromDate" class="text-left form-control inline pull-left" required>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                            <div class="form-group" style="padding: 15px">
                                                <div class="col-sm-4" style="">
                                                    <label class="p-t-5 control-label pull-right ">Valid To:</label>
                                                </div>
                                                <div class="col-sm-8" style="">
                                                    <input type="date" id="iqamaValidityToDate" name="IqamaValidityToDate" class="text-left form-control inline pull-left" required>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                            <div class="form-group" style="padding: 15px">
                                                <div class="col-sm-4" style="">
                                                    <label class="p-t-5 control-label pull-right">Attachment:</label>
                                                </div>
                                                <div class="col-sm-8" style="">
                                                    <input type="file" id="iqamaAttachment" name="IqamaAttachment" class="form-control">
                                                </div>
                                            </div>
                                        </div>*@
                                    </div>
                                    <div class="col-sm-2">

                                    </div>
                                </div>

                                <div class="m-t-20"> 
                                    <div class="control-section">
                                        <div id="iqamaRenewValidityCS" class="control-section">
                                            <ejs-grid id="IqamaRenewValidityGrid" enableAutoFill="true" dataBound="dataBoundResponsive" commandClick="defaultFilesCrudCommandClick"
                                                      showColumnChooser="true" allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true" dataSource="new List<object>()"
                                                      hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true" actionBegin="defaultFilesCrudActionBegin" actionComplete="defaultFilesCrudActionComplete"
                                                      allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" allowTextWrap="true" textWrapSettings="@(new Syncfusion.EJ2.Grids.GridTextWrapSettings() { WrapMode = Syncfusion.EJ2.Grids.WrapMode.Header })"
                                                      toolbarClick="defaultCrudToolbarClick" toolbar="@initialCrudToolBar.Where(x => { if (x.GetType() == typeof(string)) { return (string)x != "ColumnChooser"; } else return true; })"
                                                      >

                                                @{


                                                }
                                                <e-grid-columns>
                                                    <e-grid-column field="id" headerText="Id" isIdentity="true" isPrimaryKey="true" textAlign="Center" visible="false" showInColumnChooser="false"></e-grid-column>
                                                    <e-grid-column validationRules="@(new { required=true})" type='date' format="dd/MM/yyyy" edit="@(new { @params = new { format = "dd/MM/yyyy" } })" editType='datepickeredit' field="validityFromDate" headerText="Valid From" allowEditing="true" textAlign="Center"></e-grid-column>
                                                    <e-grid-column validationRules="@(new { required=true})" type='date' format="dd/MM/yyyy" edit="@(new { @params = new { format="dd/MM/yyyy" } })" editType='datepickeredit' field="validityToDate" headerText="Valid To" allowEditing="true" textAlign="Center"></e-grid-column>
                                                   <e-grid-column valueAccessor="@("singleFileNameAccessor")" type='string' edit="@(new {create="fileCreate", read="fileRead", destroy="fileDestroy", write="fileWrite"  })" field="attachment" headerText="Attachment" allowEditing="true" textAlign="Center"></e-grid-column>

                                                    <e-grid-column headerText="Actions" textAlign="Center" commands="defaultCrudCommands"></e-grid-column>
                                                </e-grid-columns>

                                                <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                                <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true" mode="Dialog"></e-grid-editSettings>
                                                <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                            </ejs-grid>
                                        </div>
                                        <div id="auditTrail" style="display:none;">
                                            @*<partial na me="_DataAuditTrailPartialView" model="@Model.GetDataAuditTrailModel()" />*@
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div id="labourOfficeNumberIdentityInfo" style="display:none">
                                <div class="row">
                                    <div class="col-sm-2">

                                    </div>
                                    <div class="col-sm-8" style="padding:0">
                                        <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                            <div class="form-group" style="padding: 15px">
                                                <div class="col-sm-4" style="">
                                                    <label class="p-t-5 control-label pull-right">Labour Office Number:</label>
                                                </div>
                                                <div class="col-sm-8" style="">
                                                    <input type="text" id="labourOfficeNumberField" name="LabourOfficeNumber" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" required>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                            <div class="form-group" style="padding: 15px">
                                                <div class="col-sm-4" style="">
                                                    <label class="p-t-5 control-label pull-right ">Place of Issue:</label>
                                                </div>
                                                <div class="col-sm-8" style="">
                                                    <input type="text" id="labourOfficePlaceOfIssue" name="LabourOfficePlaceOfIssue" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control " required>
                                                </div>
                                            </div>
                                        </div>
                                        @*<div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                            <div class="form-group" style="padding: 15px">
                                                <div class="col-sm-4" style="">
                                                    <label class="p-t-5 control-label pull-right ">Valid From:</label>
                                                </div>
                                                <div class="col-sm-8" style="">
                                                    <input type="date" id="labourOfficeValidityFromDate" name="LabourOfficeValidityFromDate" class="text-left form-control inline pull-left" required>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                            <div class="form-group" style="padding: 15px">
                                                <div class="col-sm-4" style="">
                                                    <label class="p-t-5 control-label pull-right ">Valid To:</label>
                                                </div>
                                                <div class="col-sm-8" style="">
                                                    <input type="date" id="labourOfficeValidityToDate" name="abourOfficeValidityToDate" class="text-left form-control inline pull-left" required>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                            <div class="form-group" style="padding: 15px">
                                                <div class="col-sm-4" style="">
                                                    <label class="p-t-5 control-label pull-right">Attachment:</label>
                                                </div>
                                                <div class="col-sm-8" style="">
                                                    <input type="file" id="labourOfficeAttachment" name="LabourOfficeAttachment" class="form-control">
                                                </div>
                                            </div>
                                        </div>*@
                                    </div>
                                    <div class="col-sm-2">

                                    </div>
                                </div>
                                <div class="m-t-20">
                                    <div class="control-section">
                                        <div id="labourOfficeRenewValidityCS" class="control-section">
                                            <ejs-grid id="LabourOfficeRenewValidityGrid" enableAutoFill="true" dataBound="dataBoundResponsive" commandClick="defaultFilesCrudCommandClick"
                                                      showColumnChooser="true" allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true" dataSource="new List<object>()"
                                                      hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true" actionBegin="defaultFilesCrudActionBegin" actionComplete="defaultFilesCrudActionComplete"
                                                      allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" allowTextWrap="true" textWrapSettings="@(new Syncfusion.EJ2.Grids.GridTextWrapSettings() { WrapMode = Syncfusion.EJ2.Grids.WrapMode.Header })"
                                                      toolbarClick="defaultCrudToolbarClick" toolbar="@initialCrudToolBar.Where(x => { if (x.GetType() == typeof(string)) { return (string)x != "ColumnChooser"; } else return true; })">

                                                @{


                                                }
                                                <e-grid-columns>
                                                    <e-grid-column field="id" headerText="Id" isIdentity="true" isPrimaryKey="true" textAlign="Center" visible="false" showInColumnChooser="false"></e-grid-column>
                                                    <e-grid-column validationRules="@(new { required=true})" type='date' format="dd/MM/yyyy" edit="@(new { @params = new { format = "dd/MM/yyyy" } })" editType='datepickeredit' field="validityFromDate" headerText="Valid From" allowEditing="true" textAlign="Center"></e-grid-column>
                                                    <e-grid-column validationRules="@(new { required=true})" type='date' format="dd/MM/yyyy" edit="@(new { @params = new { format="dd/MM/yyyy" } })" editType='datepickeredit' field="validityToDate" headerText="Valid To" allowEditing="true" textAlign="Center"></e-grid-column>
                                                    <e-grid-column valueAccessor="@("singleFileNameAccessor")" type='string' edit="@(new {create="fileCreate", read="fileRead", destroy="fileDestroy", write="fileWrite"  })" field="attachment" headerText="Attachment" allowEditing="true" textAlign="Center"></e-grid-column>

                                                    <e-grid-column headerText="Actions" textAlign="Center" commands="defaultCrudCommands"></e-grid-column>
                                                </e-grid-columns>

                                                <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                                <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true" mode="Dialog"></e-grid-editSettings>
                                                <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                            </ejs-grid>
                                        </div>
                                        <div id="auditTrail" style="display:none;">
                                            @*<partial na me="_DataAuditTrailPartialView" model="@Model.GetDataAuditTrailModel()" />*@
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div id="sponsorshipIqamaIdentityInfo" style="display:none">
                                <div>
                                    <div class="col-sm-2">

                                    </div>
                                    <div class="col-sm-8" style="padding:0">
                                        <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                            <div class="form-group" style="padding: 15px">
                                                <div class="col-sm-4" style="">
                                                    <label class="p-t-5 control-label pull-right">Sponsor Type:</label>
                                                </div>
                                                <div class="col-sm-8" style="">
                                                    <select id="empIqamaSponsorType" name="IqamaSponsorType" onchange="
                                                            if (typeof $('option:selected', '#empIqamaSponsorType').attr('data-value') !== 'undefined' && $('option:selected', '#empIqamaSponsorType').attr('data-value').includes('Group')) {
                                                                $('#groupSponsorFields').slideDown();
                                                                $('#otherSponsorFields').slideUp();
                                                            } else {
                                                                $('#groupSponsorFields').slideUp();
                                                                $('#otherSponsorFields').slideDown();
                                                            }
                                                        " class="form-control" required>
                                                        @for (int i = 0; i < iqamaSponsorTypes.Count; i++)
                                                        {
                                                            <option value="@((int)iqamaSponsorTypes[i])" data-value="@EnumExtensions.GetDescription(iqamaSponsorTypes[i])">@EnumExtensions.GetDescription(iqamaSponsorTypes[i])</option>
                                                        }
                                                    </select>                                                
                                                </div>
                                            </div>
                                        </div>
                                        <div id="groupSponsorFields" style="display:none">
                                            <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                                <div class="form-group" style="padding: 15px">
                                                    <div class="col-sm-4" style="">
                                                        <label class="p-t-5 control-label pull-right">Legal Entities:</label>
                                                    </div>
                                                    <div class="col-sm-8" style="">
                                                        <select id="empIqamaSponsorLegalEntitiesId" multiple="multiple" name="IqamaSponsorLegalEntitiesId" class="form-control mltslct" required>
                                                        </select>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div id="otherSponsorFields" style="display:none">
                                            <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                                <div class="form-group" style="padding: 15px">
                                                    <div class="col-sm-4" style="">
                                                        <label class="p-t-5 control-label pull-right ">Sponsor's Name:</label>
                                                    </div>
                                                    <div class="col-sm-8" style="">
                                                        <input type="text" id="iqamaSponsorName" name="IqamaSponsorName" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control " required>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                                <div class="form-group" style="padding: 15px">
                                                    <div class="col-sm-4" style="">
                                                        <label class="p-t-5 control-label pull-right ">Sponsor's Name Local:</label>
                                                    </div>
                                                    <div class="col-sm-8" style="">
                                                        <input type="text" id="iqamaSponsorNameLocal" name="IqamaSponsorNameLocal" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control " required>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                                <div class="form-group" style="padding: 15px">
                                                    <div class="col-sm-4" style="">
                                                        <label class="p-t-5 control-label pull-right ">Address Line 1:</label>
                                                    </div>
                                                    <div class="col-sm-8" style="">
                                                        <input type="text" id="iqamaSponsorAddressLine1" name="IqamaSponsorAddressLine1" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control " required>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                                <div class="form-group" style="padding: 15px">
                                                    <div class="col-sm-4" style="">
                                                        <label class="p-t-5 control-label pull-right ">Address Line 2</label>
                                                    </div>
                                                    <div class="col-sm-8" style="">
                                                        <input type="text" id="iqamaSponsorAddressLine2" name="IqamaSponsorAddressLine2" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control " required>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                                <div class="form-group" style="padding: 15px">
                                                    <div class="col-sm-4" style="">
                                                        <label class="p-t-5 control-label pull-right ">Email Address</label>
                                                    </div>
                                                    <div class="col-sm-8" style="">
                                                        <input type="email" id="iqamaSponsorEmailAddress" name="IqamaSponsorEmailAddress" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control " required>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                                <div class="form-group" style="padding: 15px">
                                                    <div class="col-sm-4" style="">
                                                        <label class="p-t-5 control-label pull-right ">Labour Office Number</label>
                                                    </div>
                                                    <div class="col-sm-8" style="">
                                                        <input type="email" id="iqamaSponsorLabourOfficeNumber" name="IqamaSponsorLabourOfficeNumber" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control " required>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                                <div class="form-group" style="padding: 15px">
                                                    <div class="col-sm-4" style="">
                                                        <label class="p-t-5 control-label pull-right ">Contract Secured</label>
                                                    </div>
                                                    <div class="col-sm-8" style="">
                                                        <input type="checkbox" id="iqamaSponsorContractSecured" name="IqamaSponsorContractSecured" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control " required>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                                <div class="form-group" style="padding: 15px">
                                                    <div class="col-sm-4" style="">
                                                        <label class="p-t-5 control-label pull-right">Attachment:</label>
                                                    </div>
                                                    <div class="col-sm-8" style="">
                                                        <input type="file" id="iqamaSponsorAttachment" name="IqamaSponsorAttachment" class="form-control">
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-2">

                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="nationalIdentityInfo">
                            <div class="row">
                                <div class="col-sm-2">

                                </div>
                                <div class="col-sm-8" style="padding:0">
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-4" style="">
                                                <label class="p-t-5 control-label pull-right">National ID Type:</label>
                                            </div>
                                            <div class="col-sm-8" style="">
                                                <select id="empNationalIdentityTypeId" name="NationalIdentityTypeId" class="form-control mltslct" required>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-4" style="">
                                                <label id="natIdNumberField" class="p-t-5 control-label pull-right">National ID Number:</label>
                                            </div>
                                            <div class="col-sm-8" style="">
                                                <input type="text" id="nationalIdentityNumberField" name="NationalIdentityNumber" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" required>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-4" style="">
                                                <label class="p-t-5 control-label pull-right ">Name on ID:</label>
                                            </div>
                                            <div class="col-sm-8" style="">
                                                <input type="text" id="nationalIdentityNameOnID" name="NationalIdentityNameOnID" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control " required>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-4" style="">
                                                <label class="p-t-5 control-label pull-right ">Name on ID (AR):</label>
                                            </div>
                                            <div class="col-sm-8" style="">
                                                <input type="text" id="nationalIdentityNameOnIDLocal" name="NationalIdentityNameOnIDLocal" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control " required>
                                            </div>
                                        </div>
                                    </div>
                                    @*<div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-4" style="">
                                                <label class="p-t-5 control-label pull-right ">Valid From:</label>
                                            </div>
                                            <div class="col-sm-8" style="">
                                                <input type="date" id="nationalIdentityValidityFromDate" name="NationalIdentityValidityFromDate" class="text-left form-control inline pull-left" required>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-4" style="">
                                                <label class="p-t-5 control-label pull-right ">Valid To:</label>
                                            </div>
                                            <div class="col-sm-8" style="">
                                                <input type="date" id="nationalIdentityValidityToDate" name="NationalIdentityValidityToDate" class="text-left form-control inline pull-left" required>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-4" style="">
                                                <label class="p-t-5 control-label pull-right">Attachment:</label>
                                            </div>
                                            <div class="col-sm-8" style="">
                                                <input type="file" id="nationalIdentityAttachment" name="NationalIdentityAttachment" class="form-control">
                                            </div>
                                        </div>
                                    </div>*@
                                </div>
                                <div class="col-sm-2">

                                    </div>
                            </div>
                            <div class="m-t-20">
                                <div class="control-section">
                                    <div id="nationalIdentitiesCS" class="control-section">
                                        <ejs-grid id="NationalIdentitiesGrid" enableAutoFill="true" dataBound="dataBoundResponsive" commandClick="defaultPrimaryFilesCrudCommandClick"
                                                    showColumnChooser="true" allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true" dataSource="new List<object>()"
                                                    hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true" actionBegin="defaultPrimaryFilesCrudActionBegin" actionComplete="defaultPrimaryFilesCrudActionComplete"
                                                    allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" allowTextWrap="true" textWrapSettings="@(new Syncfusion.EJ2.Grids.GridTextWrapSettings() { WrapMode = Syncfusion.EJ2.Grids.WrapMode.Header })"
                                                    toolbarClick="defaultCrudToolbarClick" toolbar="@initialCrudToolBar.Where(x => { if (x.GetType() == typeof(string)) { return (string)x != "ColumnChooser"; } else return true; })"
                                                    allowPaging="true" allowResizing="true">

                                            @{


                                            }
                                            <e-grid-columns>
                                                <e-grid-column field="id" headerText="Id" isIdentity="true" isPrimaryKey="true" textAlign="Center" visible="false" showInColumnChooser="false"></e-grid-column>
                                                <e-grid-column visible="false" field="idTypeId" headerText="ID Type" allowEditing="false" editType="dropdownedit" edit="dicValueTypeEdit" valueAccessor="@("dictionaryValueAccessor")" textAlign="Center"></e-grid-column>
                                                <e-grid-column visible="false" field="idNumber" headerText="ID Number" allowEditing="true" textAlign="Center"></e-grid-column>
                                                <e-grid-column validationRules="@(new { required=true})" type='date' format="dd/MM/yyyy" edit="@(new { @params = new { format = "dd/MM/yyyy" } })" editType='datepickeredit' field="validityFromDate" headerText="Valid From" allowEditing="true" textAlign="Center"></e-grid-column>
                                                <e-grid-column validationRules="@(new { required=true})" type='date' format="dd/MM/yyyy" edit="@(new { @params = new { format="dd/MM/yyyy" } })" editType='datepickeredit' field="validityToDate" headerText="Valid To" allowEditing="true" textAlign="Center"></e-grid-column>
                                                <e-grid-column field="isPrimary" displayAsCheckBox="true" editType="booleanedit" headerText="Primary" allowEditing="true" textAlign="Center"></e-grid-column>
                                                <e-grid-column valueAccessor="@("singleFileNameAccessor")" type='string' edit="@(new {create="fileCreate", read="fileRead", destroy="fileDestroy", write="fileWrite"  })" field="attachment" headerText="Attachment" allowEditing="true" textAlign="Center"></e-grid-column>

                                                <e-grid-column headerText="Actions" textAlign="Center" commands="defaultCrudCommands"></e-grid-column>
                                            </e-grid-columns>

                                            <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                            <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true" mode="Dialog"></e-grid-editSettings>
                                            <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                            <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                        </ejs-grid>
                                    </div>
                                    <div id="auditTrail" style="display:none;">
                                        @*<partial na me="_DataAuditTrailPartialView" model="@Model.GetDataAuditTrailModel()" />*@
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="passportTravelInfo" style="display: none">
                            
                            <div class="control-section">
                                <div id="passportTravelsCS" class="control-section">
                                    <ejs-grid id="PassportTravelsGrid" enableAutoFill="true" dataBound="dataBoundResponsive" commandClick="defaultPrimaryFilesCrudCommandClick"
                                              showColumnChooser="true" allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true" dataSource="new List<object>()"
                                              hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true" actionBegin="defaultPrimaryFilesCrudActionBegin" actionComplete="defaultPrimaryFilesCrudActionComplete"
                                              allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" allowTextWrap="true" textWrapSettings="@(new Syncfusion.EJ2.Grids.GridTextWrapSettings() { WrapMode = Syncfusion.EJ2.Grids.WrapMode.Header })"
                                              toolbarClick="defaultCrudToolbarClick" toolbar="@initialCrudToolBar.Where(x => { if (x.GetType() == typeof(string)) { return (string)x != "ColumnChooser"; } else return true; })"
                                              allowPaging="true" allowResizing="true">

                                        @{

                                            var documentTypeEdit = new
                                            {
@@params = new Syncfusion.EJ2.DropDowns.DropDownList() { DataSource = EnumExtensions.GetDescriptions(typeof(IdentityDocumentType)), Query = "new ej.data.Query()", AllowFiltering = true }
                                        };

                                        }
                                        <e-grid-columns>
                                            <e-grid-column field="id" headerText="Id" isIdentity="true" isPrimaryKey="true" textAlign="Center" visible="false" showInColumnChooser="false"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="documentTypeDescription" headerText="Document Type" editType="dropdownedit" edit="documentTypeEdit" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="issuingCountryId" valueAccessor="@("dictionaryValueAccessor")" headerText="Issuing Country" editType="dropdownedit" edit="dicValueTypeEdit" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="documentNumber" headerText="Document Number" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" type='date' format="dd/MM/yyyy" edit="@(new { @params = new { format = "dd/MM/yyyy" } })" editType='datepickeredit' field="validityFromDate" headerText="Valid From" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" type='date' format="dd/MM/yyyy" edit="@(new { @params = new { format="dd/MM/yyyy" } })" editType='datepickeredit' field="validityToDate" headerText="Valid To" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column field="isPrimary" displayAsCheckBox="true" editType="booleanedit" headerText="Primary" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column valueAccessor="@("singleFileNameAccessor")" type='string' edit="@(new {create="fileCreate", read="fileRead", destroy="fileDestroy", write="fileWrite"  })" field="attachment" headerText="Attachment" allowEditing="true" textAlign="Center"></e-grid-column>

                                            <e-grid-column headerText="Actions" textAlign="Center" commands="defaultCrudCommands"></e-grid-column>
                                        </e-grid-columns>

                                        <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                        <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true" mode="Dialog"></e-grid-editSettings>
                                        <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                        <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                    </ejs-grid>
                                </div>
                                <div id="auditTrail" style="display:none;">
                                    @*<partial na me="_DataAuditTrailPartialView" model="@Model.GetDataAuditTrailModel()" />*@
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="contactInfoTab" class="secondaryTab" style="display:none">
                <div class="customForm">
                    <div class="formHeader">
                        <span class="headerTitle">Contact Information</span>
                    </div>
                    <div class="formContent h-fill-available">
                        <ejs-accordion id="contactInfoAccordion">
                            <e-accordion-accordionitems>
                                <e-accordion-accordionitem expanded="true" header="Email Addresses" content="#emailAddressesInfo"></e-accordion-accordionitem>
                                <e-accordion-accordionitem header="Phone Numbers" content="#phoneAddressesInfo"></e-accordion-accordionitem>
                                <e-accordion-accordionitem header="Home Addresses" content="#homeAddressesInfo"></e-accordion-accordionitem>
                                <e-accordion-accordionitem header="Emergency Contacts" content="#emergencyContactsInfo"></e-accordion-accordionitem>
                            </e-accordion-accordionitems>
                        </ejs-accordion>
                        <div id="emailAddressesInfo">
                            <div class="control-section">
                                <div id="emailAddressesCS" class="control-section">
                                    <ejs-grid id="EmailAddressesGrid" enableAutoFill="true" dataBound="dataBoundResponsive" commandClick="defaultPalePrimaryCrudCommandClick"
                                              showColumnChooser="true" allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true" dataSource="new List<object>()"
                                              hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true" actionBegin="defaultPalePrimaryCrudActionBegin" actionComplete="defaultPalePrimaryCrudActionComplete"
                                              allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" allowTextWrap="true" textWrapSettings="@(new Syncfusion.EJ2.Grids.GridTextWrapSettings() { WrapMode = Syncfusion.EJ2.Grids.WrapMode.Header })"
                                              toolbarClick="defaultCrudToolbarClick" toolbar="@initialCrudToolBar.Where(x => { if (x.GetType() == typeof(string)) { return (string)x != "ColumnChooser"; } else return true; })"
                                              allowPaging="true" allowResizing="true">

                                        @{


                                        }
                                        <e-grid-columns>
                                            <e-grid-column field="id" headerText="Id" isIdentity="true" isPrimaryKey="true" textAlign="Center" visible="false" showInColumnChooser="false"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="emailTypeId" headerText="Email Type" editType="dropdownedit" edit="dicValueTypeEdit" valueAccessor="@("dictionaryValueAccessor")" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="email" headerText="Email Address" allowEditing="true" textAlign="Center"></e-grid-column>
                                            @*<e-grid-column validationRules="@(new { required=true})" type='date' format="dd/MM/yyyy" edit="@(new { @params = new { format = "dd/MM/yyyy" } })" editType='datepickeredit' field="validityFromDate" headerText="Valid From" allowEditing="true" textAlign="Center"></e-grid-column>
                                                <e-grid-column validationRules="@(new { required=true})" type='date' format="dd/MM/yyyy" edit="@(new { @params = new { format="dd/MM/yyyy" } })" editType='datepickeredit' field="validityToDate" headerText="Valid To" allowEditing="true" textAlign="Center"></e-grid-column>*@
                                            <e-grid-column field="isPrimary" displayAsCheckBox="true" editType="booleanedit" headerText="Primary" allowEditing="true" textAlign="Center"></e-grid-column>
                                            @*<e-grid-column valueAccessor="@("singleFileNameAccessor")" type='string' edit="@(new {create="fileCreate", read="fileRead", destroy="fileDestroy", write="fileWrite"  })" field="attachment" headerText="Attachment" allowEditing="true" textAlign="Center"></e-grid-column>*@

                                            <e-grid-column headerText="Actions" textAlign="Center" commands="defaultCrudCommands"></e-grid-column>
                                        </e-grid-columns>

                                        <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                        <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true" mode="Dialog"></e-grid-editSettings>
                                        <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                        <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                    </ejs-grid>
                                </div>
                                <div id="auditTrail" style="display:none;">
                                    @*<partial na me="_DataAuditTrailPartialView" model="@Model.GetDataAuditTrailModel()" />*@
                                </div>
                            </div>
                        </div>
                        <div id="phoneAddressesInfo" style="display: none">
                            <div class="control-section">
                                <div id="phoneAddressesCS" class="control-section">
                                    <ejs-grid id="PhoneAddressesGrid" enableAutoFill="true" dataBound="dataBoundResponsive" commandClick="defaultPalePrimaryCrudCommandClick"
                                              showColumnChooser="true" allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true" dataSource="new List<object>()"
                                              hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true" actionBegin="defaultPalePrimaryCrudActionBegin" actionComplete="defaultPalePrimaryCrudActionComplete"
                                              allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" allowTextWrap="true" textWrapSettings="@(new Syncfusion.EJ2.Grids.GridTextWrapSettings() { WrapMode = Syncfusion.EJ2.Grids.WrapMode.Header })"
                                              toolbarClick="defaultCrudToolbarClick" toolbar="@initialCrudToolBar.Where(x => { if (x.GetType() == typeof(string)) { return (string)x != "ColumnChooser"; } else return true; })"
                                              allowPaging="true" allowResizing="true">

                                        @{

                                        }
                                        <e-grid-columns>
                                            <e-grid-column field="id" headerText="Id" isIdentity="true" isPrimaryKey="true" textAlign="Center" visible="false" showInColumnChooser="false"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="phoneTypeId" valueAccessor="@("dictionaryValueAccessor")" headerText="Phone Type" editType="dropdownedit" edit="dicValueTypeEdit" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="phoneNumber" headerText="Phone Number" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="extension" headerText="Extension" allowEditing="true" textAlign="Center"></e-grid-column>
                                            @*<e-grid-column validationRules="@(new { required=true})" type='date' format="dd/MM/yyyy" edit="@(new { @params = new { format = "dd/MM/yyyy" } })" editType='datepickeredit' field="validityFromDate" headerText="Valid From" allowEditing="true" textAlign="Center"></e-grid-column>
                                                <e-grid-column validationRules="@(new { required=true})" type='date' format="dd/MM/yyyy" edit="@(new { @params = new { format="dd/MM/yyyy" } })" editType='datepickeredit' field="validityToDate" headerText="Valid To" allowEditing="true" textAlign="Center"></e-grid-column>*@
                                            <e-grid-column field="isPrimary" displayAsCheckBox="true" editType="booleanedit" headerText="Primary" allowEditing="true" textAlign="Center"></e-grid-column>
                                            @*<e-grid-column valueAccessor="@("singleFileNameAccessor")" type='string' edit="@(new {create="fileCreate", read="fileRead", destroy="fileDestroy", write="fileWrite"  })" field="attachment" headerText="Attachment" allowEditing="true" textAlign="Center"></e-grid-column>*@

                                            <e-grid-column headerText="Actions" textAlign="Center" commands="defaultCrudCommands"></e-grid-column>
                                        </e-grid-columns>

                                        <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                        <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true" mode="Dialog"></e-grid-editSettings>
                                        <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                        <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                    </ejs-grid>
                                </div>
                                <div id="auditTrail" style="display:none;">
                                    @*<partial na me="_DataAuditTrailPartialView" model="@Model.GetDataAuditTrailModel()" />*@
                                </div>
                            </div>
                        </div>
                        <div id="homeAddressesInfo" style="display: none">
                            <div class="control-section">
                                <div id="homeAddressesCS" class="control-section">
                                    <ejs-grid id="HomeAddressesGrid" enableAutoFill="true" dataBound="dataBoundResponsive" commandClick="defaultPalePrimaryCrudCommandClick"
                                              showColumnChooser="true" allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true" dataSource="new List<object>()"
                                              hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true" actionBegin="defaultPalePrimaryCrudActionBegin" actionComplete="defaultPalePrimaryCrudActionComplete"
                                              allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" allowTextWrap="true" textWrapSettings="@(new Syncfusion.EJ2.Grids.GridTextWrapSettings() { WrapMode = Syncfusion.EJ2.Grids.WrapMode.Header })"
                                              toolbarClick="defaultCrudToolbarClick" toolbar="@initialCrudToolBar.Where(x => { if (x.GetType() == typeof(string)) { return (string)x != "ColumnChooser"; } else return true; })"
                                              allowPaging="true" allowResizing="true">

                                        @{

                                        }
                                        <e-grid-columns>
                                            <e-grid-column field="id" headerText="Id" isIdentity="true" isPrimaryKey="true" textAlign="Center" visible="false" showInColumnChooser="false"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="addressTypeId" valueAccessor="@("dictionaryValueAccessor")" headerText="Address Type" editType="dropdownedit" edit="dicValueTypeEdit" textAlign="Center"></e-grid-column>
                                            <e-grid-column field="regularAddress" displayAsCheckBox="true" editType="booleanedit" headerText="Regular Address" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="addressLine1" headerText="Address Line 1" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="addressLine2" headerText="Address Line 2" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="city" headerText="City" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="state" headerText="State" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="postalCode" headerText="Postal Code" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="countryId" valueAccessor="@("dictionaryValueAccessor")" headerText="Country" editType="dropdownedit" edit="dicValueTypeEdit" textAlign="Center"></e-grid-column>
                                            @*<e-grid-column validationRules="@(new { required=true})" type='date' format="dd/MM/yyyy" edit="@(new { @params = new { format = "dd/MM/yyyy" } })" editType='datepickeredit' field="validityFromDate" headerText="Valid From" allowEditing="true" textAlign="Center"></e-grid-column>
                                                <e-grid-column validationRules="@(new { required=true})" type='date' format="dd/MM/yyyy" edit="@(new { @params = new { format="dd/MM/yyyy" } })" editType='datepickeredit' field="validityToDate" headerText="Valid To" allowEditing="true" textAlign="Center"></e-grid-column>*@
                                            <e-grid-column field="isPrimary" displayAsCheckBox="true" editType="booleanedit" headerText="Primary" allowEditing="true" textAlign="Center"></e-grid-column>
                                            @*<e-grid-column valueAccessor="@("singleFileNameAccessor")" type='string' edit="@(new {create="fileCreate", read="fileRead", destroy="fileDestroy", write="fileWrite"  })" field="attachment" headerText="Attachment" allowEditing="true" textAlign="Center"></e-grid-column>*@

                                            <e-grid-column headerText="Actions" textAlign="Center" commands="defaultCrudCommands"></e-grid-column>
                                        </e-grid-columns>

                                        <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                        <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true" mode="Dialog"></e-grid-editSettings>
                                        <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                        <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                    </ejs-grid>
                                </div>
                                <div id="auditTrail" style="display:none;">
                                    @*<partial na me="_DataAuditTrailPartialView" model="@Model.GetDataAuditTrailModel()" />*@
                                </div>
                            </div>
                        </div>
                        <div id="emergencyContactsInfo" style="display: none">
                            <div class="control-section">
                                <div id="emergencyContactsCS" class="control-section">
                                    <ejs-grid id="EmergencyContactsGrid" enableAutoFill="true" dataBound="dataBoundResponsive" commandClick="defaultPalePrimaryCrudCommandClick"
                                              showColumnChooser="true" allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true" dataSource="new List<object>()"
                                              hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true" actionBegin="defaultPalePrimaryCrudActionBegin" actionComplete="defaultPalePrimaryCrudActionComplete"
                                              allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" allowTextWrap="true" textWrapSettings="@(new Syncfusion.EJ2.Grids.GridTextWrapSettings() { WrapMode = Syncfusion.EJ2.Grids.WrapMode.Header })"
                                              toolbarClick="defaultCrudToolbarClick" toolbar="@initialCrudToolBar.Where(x => { if (x.GetType() == typeof(string)) { return (string)x != "ColumnChooser"; } else return true; })"
                                              allowPaging="true" allowResizing="true">

                                        @{

                                        }
                                        <e-grid-columns>
                                            <e-grid-column field="id" headerText="Id" isIdentity="true" isPrimaryKey="true" textAlign="Center" visible="false" showInColumnChooser="false"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="relationshipTypeId" valueAccessor="@("dictionaryValueAccessor")" headerText="Relationship" editType="dropdownedit" edit="dicValueTypeEdit" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="name" headerText="Name" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="phoneNumber" headerText="Phone Number" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="emailAddress" headerText="Email Address" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="alternatePhone" headerText="Alternate Phone" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="addressLine1" headerText="Address Line 1" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="addressLine2" headerText="Address Line 2" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="city" headerText="City" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="state" headerText="State" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="postalCode" headerText="Postal Code" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="countryId" valueAccessor="@("dictionaryValueAccessor")" headerText="Country" editType="dropdownedit" edit="dicValueTypeEdit" textAlign="Center"></e-grid-column>
                                            <e-grid-column field="isPrimary" displayAsCheckBox="true" editType="booleanedit" headerText="Primary" allowEditing="true" textAlign="Center"></e-grid-column>
                                            @*<e-grid-column valueAccessor="@("singleFileNameAccessor")" type='string' edit="@(new {create="fileCreate", read="fileRead", destroy="fileDestroy", write="fileWrite"  })" field="attachment" headerText="Attachment" allowEditing="true" textAlign="Center"></e-grid-column>*@

                                            <e-grid-column headerText="Actions" textAlign="Center" commands="defaultCrudCommands"></e-grid-column>
                                        </e-grid-columns>

                                        <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                        <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true" mode="Dialog"></e-grid-editSettings>
                                        <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                        <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                    </ejs-grid>
                                </div>
                                <div id="auditTrail" style="display:none;">
                                    @*<partial na me="_DataAuditTrailPartialView" model="@Model.GetDataAuditTrailModel()" />*@
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="dependantsInfoTab" class="secondaryTab" style="display:none">
                <div class="customForm">
                    <div class="formHeader">
                        <span class="headerTitle">Dependants Information</span>
                    </div>
                    <div class="formContent h-fill-available">
                        <ejs-accordion id="dependantsInfoAccordion">
                            <e-accordion-accordionitems>
                                <e-accordion-accordionitem expanded="true" header="Dependants" content="#dependantsInfo"></e-accordion-accordionitem>
                                @*<e-accordion-accordionitem header="Dependants Biographical Information" content="#dependantsBioInfo"></e-accordion-accordionitem>*@
                                <e-accordion-accordionitem header="Dependants Identity Information" content="#dependantsIdentityInfo"></e-accordion-accordionitem>
                                <e-accordion-accordionitem header="Dependants Overview" content="#dependantsOverview"></e-accordion-accordionitem>
                            </e-accordion-accordionitems>
                        </ejs-accordion>
                        <div id="dependantsInfo">
                            <div class="control-section">
                                <div id="dependantsCS" class="control-section">
                                    <ejs-grid id="DependantsGrid" enableAutoFill="true" dataBound="dataBoundResponsive" commandClick="defaultFilesCrudCommandClick"
                                              showColumnChooser="true" allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true" dataSource="new List<object>()"
                                              hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true" actionBegin="defaultFilesCrudActionBegin" actionComplete="defaultFilesCrudActionComplete"
                                              allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" allowTextWrap="true" textWrapSettings="@(new Syncfusion.EJ2.Grids.GridTextWrapSettings() { WrapMode = Syncfusion.EJ2.Grids.WrapMode.Header })"
                                              toolbarClick="defaultCrudToolbarClick" toolbar="@initialCrudToolBar.Where(x => { if (x.GetType() == typeof(string)) { return (string)x != "ColumnChooser"; } else return true; })"
                                              allowPaging="true" allowResizing="true">

                                        @{


                                        }
                                        <e-grid-columns>
                                            <e-grid-column field="id" headerText="Id" isIdentity="true" isPrimaryKey="true" textAlign="Center" visible="false" showInColumnChooser="false"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="firstName" headerText="First Name" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=false})" field="firstNameLocalized" headerText="First Name AR" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="middleName" headerText="Middle Name" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="lastName" headerText="Last Name" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="relationshipTypeId" headerText="Relationship" editType="dropdownedit" edit="dicValueTypeEdit" valueAccessor="@("dictionaryValueAccessor")" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" type='date' format="dd/MM/yyyy" edit="@(new { @params = new { format = "dd/MM/yyyy" } })" editType='datepickeredit' field="dateOfBirth" headerText="Date of Birth" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="birthCountryId" valueAccessor="@("dictionaryValueAccessor")" headerText="Birth Country" editType="dropdownedit" edit="dicValueTypeEdit" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="nationalityId" valueAccessor="@("dictionaryValueAccessor")" headerText="Nationality" editType="dropdownedit" edit="dicValueTypeEdit" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="placeOfBirth" headerText="Place of Birth" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column valueAccessor="@("singleFileNameAccessor")" type='string' edit="@(new {create="fileCreate", read="fileRead", destroy="fileDestroy", write="fileWrite"  })" field="attachment" headerText="Attachment" allowEditing="true" textAlign="Center"></e-grid-column>

                                            <e-grid-column headerText="Actions" textAlign="Center" commands="defaultCrudCommands"></e-grid-column>
                                        </e-grid-columns>

                                        <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                        <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true" mode="Dialog"></e-grid-editSettings>
                                        <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                        <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                    </ejs-grid>
                                </div>
                                <div id="auditTrail" style="display:none;">
                                    @*<partial na me="_DataAuditTrailPartialView" model="@Model.GetDataAuditTrailModel()" />*@
                                </div>
                            </div>
                        </div>
                        <div id="dependantsBioInfo" style="display: none">
                            <div class="control-section">
                                <div id="dependantsBiosCS" class="control-section">
                                    <ejs-grid id="DependantsBiosGrid" enableAutoFill="true" dataBound="dataBoundResponsive" commandClick="defaultFilesCrudCommandClick"
                                              showColumnChooser="true" allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true" dataSource="new List<object>()"
                                              hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true" actionBegin="defaultFilesCrudActionBegin" actionComplete="defaultFilesCrudActionComplete"
                                              allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" allowTextWrap="true" textWrapSettings="@(new Syncfusion.EJ2.Grids.GridTextWrapSettings() { WrapMode = Syncfusion.EJ2.Grids.WrapMode.Header })"
                                              toolbarClick="defaultCrudToolbarClick" toolbar="@initialCrudToolBar.Where(x => { if (x.GetType() == typeof(string)) { return (string)x != "ColumnChooser"; } else return true; })"
                                              allowPaging="true" allowResizing="true">

                                        @{

                                        }
                                        <e-grid-columns>
                                            <e-grid-column field="id" headerText="Id" isIdentity="true" isPrimaryKey="true" textAlign="Center" visible="false" showInColumnChooser="false"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="dependantId" valueAccessor="@("fullNameValueAccessor")" headerText="Dependant" editType="dropdownedit" edit="complexNameEdit" textAlign="Center"></e-grid-column>

                                            <e-grid-column headerText="Actions" textAlign="Center" commands="defaultCrudCommands"></e-grid-column>
                                        </e-grid-columns>

                                        <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                        <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true" mode="Dialog"></e-grid-editSettings>
                                        <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                        <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                    </ejs-grid>
                                </div>
                                <div id="auditTrail" style="display:none;">
                                    @*<partial na me="_DataAuditTrailPartialView" model="@Model.GetDataAuditTrailModel()" />*@
                                </div>
                            </div>
                        </div>
                        <div id="dependantsIdentityInfo" style="display: none">
                            <ejs-tab id="dependantsIdentityInfoTabs" animation="ViewBag.animation" heightAdjustMode="None" overflowMode="Scrollable" headerPlacement="Top" cssClass="e-fill customTab">
                                <e-tab-tabitems>
                                    <e-tab-tabitem header="@(new TabHeader { Text = "National Identities" })" content="#dependantsNationalIdentitiesTab"></e-tab-tabitem>
                                    <e-tab-tabitem header="@(new TabHeader { Text = "Passport/Travel Documents" })" content="#dependantsPassportTravelDocsTab"></e-tab-tabitem>
                                </e-tab-tabitems>
                            </ejs-tab>
                            <div id="dependantsNationalIdentitiesTab">
                                <div class="control-section">
                                    <div id="dependantsNationalIdentitiesCS" class="control-section">
                                        <ejs-grid id="DependantsNationalIdentitiesGrid" enableAutoFill="true" dataBound="dataBoundResponsive" commandClick="defaultPrimaryFilesCrudCommandClick"
                                                  showColumnChooser="true" allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true" dataSource="new List<object>()"
                                                  hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true" actionBegin="defaultPrimaryFilesCrudActionBegin" actionComplete="defaultPrimaryFilesCrudActionComplete"
                                                  allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" allowTextWrap="true" textWrapSettings="@(new Syncfusion.EJ2.Grids.GridTextWrapSettings() { WrapMode = Syncfusion.EJ2.Grids.WrapMode.Header })"
                                                  toolbarClick="defaultCrudToolbarClick" toolbar="@initialCrudToolBar.Where(x => { if (x.GetType() == typeof(string)) { return (string)x != "ColumnChooser"; } else return true; })"
                                                  allowPaging="true" allowResizing="true">

                                            @{


                                            }
                                            <e-grid-columns>
                                                <e-grid-column field="id" headerText="Id" isIdentity="true" isPrimaryKey="true" textAlign="Center" visible="false" showInColumnChooser="false"></e-grid-column>
                                                <e-grid-column validationRules="@(new { required=true})" field="dependantId" valueAccessor="@("fullNameValueAccessor")" headerText="Dependant" editType="dropdownedit" edit="complexNameEdit" textAlign="Center"></e-grid-column>
                                                <e-grid-column validationRules="@(new { required=true})" field="idTypeId" headerText="ID Type" editType="dropdownedit" edit="dicValueTypeEdit" valueAccessor="@("dictionaryValueAccessor")" textAlign="Center"></e-grid-column>
                                                <e-grid-column validationRules="@(new { required=true})" field="idNumber" headerText="ID Number" allowEditing="true" textAlign="Center"></e-grid-column>
                                                <e-grid-column validationRules="@(new { required=true})" type='date' format="dd/MM/yyyy" edit="@(new { @params = new { format = "dd/MM/yyyy" } })" editType='datepickeredit' field="validityFromDate" headerText="Valid From" allowEditing="true" textAlign="Center"></e-grid-column>
                                                <e-grid-column validationRules="@(new { required=true})" type='date' format="dd/MM/yyyy" edit="@(new { @params = new { format="dd/MM/yyyy" } })" editType='datepickeredit' field="validityToDate" headerText="Valid To" allowEditing="true" textAlign="Center"></e-grid-column>
                                                <e-grid-column field="isPrimary" displayAsCheckBox="true" editType="booleanedit" headerText="Primary" allowEditing="true" textAlign="Center"></e-grid-column>
                                                <e-grid-column valueAccessor="@("singleFileNameAccessor")" type='string' edit="@(new {create="fileCreate", read="fileRead", destroy="fileDestroy", write="fileWrite"  })" field="attachment" headerText="Attachment" allowEditing="true" textAlign="Center"></e-grid-column>

                                                <e-grid-column headerText="Actions" textAlign="Center" commands="defaultCrudCommands"></e-grid-column>
                                            </e-grid-columns>

                                            <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                            <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true" mode="Dialog"></e-grid-editSettings>
                                            <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                            <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                        </ejs-grid>
                                    </div>
                                    <div id="auditTrail" style="display:none;">
                                        @*<partial na me="_DataAuditTrailPartialView" model="@Model.GetDataAuditTrailModel()" />*@
                                    </div>
                                </div>
                            </div>
                            <div id="dependantsPassportTravelDocsTab" style="display: none">
                                <div class="control-section">
                                    <div id="passportTravelsCS" class="control-section">
                                        <ejs-grid id="DependantsPassportTravelDocsGrid" enableAutoFill="true" dataBound="dataBoundResponsive" commandClick="defaultPrimaryFilesCrudCommandClick"
                                                  showColumnChooser="true" allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true" dataSource="new List<object>()"
                                                  hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true" actionBegin="defaultPrimaryFilesCrudActionBegin" actionComplete="defaultPrimaryFilesCrudActionComplete"
                                                  allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" allowTextWrap="true" textWrapSettings="@(new Syncfusion.EJ2.Grids.GridTextWrapSettings() { WrapMode = Syncfusion.EJ2.Grids.WrapMode.Header })"
                                                  toolbarClick="defaultCrudToolbarClick" toolbar="@initialCrudToolBar.Where(x => { if (x.GetType() == typeof(string)) { return (string)x != "ColumnChooser"; } else return true; })"
                                                  allowPaging="true" allowResizing="true">

                                            @{

                                                var dependantDocumentTypeEdit = new
                                                {
@@params = new Syncfusion.EJ2.DropDowns.DropDownList() { DataSource = EnumExtensions.GetDescriptions(typeof(IdentityDocumentType)), Query = "new ej.data.Query()", AllowFiltering = true }
                                            };
                                            }
                                            <e-grid-columns>
                                                <e-grid-column field="id" headerText="Id" isIdentity="true" isPrimaryKey="true" textAlign="Center" visible="false" showInColumnChooser="false"></e-grid-column>
                                                <e-grid-column validationRules="@(new { required=true})" field="dependantId" valueAccessor="@("fullNameValueAccessor")" headerText="Dependant" editType="dropdownedit" edit="complexNameEdit" textAlign="Center"></e-grid-column>
                                                <e-grid-column validationRules="@(new { required=true})" field="documentTypeDescription" headerText="Document Type" editType="dropdownedit" edit="dependantDocumentTypeEdit" textAlign="Center"></e-grid-column>
                                                <e-grid-column validationRules="@(new { required=true})" field="issuingCountryId" valueAccessor="@("dictionaryValueAccessor")" headerText="Issuing Country" editType="dropdownedit" edit="dicValueTypeEdit" textAlign="Center"></e-grid-column>
                                                <e-grid-column validationRules="@(new { required=true})" field="documentNumber" headerText="Document Number" allowEditing="true" textAlign="Center"></e-grid-column>
                                                <e-grid-column validationRules="@(new { required=true})" type='date' format="dd/MM/yyyy" edit="@(new { @params = new { format = "dd/MM/yyyy" } })" editType='datepickeredit' field="validityFromDate" headerText="Valid From" allowEditing="true" textAlign="Center"></e-grid-column>
                                                <e-grid-column validationRules="@(new { required=true})" type='date' format="dd/MM/yyyy" edit="@(new { @params = new { format="dd/MM/yyyy" } })" editType='datepickeredit' field="validityToDate" headerText="Valid To" allowEditing="true" textAlign="Center"></e-grid-column>
                                                <e-grid-column field="isPrimary" displayAsCheckBox="true" editType="booleanedit" headerText="Primary" allowEditing="true" textAlign="Center"></e-grid-column>
                                                <e-grid-column valueAccessor="@("singleFileNameAccessor")" type='string' edit="@(new {create="fileCreate", read="fileRead", destroy="fileDestroy", write="fileWrite"  })" field="attachment" headerText="Attachment" allowEditing="true" textAlign="Center"></e-grid-column>

                                                <e-grid-column headerText="Actions" textAlign="Center" commands="defaultCrudCommands"></e-grid-column>
                                            </e-grid-columns>

                                            <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                            <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true" mode="Dialog"></e-grid-editSettings>
                                            <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                            <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                        </ejs-grid>
                                    </div>
                                    <div id="auditTrail" style="display:none;">
                                        @*<partial na me="_DataAuditTrailPartialView" model="@Model.GetDataAuditTrailModel()" />*@
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="dependantsOverview" style="display: none">
                            <div class="control-section card-control-section tile_layout">
                                <div class="row filter">
                                    <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                                        <div class="e-float-input e-input-group">
                                            <input type="text" required="" id="search_Card">
                                            <span class="e-float-line"></span>
                                            <label class="e-float-text" style="font-size:14px">Enter text to search</label>
                                            <span class="e-clear-icon"></span>
                                        </div>
                                    </div>
                                    <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6 tile_search">
                                        <input type="text" id="dependantsSelection">
                                    </div>
                                </div>
                                <div class="row e-card-layout" style="text-align:center;">
                                    <div class="row">
                                        <div class="row error" style="display:none;min-height:150px">
                                            <div class="e-error-content" style="margin:auto;height:inherit;font-size:18px;font-weight:500;color:inherit">No results found. Please try a different search.</div>
                                        </div>
                                        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                                            <!-- Tile View Layout  -->
                                            <div id="card_sample_1" class="card_sample"></div>
                                        </div>
                                        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                                            <div id="card_sample_2" class="card_sample"></div>
                                        </div>
                                        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                                            <div id="card_sample_3" class="card_sample"></div>
                                        </div>
                                        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                                            <div id="card_sample_4" class="card_sample"></div>
                                        </div>
                                        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                                            <div id="card_sample_5" class="card_sample"></div>
                                        </div>
                                        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                                            <div id="card_sample_6" class="card_sample"></div>
                                        </div>
                                        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                                            <div id="card_sample_7" class="card_sample"></div>
                                        </div>
                                        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                                            <div id="card_sample_8" class="card_sample"></div>
                                        </div>
                                        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                                            <div id="card_sample_9" class="card_sample"></div>
                                        </div>
                                        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                                            <div id="card_sample_10" class="card_sample"></div>
                                        </div>
                                        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                                            <div id="card_sample_11" class="card_sample"></div>
                                        </div>
                                        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                                            <div id="card_sample_12" class="card_sample"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="employmentInfoTab" class="mainTab" style="display: none">
            <ejs-tab id="employmentInfoTabs" animation="verticalAnimation" heightAdjustMode="None" overflowMode="Scrollable" headerPlacement="Left" cssClass="e-fill classicTab">
                <e-tab-tabitems>
                    <e-tab-tabitem header="@(new TabHeader { Text = "Organization Structure" })" content="#orgStructureChartTab"></e-tab-tabitem>
                    <e-tab-tabitem header="@(new TabHeader { Text = "Organization Inforamtion" })" content="#orgStructureInfoTab"></e-tab-tabitem>
                    <e-tab-tabitem header="@(new TabHeader { Text = "Job Information" })" content="#jobInfoTab"></e-tab-tabitem>
                    <e-tab-tabitem header="@(new TabHeader { Text = "Positions History" })" content="#posHistoryInfoTab"></e-tab-tabitem>
                </e-tab-tabitems>
            </ejs-tab>

            <div id="orgStructureChartTab" class="secondaryTab" style="display: none">
                <div class="customForm">
                    <div class="formHeader">
                        <span class="headerTitle">Organization Structure Overview</span>
                    </div>
                    <div class="formContent h-fill-available">
                        <div class="control-section">
                            <div style="width: 100%;height: 10%">
                                @*Initializes ToolBar control.*@
                                @*<ejs-toolbar id="toolbar" clicked="posDGToolbarClick" created="posDGToolbarCreate">
                                        <e-toolbar-items>
                                            <e-toolbar-item id="Add" tooltipText="Add" prefixIcon="e-icons e-add" text="Add"></e-toolbar-item>
                                            <e-toolbar-item type="Separator"></e-toolbar-item>
                                            <e-toolbar-item id="Edit" tooltipText="Edit" prefixIcon="e-icons e-update" text="Edit"></e-toolbar-item>
                                            <e-toolbar-item type="Separator"></e-toolbar-item>
                                            <e-toolbar-item id="Delete" tooltipText="Delete" prefixIcon="e-icons e-delete" text="Delete"></e-toolbar-item>
                                            <e-toolbar-item type="Separator"></e-toolbar-item>
                                        </e-toolbar-items>
                                    </ejs-toolbar>*@
                            </div>
                            <div style="width: 100%;height: 80%;border-width: 0 1px 1px 1px; border-style: solid; border-color:#D7D7D7">
                                <div id="orgChartJs" style="width: 100%; height: 100%">

                                </div>
                                <div id="diagram-space" class="sb-mobile-diagram" style="display:none">
                                    @*Initializes Diagram control.*@
                                    <ejs-diagram id="PosManagementDiagram" width="100%" height="550px" getNodeDefaults='"getNodeDefaults"' getConnectorDefaults='"getConnectorDefaults"' created="diagramCreated">
                                        <e-diagram-snapsettings constraints="None"></e-diagram-snapsettings>
                                        <e-diagram-datasourcesettings id="id" parentId="parentId" dataSource="new DataManager() { Data = new List<object>() }"></e-diagram-datasourcesettings>
                                        <e-diagram-layout type="HierarchicalTree" enableAnimation="true" horizontalSpacing="60" verticalSpacing="60"></e-diagram-layout>
                                    </ejs-diagram>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="orgStructureInfoTab" role="form" class="secondaryTab" data-toggle="validator" style="display: none">
                <div class="customForm">
                    <div class="formHeader">
                        <span class="headerTitle">Organization Information</span>
                    </div>
                    <div class="formContent h-fill-available">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div class="form-group" style="padding: 15px">
                                        <div class="col-sm-4" style="">
                                            <label class="p-t-5 control-label pull-right">Company:</label>
                                        </div>
                                        <div class="col-sm-8" style="">
                                            <select id="empCompany" name="LegalEntityId" class="form-control" required>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div class="form-group" style="padding: 15px">
                                        <div class="col-sm-4" style="">
                                            <label class="p-t-5 control-label pull-right">Business Unit:</label>
                                        </div>
                                        <div class="col-sm-8" style="">
                                            <select id="empBU" name="OrganizationStructureTemplateBusinessUnitId" class="form-control" required>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div class="form-group" style="padding: 15px">
                                        <div class="col-sm-4" style="">
                                            <label class="p-t-5 control-label pull-right">Division:</label>
                                        </div>
                                        <div class="col-sm-8" style="">
                                            <select id="empDIV" name="OrganizationStructureTemplateDivisionId" class="form-control" required>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div class="form-group" style="padding: 15px">
                                        <div class="col-sm-4" style="">
                                            <label class="p-t-5 control-label pull-right">Department:</label>
                                        </div>
                                        <div class="col-sm-8" style="">
                                            <select id="empDEP" name="OrganizationStructureTemplateDepartmentId" class="form-control" required>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div class="form-group" style="padding: 15px">
                                        <div class="col-sm-4" style="">
                                            <label class="p-t-5 control-label pull-right">Location:</label>
                                        </div>
                                        <div class="col-sm-8" style="">
                                            <select id="empLOC" name="LocationId" class="form-control" readonly>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                @*<div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group" style="padding: 15px">
                                            <div class="col-sm-4" style="">
                                                <label class="p-t-5 control-label pull-right">Timezone:</label>
                                            </div>
                                            <div class="col-sm-8" style="">
                                                <select id="empTimezone" name="TimezoneId" class="form-control" required>
                                                </select>
                                            </div>
                                        </div>
                                    </div>*@
                                <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div class="form-group" style="padding: 15px">
                                        <div class="col-sm-4" style="">
                                            <label class="p-t-5 control-label pull-right">Cost Center:</label>
                                        </div>
                                        <div class="col-sm-8" style="">
                                            <select id="empCostCenter" name="CostCenterId" class="form-control" required>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div class="form-group" style="padding: 15px">
                                        <div class="col-sm-4" style="">
                                            <label class="p-t-5 control-label pull-right">Employee Group:</label>
                                        </div>
                                        <div class="col-sm-8" style="">
                                            <select id="empEmployeeGroup" name="EmployeeGroupId" class="form-control mltslct" required>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div class="form-group" style="padding: 15px">
                                        <div class="col-sm-4" style="">
                                            <label class="p-t-5 control-label pull-right">Employee Sub Group:</label>
                                        </div>
                                        <div class="col-sm-8" style="">
                                            <select id="empEmployeeSubGroup" name="EmployeeSubGroupId" class="form-control mltslct" required>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div class="form-group" style="padding: 15px">
                                        <div class="col-sm-4" style="">
                                            <label class="p-t-5 control-label pull-right">Employment Type:</label>
                                        </div>
                                        <div class="col-sm-8" style="">
                                            <select id="empEmploymentType" name="EmploymentTypeId" class="form-control mltslct" required>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="jobInfoTab" class="secondaryTab" style="display: none">
                <div class="customForm">
                    <div class="formHeader">
                        <span class="headerTitle">Jobs Information</span>
                    </div>
                    <div class="formContent h-fill-available">
                        <div class="">
                            <div class="control-section">
                                <div id="jobsCS" class="control-section">
                                    <ejs-grid id="JobsGrid" enableAutoFill="true" dataBound="dataBoundResponsive" commandClick="defaultCommandClick"
                                              showColumnChooser="true" allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true" dataSource="new List<object>()"
                                              hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true" actionBegin="defaultActionBegin" actionComplete="defaultActionComplete"
                                              allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" allowTextWrap="true" textWrapSettings="@(new Syncfusion.EJ2.Grids.GridTextWrapSettings() { WrapMode = Syncfusion.EJ2.Grids.WrapMode.Header })"
                                              toolbarClick="defaultToolbarClick" toolbar="@initialToolBar"
                                              allowPaging="true" allowResizing="true">

                                        @{


                                        }
                                        <e-grid-columns>
                                            <e-grid-column field="id" headerText="Id" isIdentity="true" isPrimaryKey="true" textAlign="Center" visible="false" showInColumnChooser="false"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="title" headerText="Job Title" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="jobClassification.name" headerText="Job Classification" editType="dropdownedit" edit="dicValueTypeEdit" valueAccessor="@("dictionaryValueAccessor")" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="employeeClassId" headerText="Employee Class" editType="dropdownedit" edit="dicValueTypeEdit" valueAccessor="@("dictionaryValueAccessor")" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="contractTypeId" headerText="Contract Type" editType="dropdownedit" edit="dicValueTypeEdit" valueAccessor="@("dictionaryValueAccessor")" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="payGradeId" headerText="Pay Grade" editType="dropdownedit" edit="codeNameTypeEdit" valueAccessor="@("codeNameValueAccessor")" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="getWorkingHours" headerText="Working Hours" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="getTimeInPosition" headerText="Time In Position" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" type='date' format="dd/MM/yyyy" edit="@(new { @params = new { format = "dd/MM/yyyy" } })" editType='datepickeredit' field="startDate" headerText="Start Date" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" type='date' format="dd/MM/yyyy" edit="@(new { @params = new { format="dd/MM/yyyy" } })" editType='datepickeredit' field="hiringDate" headerText="Hiring Date" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" type='date' format="dd/MM/yyyy" edit="@(new { @params = new { format="dd/MM/yyyy" } })" editType='datepickeredit' field="originalStartDate" headerText="Original Start Date" allowEditing="true" textAlign="Center"></e-grid-column>

                                            @*<e-grid-column headerText="Actions" textAlign="Center" commands="defaultCrudCommands"></e-grid-column>*@
                                        </e-grid-columns>

                                        <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                        <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="false" allowDeleting="false" allowEditing="false"></e-grid-editSettings>
                                        <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                        <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                    </ejs-grid>
                                </div>
                                <div id="auditTrail" style="display:none;">
                                    @*<partial na me="_DataAuditTrailPartialView" model="@Model.GetDataAuditTrailModel()" />*@
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="posHistoryInfoTab" class="secondaryTab" style="display: none">

            </div>
        </div>
        <div id="compensationTab" class="mainTab" style="display: none">
            <ejs-tab id="compensationTabs" animation="verticalAnimation" heightAdjustMode="None" overflowMode="Scrollable" headerPlacement="Left" cssClass="e-fill classicTab">
                <e-tab-tabitems>
                    <e-tab-tabitem header="@(new TabHeader { Text = "Basic Contract Details" })" content="#basicSalaryTab"></e-tab-tabitem>
                    <e-tab-tabitem header="@(new TabHeader { Text = "Benefits" })" content="#benefitsTab"></e-tab-tabitem>
                    <e-tab-tabitem header="@(new TabHeader { Text = "Payment Details" })" content="#paymentDetailsTab"></e-tab-tabitem>
                    <e-tab-tabitem header="@(new TabHeader { Text = "Payslips" })" content="#payslipsTab"></e-tab-tabitem>
                </e-tab-tabitems>
            </ejs-tab>

            <div id="basicSalaryTab" class="secondaryTab" style="display: none">
                <div class="customForm">
                    <div class="formHeader">
                        <span class="headerTitle">Basic Salary Information</span>
                    </div>
                    <div class="formContent h-fill-available">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div class="form-group" style="padding: 15px">
                                        <div class="col-sm-4" style="">
                                            <label class="p-t-5 control-label pull-right">Pay Sub Group:</label>
                                        </div>
                                        <div class="col-sm-8" style="">
                                            <select id="empCBS_PaySubGroup" name="PaySubGroupId" class="form-control" required>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div class="form-group" style="padding: 15px">
                                        <div class="col-sm-4" style="">
                                            <label class="p-t-5 control-label pull-right">Pay Grade:</label>
                                        </div>
                                        <div class="col-sm-8" style="">
                                            <select id="empCBS_PayGrade" name="PayGradeId" class="form-control" required>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div class="form-group" style="padding: 15px">
                                        <div class="col-sm-4" style="">
                                            <label class="p-t-5 control-label pull-right ">Valid From:</label>
                                        </div>
                                        <div class="col-sm-8" style="">
                                            <input type="date" id="contractValidityFromDate" name="ContractValidityFromDate" class="text-left form-control inline pull-left" required>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div class="form-group" style="padding: 15px">
                                        <div class="col-sm-4" style="">
                                            <label class="p-t-5 control-label pull-right ">Valid To:</label>
                                        </div>
                                        <div class="col-sm-8" style="">
                                            <input type="date" id="contractValidityToDate" name="ContractValidityToDate" class="text-left form-control inline pull-left" required>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="benefitsTab" class="secondaryTab" style="display: none">
                <div class="customForm">
                    <div class="formHeader">
                        <span class="headerTitle">Benefits Information</span>
                    </div>
                    <div class="formContent h-fill-available">
                        <div class="">
                            <div class="control-section">
                                <div id="benefitsCS" class="control-section">
                                    <ejs-grid id="BenefitsGrid" enableAutoFill="true" dataBound="dataBoundResponsive" commandClick="defaultCrudCommandClick"
                                              showColumnChooser="true" allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true" dataSource="new List<object>()"
                                              hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true" actionBegin="defaultCrudActionBegin" actionComplete="defaultCrudActionComplete"
                                              allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" allowTextWrap="true" textWrapSettings="@(new Syncfusion.EJ2.Grids.GridTextWrapSettings() { WrapMode = Syncfusion.EJ2.Grids.WrapMode.Header })"
                                              toolbarClick="defaultCrudToolbarClick" toolbar="@initialCrudToolBar"
                                              allowPaging="false" allowResizing="true">

                                        @{


                                        }
                                        <e-grid-columns>
                                            <e-grid-column field="id" headerText="Id" isIdentity="true" isPrimaryKey="true" textAlign="Center" visible="false" showInColumnChooser="false"></e-grid-column>
                                            <e-grid-column visible="false" validationRules="@(new { required=true})" field="payComponent.payComponentTypeId" headerText="Pay Component Type" editType="dropdownedit" edit="codeNameTypeEdit" valueAccessor="@("codeNameValueAccessor")" textAlign="Center"></e-grid-column>
                                            @*<e-grid-column validationRules="@(new { required=true})" field="payComponentType.valueTypeDescription" headerText="Value Type" allowEditing="false" textAlign="Center"></e-grid-column>*@
                                            <e-grid-column validationRules="@(new { required=true})" field="payComponentId" headerText="Pay Component" editType="dropdownedit" edit="codeNameTypeEdit" valueAccessor="@("codeNameValueAccessor")" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="payComponent.payComponentType.valueTypeDescription" headerText="Value Type" editType="dropdownedit" edit="payComponentValueTypeEdit" allowEditing="false" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=false})" field="payComponent.payComponentType.valueComponentTypeId" headerText="Value Component Type" visible="true" editType="dropdownedit" edit="codeNameTypeEdit" valueAccessor="@("codeNameValueAccessor")" allowEditing="false" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="payComponentComponentTypeAmount" editType="numericedit" edit="integerFieldEdit" headerText="Amount/Percentage" allowEditing="false" textAlign="Center"></e-grid-column>
                                            @*<e-grid-column validationRules="@(new { required=true})" field="payComponentType.percentage" headerText="Percentage" visible="false" allowEditing="true" textAlign="Center"></e-grid-column>*@
                                            <e-grid-column validationRules="@(new { required=true})" field="payComponent.payFrequencyId" headerText="Pay Frequency" editType="dropdownedit" edit="codeNameTypeEdit" valueAccessor="@("codeNameValueAccessor")" allowEditing="false" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" type='date' format="dd/MM/yyyy" edit="@(new { @params = new { format = "dd/MM/yyyy" } })" editType='datepickeredit' field="validityFromDate" headerText="Valid From" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" type='date' format="dd/MM/yyyy" edit="@(new { @params = new { format="dd/MM/yyyy" } })" editType='datepickeredit' field="validityToDate" headerText="Valid Till" allowEditing="true" textAlign="Center"></e-grid-column>

                                            <e-grid-column headerText="Actions" textAlign="Center" commands="defaultCrudCommands"></e-grid-column>
                                        </e-grid-columns>

                                        <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                        <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true" mode="Dialog"></e-grid-editSettings>
                                        <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                        <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                    </ejs-grid>
                                </div>
                                <div id="auditTrail" style="display:none;">
                                    @*<partial na me="_DataAuditTrailPartialView" model="@Model.GetDataAuditTrailModel()" />*@
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="paymentDetailsTab" class="secondaryTab" style="display: none">
                <div class="customForm">
                    <div class="formHeader">
                        <span class="headerTitle">Payment Details</span>
                    </div>
                    <div class="formContent h-fill-available">
                        <ejs-accordion id="empCPaymentDetailsInfoAccordion">
                            <e-accordion-accordionitems>
                                <e-accordion-accordionitem expanded="true" header="Cash Payment Types" content="#cashPaymentTypesInfo"></e-accordion-accordionitem>
                                <e-accordion-accordionitem header="Cheque Payment Types" content="#chequePaymentTypesInfo"></e-accordion-accordionitem>
                                <e-accordion-accordionitem header="Bank Payment Types" content="#bankPaymentTypesInfo"></e-accordion-accordionitem>
                            </e-accordion-accordionitems>
                        </ejs-accordion>
                        <div id="cashPaymentTypesInfo">
                            <div class="control-section">
                                <div id="cashPaymentTypesCS" class="control-section">
                                    <ejs-grid id="CashPaymentTypesGrid" enableAutoFill="true" dataBound="dataBoundResponsive" commandClick="defaultPrimaryCrudCommandClick"
                                              showColumnChooser="true" allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true" dataSource="new List<object>()"
                                              hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true" actionBegin="defaultPrimaryCrudActionBegin" actionComplete="defaultPrimaryCrudActionComplete"
                                              allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" allowTextWrap="true" textWrapSettings="@(new Syncfusion.EJ2.Grids.GridTextWrapSettings() { WrapMode = Syncfusion.EJ2.Grids.WrapMode.Header })"
                                              toolbarClick="defaultCrudToolbarClick" toolbar="@initialCrudToolBar.Where(x => { if (x.GetType() == typeof(string)) { return (string)x != "ColumnChooser"; } else return true; })"
                                              allowPaging="true" allowResizing="true">

                                        @{

                                        }
                                        <e-grid-columns>
                                            <e-grid-column field="id" headerText="Id" isIdentity="true" isPrimaryKey="true" textAlign="Center" visible="false" showInColumnChooser="false"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="collectionLocationId" headerText="Collection Location" editType="dropdownedit" edit="dicValueTypeEdit" valueAccessor="@("codeNameValueAccessor")" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" type='date' format="dd/MM/yyyy" edit="@(new { @params = new { format = "dd/MM/yyyy" } })" editType='datepickeredit' field="validityFromDate" headerText="Valid From" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" type='date' format="dd/MM/yyyy" edit="@(new { @params = new { format="dd/MM/yyyy" } })" editType='datepickeredit' field="validityToDate" headerText="Valid To" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column field="isPrimary" displayAsCheckBox="true" editType="booleanedit" headerText="Primary" allowEditing="true" textAlign="Center"></e-grid-column>

                                            <e-grid-column headerText="Actions" textAlign="Center" commands="defaultCrudCommands"></e-grid-column>
                                        </e-grid-columns>

                                        <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                        <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true" mode="Dialog"></e-grid-editSettings>
                                        <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                        <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                    </ejs-grid>
                                </div>
                                <div id="auditTrail" style="display:none;">
                                    @*<partial na me="_DataAuditTrailPartialView" model="@Model.GetDataAuditTrailModel()" />*@
                                </div>
                            </div>
                        </div>
                        <div id="bankPaymentTypesInfo" style="display: none">
                            <div class="control-section">
                                <div id="bankPaymentTypesCS" class="control-section">
                                    <ejs-grid id="BankPaymentTypesGrid" enableAutoFill="true" dataBound="dataBoundResponsive" commandClick="defaultPrimaryCrudCommandClick"
                                              showColumnChooser="true" allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true" dataSource="new List<object>()"
                                              hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true" actionBegin="defaultPrimaryCrudActionBegin" actionComplete="defaultPrimaryCrudActionComplete"
                                              allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" allowTextWrap="true" textWrapSettings="@(new Syncfusion.EJ2.Grids.GridTextWrapSettings() { WrapMode = Syncfusion.EJ2.Grids.WrapMode.Header })"
                                              toolbarClick="defaultCrudToolbarClick" toolbar="@initialCrudToolBar.Where(x => { if (x.GetType() == typeof(string)) { return (string)x != "ColumnChooser"; } else return true; })"
                                              allowPaging="true" allowResizing="true">

                                        @{

                                        }
                                        <e-grid-columns>
                                            <e-grid-column field="id" headerText="Id" isIdentity="true" isPrimaryKey="true" textAlign="Center" visible="false" showInColumnChooser="false"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="bankNameId" valueAccessor="@("dictionaryValueAccessor")" headerText="Bank" editType="dropdownedit" edit="dicValueTypeEdit" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="bankAccountName" headerText="Bank Account Name" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="bankAccountNumber" headerText="Bank Account Number" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="bankIBAN" headerText="IBAN" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="bankAddress" headerText="Bank Address" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="city" headerText="City" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="countryId" valueAccessor="@("dictionaryValueAccessor")" headerText="Country" editType="dropdownedit" edit="dicValueTypeEdit" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" type='date' format="dd/MM/yyyy" edit="@(new { @params = new { format = "dd/MM/yyyy" } })" editType='datepickeredit' field="validityFromDate" headerText="Valid From" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" type='date' format="dd/MM/yyyy" edit="@(new { @params = new { format="dd/MM/yyyy" } })" editType='datepickeredit' field="validityToDate" headerText="Valid To" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column field="isPrimary" displayAsCheckBox="true" editType="booleanedit" headerText="Primary" allowEditing="true" textAlign="Center"></e-grid-column>

                                            <e-grid-column headerText="Actions" textAlign="Center" commands="defaultCrudCommands"></e-grid-column>
                                        </e-grid-columns>

                                        <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                        <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true" mode="Dialog"></e-grid-editSettings>
                                        <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                        <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                    </ejs-grid>
                                </div>
                                <div id="auditTrail" style="display:none;">
                                    @*<partial na me="_DataAuditTrailPartialView" model="@Model.GetDataAuditTrailModel()" />*@
                                </div>
                            </div>
                        </div>
                        <div id="chequePaymentTypesInfo" style="display: none">
                            <div class="control-section">
                                <div id="chequePaymentTypesCS" class="control-section">
                                    <ejs-grid id="ChequePaymentTypesGrid" enableAutoFill="true" dataBound="dataBoundResponsive" commandClick="defaultPrimaryCrudCommandClick"
                                              showColumnChooser="true" allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true" dataSource="new List<object>()"
                                              hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true" actionBegin="defaultPrimaryCrudActionBegin" actionComplete="defaultPrimaryCrudActionComplete"
                                              allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" allowTextWrap="true" textWrapSettings="@(new Syncfusion.EJ2.Grids.GridTextWrapSettings() { WrapMode = Syncfusion.EJ2.Grids.WrapMode.Header })"
                                              toolbarClick="defaultCrudToolbarClick" toolbar="@initialCrudToolBar.Where(x => { if (x.GetType() == typeof(string)) { return (string)x != "ColumnChooser"; } else return true; })"
                                              allowPaging="true" allowResizing="true">

                                        @{

                                        }
                                        <e-grid-columns>
                                            <e-grid-column field="id" headerText="Id" isIdentity="true" isPrimaryKey="true" textAlign="Center" visible="false" showInColumnChooser="false"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="nameOnCheque" headerText="Name on Cheque" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" type='date' format="dd/MM/yyyy" edit="@(new { @params = new { format = "dd/MM/yyyy" } })" editType='datepickeredit' field="validityFromDate" headerText="Valid From" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" type='date' format="dd/MM/yyyy" edit="@(new { @params = new { format="dd/MM/yyyy" } })" editType='datepickeredit' field="validityToDate" headerText="Valid To" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column field="isPrimary" displayAsCheckBox="true" editType="booleanedit" headerText="Primary" allowEditing="true" textAlign="Center"></e-grid-column>

                                            <e-grid-column headerText="Actions" textAlign="Center" commands="defaultCrudCommands"></e-grid-column>
                                        </e-grid-columns>

                                        <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                        <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true" mode="Dialog"></e-grid-editSettings>
                                        <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                        <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                    </ejs-grid>
                                </div>
                                <div id="auditTrail" style="display:none;">
                                    @*<partial na me="_DataAuditTrailPartialView" model="@Model.GetDataAuditTrailModel()" />*@
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="payslipsTab" class="secondaryTab" style="display: none">
                <div class="customForm">
                    <div class="formHeader">
                        <span class="headerTitle">Payslips Information</span>
                    </div>
                    <div class="formContent h-fill-available">
                        <div class="">
                            <div class="control-section">
                                <div id="payslipsCS" class="control-section">
                                    <ejs-grid id="PayslipsGrid" enableAutoFill="true" dataBound="dataBoundResponsive" commandClick="defaultCommandClick"
                                              showColumnChooser="true" allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true" dataSource="new List<object>()"
                                              hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true" actionBegin="defaultActionBegin" actionComplete="defaultActionComplete"
                                              allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" allowTextWrap="true" textWrapSettings="@(new Syncfusion.EJ2.Grids.GridTextWrapSettings() { WrapMode = Syncfusion.EJ2.Grids.WrapMode.Header })"
                                              toolbarClick="defaultToolbarClick" toolbar="@initialToolBar"
                                              allowPaging="true" allowResizing="true">

                                        @{


                                        }
                                        <e-grid-columns>
                                            <e-grid-column field="id" headerText="Id" isIdentity="true" isPrimaryKey="true" textAlign="Center" visible="false" showInColumnChooser="false"></e-grid-column>
                                            <e-grid-column field="payPeriod.name" headerText="Pay Component Type" editType="dropdownedit" edit="dicValueTypeEdit" valueAccessor="@("dictionaryValueAccessor")" textAlign="Center"></e-grid-column>
                                            <e-grid-column type='date' format="dd/MM/yyyy" edit="@(new { @params = new { format="dd/MM/yyyy" } })" editType='datepickeredit' field="payDate" headerText="Pay Date" allowEditing="false" textAlign="Center"></e-grid-column>
                                            <e-grid-column field="netIncome" headerText="Net Income" allowEditing="false" textAlign="Center"></e-grid-column>
                                            <e-grid-column field="netDeductions" headerText="Net Deductions" allowEditing="false" textAlign="Center"></e-grid-column>
                                            <e-grid-column field="netPay" headerText="Net Pay" allowEditing="false" textAlign="Center"></e-grid-column>

                                            <e-grid-column headerText="Actions" textAlign="Center" commands="payslipCommands"></e-grid-column>
                                        </e-grid-columns>

                                        <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                        <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="false" allowDeleting="false" allowEditing="false"></e-grid-editSettings>
                                        <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                        <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                    </ejs-grid>
                                </div>
                                <div id="auditTrail" style="display:none;">
                                    @*<partial na me="_DataAuditTrailPartialView" model="@Model.GetDataAuditTrailModel()" />*@
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="timeTab" class="mainTab" style="display: none">
            <ejs-tab id="timeTabs" animation="ViewBag.animation" heightAdjustMode="None" overflowMode="Scrollable" headerPlacement="Left" cssClass="e-fill classicTab">
                <e-tab-tabitems>
                    <e-tab-tabitem header="@(new TabHeader { Text = "General" })" content="#timeGeneralTab"></e-tab-tabitem>
                    <e-tab-tabitem header="@(new TabHeader { Text = "Time Offs" })" content="#timeOffsTab"></e-tab-tabitem>
                    <e-tab-tabitem header="@(new TabHeader { Text = "Work Schedule" })" content="#workScheduleTab"></e-tab-tabitem>
                </e-tab-tabitems>
            </ejs-tab>

            <div id="timeGeneralTab" class="secondaryTab" style="display: none">
                <div class="customForm">
                    <div class="formHeader">
                        <span class="headerTitle">General Information</span>
                    </div>
                    <div class="formContent h-fill-available">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div class="form-group" style="padding: 15px; padding-top: 0">
                                        <div class="col-sm-4" style="">
                                            <h4 class="p-t-5 control-label">Time Details:</h4>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div class="form-group" style="padding: 15px">
                                        <div class="col-sm-4" style="">
                                            <label class="p-t-5 control-label pull-right">Time Zone:</label>
                                        </div>
                                        <div class="col-sm-8" style="">
                                            <select id="empT_Timezone" name="TimezoneId" class="form-control" required>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="timeOffsTab" class="secondaryTab" style="display: none">
                <div class="customForm">
                    <div class="formHeader">
                        <span class="headerTitle">Time Offs Information</span>
                    </div>
                    <div class="formContent h-fill-available">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div class="form-group" style="padding: 15px">
                                        <div class="col-sm-4" style="">
                                            <h4 class="p-t-5 control-label">Basic Information:</h4>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div class="form-group" style="padding: 15px">
                                        <div class="col-sm-4" style="">
                                            <label class="p-t-5 control-label pull-right">Time With Company:</label>
                                        </div>
                                        <div class="col-sm-8" style="">
                                            <label class="p-t-5 control-label">00yrs 00mnths 00dys</label>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div class="form-group" style="padding: 15px">
                                        <div class="col-sm-4" style="">
                                            <label class="p-t-5 control-label pull-right">Hiring Date:</label>
                                        </div>
                                        <div class="col-sm-8" style="">
                                            <input type="date" id="hiringDate" name="HiringDate" class="form-control" readonly>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div class="form-group" style="padding: 15px">
                                        <div class="col-sm-4" style="">
                                            <label class="p-t-5 control-label pull-right">Yearly Time Off Allowances:</label>
                                        </div>
                                        <div class="col-sm-8" style="">
                                            <input type="number" id="yearlyTimeOff" name="YearlyTimeOffAllowance" class="form-control" required>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div id="workScheduleTab" class="secondaryTab" style="display: none">
                <div class="customForm">
                    <div class="formHeader">
                        <span class="headerTitle">Work Schedule Information</span>
                    </div>
                    <div class="formContent h-fill-available">
                        <div class="">
                            <div class="control-section">
                                <div id="workScheduleCS" class="control-section">
                                    <ejs-grid id="WorkScheduleGrid" enableAutoFill="true" dataBound="dataBoundResponsive" commandClick="defaultCommandClick"
                                              showColumnChooser="true" allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true" dataSource="new List<object>()"
                                              hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true" actionBegin="defaultActionBegin" actionComplete="defaultActionComplete"
                                              allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" allowTextWrap="true" textWrapSettings="@(new Syncfusion.EJ2.Grids.GridTextWrapSettings() { WrapMode = Syncfusion.EJ2.Grids.WrapMode.Header })"
                                              toolbarClick="defaultToolbarClick" toolbar="@initialToolBar"
                                              allowPaging="true" allowResizing="true">

                                        @{


                                        }
                                        <e-grid-columns>
                                            <e-grid-column field="id" headerText="Id" isIdentity="true" isPrimaryKey="true" textAlign="Center" visible="false" showInColumnChooser="false"></e-grid-column>
                                            <e-grid-column field="payPeriod.name" headerText="Pay Component Type" editType="dropdownedit" edit="dicValueTypeEdit" valueAccessor="@("dictionaryValueAccessor")" textAlign="Center"></e-grid-column>
                                            <e-grid-column type='date' format="dd/MM/yyyy" edit="@(new { @params = new { format="dd/MM/yyyy" } })" editType='datepickeredit' field="payDate" headerText="Pay Date" allowEditing="false" textAlign="Center"></e-grid-column>
                                            <e-grid-column field="netIncome" headerText="Net Income" allowEditing="false" textAlign="Center"></e-grid-column>
                                            <e-grid-column field="netDeductions" headerText="Net Deductions" allowEditing="false" textAlign="Center"></e-grid-column>
                                            <e-grid-column field="netPay" headerText="Net Pay" allowEditing="false" textAlign="Center"></e-grid-column>

                                            <e-grid-column headerText="Actions" textAlign="Center" commands="payslipCommands"></e-grid-column>
                                        </e-grid-columns>

                                        <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                        <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="false" allowDeleting="false" allowEditing="false"></e-grid-editSettings>
                                        <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                        <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                    </ejs-grid>
                                </div>
                                <div id="auditTrail" style="display:none;">
                                    @*<partial na me="_DataAuditTrailPartialView" model="@Model.GetDataAuditTrailModel()" />*@
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="academiaSkillsProfileTab" class="mainTab" style="display: none">
            <ejs-tab id="academiaSkillsProfileTabs" animation="verticalAnimation" heightAdjustMode="None" overflowMode="Scrollable" headerPlacement="Left" cssClass="e-fill classicTab">
                <e-tab-tabitems>
                    <e-tab-tabitem header="@(new TabHeader { Text = "Academia" })" content="#academiaTab"></e-tab-tabitem>
                    <e-tab-tabitem header="@(new TabHeader { Text = "Skills" })" content="#skillsTab"></e-tab-tabitem>
                </e-tab-tabitems>
            </ejs-tab>

            <div id="academiaTab" class="secondaryTab" style="display: none">
                <div class="customForm">
                    <div class="formHeader">
                        <span class="headerTitle">Academia Information</span>
                    </div>
                    <div class="formContent h-fill-available">
                        <div class="">
                            <div class="control-section">
                                <div id="academiaCS" class="control-section">
                                    <ejs-grid id="AcademiaGrid" enableAutoFill="true" dataBound="dataBoundResponsive" commandClick="defaultCrudCommandClick"
                                              showColumnChooser="true" allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true" dataSource="new List<object>()"
                                              hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true" actionBegin="defaultCrudActionBegin" actionComplete="defaultCrudActionComplete"
                                              allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" allowTextWrap="true" textWrapSettings="@(new Syncfusion.EJ2.Grids.GridTextWrapSettings() { WrapMode = Syncfusion.EJ2.Grids.WrapMode.Header })"
                                              toolbarClick="defaultCrudToolbarClick" toolbar="@initialCrudToolBar"
                                              allowPaging="true" allowResizing="true">

                                        @{
                                            var academicTypeEdit = new
                                            {
@@params = new Syncfusion.EJ2.DropDowns.DropDownList() { DataSource = EnumExtensions.GetDescriptions(typeof(OS_AcademicType)), Query = "new ej.data.Query()", AllowFiltering = true }
                                        };
                                        var academicCertificateTypeEdit = new
                                        {
@@params = new Syncfusion.EJ2.DropDowns.DropDownList() { Created = "academicCertificateTypeCreated", Change = "academicCertificateTypeChanged", DataSource = EnumExtensions.GetDescriptions(typeof(OS_AcademiaCertificateType)), Query = "new ej.data.Query()", AllowFiltering = true }
                                        };
                                        }
                                        <e-grid-columns>
                                            <e-grid-column field="id" headerText="Id" isIdentity="true" isPrimaryKey="true" textAlign="Center" visible="false" showInColumnChooser="false"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="academicTypeDescription" headerText="Academic Type" editType="dropdownedit" edit="academicTypeEdit" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="instituteId" headerText="Institute" editType="dropdownedit" edit="dicValueTypeEdit" valueAccessor="@("dictionaryValueAccessor")" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="academiaCertificateTypeDescription" headerText="Certificate Type" editType="dropdownedit" edit="academicCertificateTypeEdit" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="academiaCertificateSubTypeId" headerText="Certificate Sub Type" editType="dropdownedit" edit="dicValueTypeEdit" valueAccessor="@("dictionaryValueAccessor")" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="description" headerText="Description" allowEditing="true" textAlign="Center"></e-grid-column>
                                            @*<e-grid-column field="kpiEligibility" headerText="KPI Eligibility" visible="false" displayAsCheckBox="true" editType="booleanedit" allowEditing="false" textAlign="Center"></e-grid-column>*@

                                            <e-grid-column headerText="Actions" textAlign="Center" commands="defaultCrudCommands"></e-grid-column>
                                        </e-grid-columns>

                                        <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                        <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true" mode="Dialog"></e-grid-editSettings>
                                        <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                        <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                    </ejs-grid>
                                </div>
                                <div id="auditTrail" style="display:none;">
                                    @*<partial na me="_DataAuditTrailPartialView" model="@Model.GetDataAuditTrailModel()" />*@
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="skillsTab" class="secondaryTab" style="display: none">
                <div class="customForm">
                    <div class="formHeader">
                        <span class="headerTitle">Skills Information</span>
                    </div>
                    <div class="formContent h-fill-available">
                        <div class="">
                            <div class="control-section">
                                <div id="skillsCS" class="control-section">
                                    <ejs-grid id="SkillsGrid" enableAutoFill="true" dataBound="dataBoundResponsive" commandClick="defaultCrudCommandClick"
                                              showColumnChooser="true" allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true" dataSource="new List<object>()"
                                              hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true" actionBegin="defaultCrudActionBegin" actionComplete="defaultActionComplete"
                                              allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" allowTextWrap="true" textWrapSettings="@(new Syncfusion.EJ2.Grids.GridTextWrapSettings() { WrapMode = Syncfusion.EJ2.Grids.WrapMode.Header })"
                                              toolbarClick="defaultCrudToolbarClick" toolbar="@initialCrudToolBar"
                                              allowPaging="true" allowResizing="true">

                                        @{


                                            var skillsAquisitionnTypeEdit = new
                                            {
@@params = new Syncfusion.EJ2.DropDowns.DropDownList() { DataSource = EnumExtensions.GetDescriptions(typeof(OS_SkillAquisitionType)), Query = "new ej.data.Query()", AllowFiltering = true }
                                        };
                                        var skillsTypeEdit = new
                                        {
@@params = new Syncfusion.EJ2.DropDowns.DropDownList() { Created = "skillTypeCreated", Change = "skillTypeChanged", DataSource = EnumExtensions.GetDescriptions(typeof(OS_SkillType)), Query = "new ej.data.Query()", AllowFiltering = true }
                                        };
                                        }
                                        <e-grid-columns>
                                            <e-grid-column field="id" headerText="Id" isIdentity="true" isPrimaryKey="true" textAlign="Center" visible="false" showInColumnChooser="false"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="skillAquisitionTypeDescription" headerText="Aquisition" editType="dropdownedit" edit="skillsAquisitionnTypeEdit" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="skillTypeDescription" headerText="Type" editType="dropdownedit" edit="skillsTypeEdit" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="skillSubTypeId" headerText="Sub Type" editType="dropdownedit" edit="dicValueTypeEdit" valueAccessor="@("dictionaryValueAccessor")" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="description" headerText="Description" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column field="kpiEligibility" headerText="KPI Eligibility" visible="false" displayAsCheckBox="true" editType="booleanedit" allowEditing="false" textAlign="Center"></e-grid-column>

                                            <e-grid-column headerText="Actions" textAlign="Center" commands="defaultCrudCommands"></e-grid-column>
                                        </e-grid-columns>

                                        <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                        <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true" mode="Dialog"></e-grid-editSettings>
                                        <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                        <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                    </ejs-grid>
                                </div>
                                <div id="auditTrail" style="display:none;">
                                    @*<partial na me="_DataAuditTrailPartialView" model="@Model.GetDataAuditTrailModel()" />*@
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>

        <div id="loansTab" class="mainTab" style="display: none">
            <ejs-tab id="loansTabs" animation="verticalAnimation" heightAdjustMode="None" overflowMode="Scrollable" headerPlacement="Left" cssClass="e-fill classicTab">
                <e-tab-tabitems>
                    <e-tab-tabitem header="@(new TabHeader { Text = "Loans List" })" content="#loansListTab"></e-tab-tabitem>
                </e-tab-tabitems>
            </ejs-tab>

            <div id="loansListTab" class="secondaryTab" style="display: none">
                <div class="customForm">
                    <div class="formHeader">
                        <span class="headerTitle">Loans Information</span>
                    </div>
                    <div class="formContent h-fill-available">
                        <div class="">
                            <div class="control-section">
                                <div id="loansCS" class="control-section">
                                    <ejs-grid id="LoansGrid" enableAutoFill="true" dataBound="dataBoundResponsive" commandClick="defaultCrudCommandClick"
                                              showColumnChooser="true" allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true" dataSource="new List<object>()"
                                              hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true" actionBegin="defaultCrudActionBegin" actionComplete="defaultCrudActionComplete"
                                              allowSorting="true" allowMultiSorting="true" gridLines="Horizontal" allowTextWrap="true" textWrapSettings="@(new Syncfusion.EJ2.Grids.GridTextWrapSettings() { WrapMode = Syncfusion.EJ2.Grids.WrapMode.Header })"
                                              toolbarClick="defaultCrudToolbarClick" toolbar="@initialCrudToolBar"
                                              allowPaging="true" allowResizing="true">

                                        @{

                                            var loanStatusEdit = new
                                            {
@@params = new Syncfusion.EJ2.DropDowns.DropDownList() { DataSource = EnumExtensions.GetDescriptions(typeof(EC_LoanStatus)), Query = "new ej.data.Query()", AllowFiltering = true }
                                        };
                                        }
                                        <e-grid-columns>
                                            <e-grid-column field="id" headerText="Id" isIdentity="true" isPrimaryKey="true" textAlign="Center" visible="false" showInColumnChooser="false"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="loanTypeId" headerText="Loan Type" editType="dropdownedit" edit="dicValueTypeEdit" valueAccessor="@("dictionaryValueAccessor")" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="name" headerText="Loan Name" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" type='date' format="dd/MM/yyyy" edit="@(new { @params = new { format = "dd/MM/yyyy" } })" editType='datepickeredit' field="validityFromDate" headerText="Valid From" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" type='date' format="dd/MM/yyyy" edit="@(new { @params = new { format="dd/MM/yyyy" } })" editType='datepickeredit' field="validityToDate" headerText="Valid Till" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="amount" headerText="Loan Amount" allowEditing="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column validationRules="@(new { required=true})" field="loanStatusDescription" headerText="Loan Status" editType="dropdownedit" edit="loanStatusEdit" textAlign="Center"></e-grid-column>

                                            <e-grid-column headerText="Actions" textAlign="Center" commands="defaultCrudCommands"></e-grid-column>
                                        </e-grid-columns>

                                        <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                        <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true" mode="Dialog"></e-grid-editSettings>
                                        <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                        <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                    </ejs-grid>
                                </div>
                                <div id="auditTrail" style="display:none;">
                                    @*<partial na me="_DataAuditTrailPartialView" model="@Model.GetDataAuditTrailModel()" />*@
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>


    </div>
    <ejs-dialog id="alert_dialog" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy with Header" content="Atleast one row should be selected to copy with header">
        <e-dialog-buttons>
            <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
        </e-dialog-buttons>
    </ejs-dialog>
    <ejs-dialog id="alert_dialog_1" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy" content="Atleast one row should be selected to copy">
        <e-dialog-buttons>
            <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
        </e-dialog-buttons>
    </ejs-dialog>
</div>

<script>
    let mainTab;
    function mainTabCreated() {
        mainTab = $('#employeeMainTabs')[0].ej2_instances[0];
        removeStyleClass(mainTab);
        mainTab.element.classList.add('e-fill');
    }
    function defaultTabCreated() {
        console.log('this');
        console.log(this);
        removeStyleClass(this);
    }
    function removeStyleClass(tab) {
        console.log(tab);
        tab.element.classList.remove('e-fill');
        tab.element.classList.remove('e-background');
        tab.element.classList.remove('e-accent');
    }

    function diagramCreated() {

    }
    function getNodeDefaults(obj, data, diagram) {
        //Initialize shape
        console.log("Started");
        let unitType = obj.data.unit.unitType;
        let widthConst = 3;
        if (unitType == 'Business Unit') {
            obj.annotations = [{
                /* tslint:disable:no-string-literal */
                content: obj.data.unit.name, margin: { top: 10, left: 10, right: 10, bottom: 10 },
                style: { color: 'black' }
            }];
            obj.style = {
                fill: '#20cde8', strokeColor: '#22b3c9', strokeWidth: 3
            };
            obj.shape = {
                type: 'Basic', shape: 'Rectangle'
            };
            obj.width = 80 + widthConst * obj.data.unit.name.length;
            obj.height = 60;
        }
        else if (unitType == 'Division') {
            obj.annotations = [{
                /* tslint:disable:no-string-literal */
                content: obj.data.unit.name, margin: { top: 10, left: 10, right: 10, bottom: 10 },
                style: { color: 'black', size: 20 }
            }];
            obj.style = {
                fill: '#ded11d', strokeColor: '#c7bb1c', strokeWidth: 2
            };
            obj.shape = {
                type: 'Basic', shape: 'Rectangle'
            };
            obj.width = 65 + widthConst * obj.data.unit.name.length;
            obj.height = 45;
        }
        else if (unitType == 'Department') {
            obj.annotations = [{
                /* tslint:disable:no-string-literal */
                content: obj.data.unit.name, margin: { top: 10, left: 10, right: 10, bottom: 10 },
                style: { color: 'black' }
            }];
            obj.style = {
                fill: '#f0b01d', strokeColor: '#d69e1c', strokeWidth: 1
            };
            obj.shape = {
                type: 'Basic', shape: 'Rectangle'
            };
            obj.width = 60 + widthConst * obj.data.unit.name.length;
            obj.height = 40;
        }
        else if (unitType == 'Position') {
            obj.annotations = [{
                /* tslint:disable:no-string-literal */
                content: obj.data.unit.name, margin: { top: 10, left: 10, right: 10, bottom: 10 },
                style: { color: 'black' }
            }];
            obj.style = {
                fill: '#28eb83', strokeColor: '#22c970', strokeWidth: 1
            };
            obj.shape = {
                type: 'Basic', shape: 'Rectangle'
            };
            obj.width = 60 + widthConst * obj.data.unit.name.length;
            obj.height = 40;
        }

        return obj;
    }
    function getConnectorDefaults(connector, diagram) {
        connector.type = 'Orthogonal';
        connector.style.fill = '#707070';
        connector.style.strokeColor = '#707070';
        connector.targetDecorator = {
            style: {
                strokeColor: '#707070',
                fill: '#707070'
            },
        };
        return connector;
    }

    function fullNameValueAccessor(field, data, column) {
        //show only the file name in grid columns
        try {
            let result;
            if ((Object.byString(data, field))) {
                let value = fullNameValueObjects.filter(function (x) { return x.id == Object.byString(data, field) })[0];
                result = value.firstName + ' ';
                result += value.lastName;
            }
            else {
                result = data[field]
            }
            return result;
        }
        catch (ex) {
            console.error(ex);
        }
    }
    function codeNameValueAccessor(field, data, column) {
        //show only the file name in grid columns
        try {
            let result;
            if ((Object.byString(data, field))) {
                let value = codeNameTypes.filter(function (x) { return x.id == Object.byString(data, field) })[0];
                result = value.code + ' - ';
                result += value.name;
            }
            else {
                result = data[field]
            }
            return result;
        }
        catch (ex) {
            console.error({ ex, data, field, column });
        }
    }
    function dictionaryValueAccessor(field, data, column) {
        //show only the file name in grid columns
        try {
            let result;
            if ((Object.byString(data, field))) {
                let value = dictionaryValueTypes.filter(function (x) { return x.id == Object.byString(data, field) })[0];
                result = value.value;
                result += ` (${value.key})` ;
            }
            else {
                result = data[field]
            }
            return result;
        }
        catch (ex) {
            console.error({ ex, data, field, column });
        }
    }
    function singleFileNameAccessor(field, data, column) {
        //show only the file name in grid columns
        if (typeof (Object.byString(data, field)) != 'undefined' && Object.byString(data, field) != '' && Object.byString(data, field).length > 0)
            return (Object.byString(data, field));
        else {
            return "—";
        }
    }
    function fileNameAccessor(field, data, column) {
        //show only the file name in grid columns
        if (typeof (Object.byString(data, field)) != 'undefined' && Object.byString(data, field).length > 0)
            return (Object.byString(data, field))[0].name;
        else {
            return "—";
        }
    }

    let payComponentValueTypeDD;
    function payComponentValueTypeCreated() {
        console.log('payComponentValueTypeCreated');
        payComponentValueTypeDD = this;
        if (payComponentTypeDD.itemData)
            payComponentValueTypeDD.value = payComponentTypeDD.itemData.data.valueTypeDescription;
    }

    let curAcademiaCertificateSubTypeId;
    let academicCertificateTypeDD;
    let academicCertificateSubTypeDD;
    function academicCertificateTypeCreated() {
        academicCertificateTypeDD = this;
    }
    function academicCertificateTypeChanged() {
        let selection = this.itemData;
        if (selection == '@(EnumExtensions.GetDescription(OS_AcademiaCertificateType.Education))') {
            academiaProfileGrid.showSpinner();
            cERP.appServices.setup.lookup.dictionaryValue.getAllByValueType(ValueTypeModules.EducationCertificate).done(function (data) {
                academiaProfileGrid.hideSpinner();

                dictionaryValueTypes.removeIf(function (x) { return data.filter(function (y) { return y.id == x.id }).length > 0 })
                dictionaryValueTypes = dictionaryValueTypes.concat(data);

                let dataMS = [];
                for (let i = 0; i < data.length; i++) {
                    let item = data[i];
                    dataMS.push({ label: `${item.value} (${item.key})`, value: item.id, data: item });
                }

                academicCertificateSubTypeDD.value = null;
                academicCertificateSubTypeDD.dataSource = dataMS;
            });
        }
        else {
            //loadDictionaryValues(ValueTypeModules.TrainingCertificate, [academiaProfileGrid], ['certificateSubType.value']);

            academiaProfileGrid.showSpinner();
            cERP.appServices.setup.lookup.dictionaryValue.getAllByValueType(ValueTypeModules.TrainingCertificate).done(function (data) {
                academiaProfileGrid.hideSpinner();

                dictionaryValueTypes.removeIf(function (x) { return data.filter(function (y) { return y.id == x.id }).length > 0 })
                dictionaryValueTypes = dictionaryValueTypes.concat(data);

                let dataMS = [];
                for (let i = 0; i < data.length; i++) {
                    let item = data[i];
                    dataMS.push({ label: `${item.value} (${item.key})`, value: item.id, data: item });
                }

                academicCertificateSubTypeDD.value = null;
                academicCertificateSubTypeDD.dataSource = dataMS;
            });
        }
    }

    let curSkillSubTypeId;
    let skillTypeDD;
    let skillSubTypeDD;
    function skillTypeCreated() {
        skillTypeDD = this;
    }
    function skillTypeChanged() {
        let selection = this.itemData;
        if (selection == '@(EnumExtensions.GetDescription(OS_SkillType.TypeI))') {
            //loadDictionaryValues(ValueTypeModules.TypeISkill, [skillsProfileGrid], ['subType.value']);

            skillsProfileGrid.showSpinner();
            cERP.appServices.setup.lookup.dictionaryValue.getAllByValueType(ValueTypeModules.TypeISkill).done(function (data) {
                skillsProfileGrid.hideSpinner();

                dictionaryValueTypes.removeIf(function (x) { return data.filter(function (y) { return y.id == x.id }).length > 0 })
                dictionaryValueTypes = dictionaryValueTypes.concat(data);

                let dataMS = [];
                for (let i = 0; i < data.length; i++) {
                    let item = data[i];
                    dataMS.push({ label: `${item.value} (${item.key})`, value: item.id, data: item });
                }

                skillSubTypeDD.value = null;
                skillSubTypeDD.dataSource = dataMS;
            });

        }
        else {
            //loadDictionaryValues(ValueTypeModules.TypeIISkill, [skillsProfileGrid], ['subType.value']);
            skillsProfileGrid.showSpinner();
            cERP.appServices.setup.lookup.dictionaryValue.getAllByValueType(ValueTypeModules.TypeIISkill).done(function (data) {
                skillsProfileGrid.hideSpinner();

                dictionaryValueTypes.removeIf(function (x) { return data.filter(function (y) { return y.id == x.id }).length > 0 })
                dictionaryValueTypes = dictionaryValueTypes.concat(data);

                let dataMS = [];
                for (let i = 0; i < data.length; i++) {
                    let item = data[i];
                    dataMS.push({ label: `${item.value} (${item.key})`, value: item.id, data: item });
                }

                skillSubTypeDD.value = null;
                skillSubTypeDD.dataSource = dataMS;
            });

        }
    }

    let payComponentValueTypeAmount;
    function numericTextBoxEditCreated(args) {
        //console.log('this');
        //console.log(this);
        if (this.element.id == 'BenefitsGridpayComponentComponentTypeAmount')
            payComponentValueTypeAmount = this;
    }

    let payComponentValueTypeComponentTypeDD;
    let payComponentTypeDD;
    let payComponentDD;
    let payFrequencyDD;

    let curPayComponentId;
    function codeNameTypeCreated(args) {
        console.log(this.element.id);
        if (this.element.id == 'BenefitsGridpayComponent___payComponentType___valueComponentTypeId') {
            payComponentValueTypeComponentTypeDD = this;

            if (payComponentTypeDD.itemData) {
                let data = payComponentTypeDD.itemData.data;
                payComponentValueTypeComponentTypeDD.dataSource = [{ label: data.valueComponentType.code + ' - ' + data.valueComponentType.name, value: data.valueComponentType.id }];
                payComponentValueTypeComponentTypeDD.value = data.valueComponentTypeId;
            }
        }
        else if (this.element.id == 'BenefitsGridpayComponent___payComponentTypeId') {
            payComponentTypeDD = this;
            if (payComponentTypeDD.itemData && payComponentValueTypeDD)
                payComponentValueTypeDD.value = payComponentTypeDD.itemData.data.valueTypeDescription;
        }
        else if (this.element.id == 'BenefitsGridpayComponentId') {
            payComponentDD = this;
            if (payComponentTypeDD.itemData) {
                let data = payComponentTypeDD.itemData.data;

                cERP.appServices.hR.organizationalManagement.payrollStructure.pS_PayComponent.getAllByPayComponentType(data.id).done(function (data) {
                    let dataMS = [];
                    for (let i = 0; i < data.length; i++) {
                        let item = data[i];
                        dataMS.push({ label: `${item.code} - ${item.name}`, value: item.id, data: item });
                    }

                    codeNameTypes.removeIf(function (x) { return data.filter(function (y) { return y.id == x.id }).length > 0 })
                    codeNameTypes = codeNameTypes.concat(data);

                    //console.log(dataMS);
                    payComponentDD.dataSource = dataMS;
                    payComponentDD.value = curPayComponentId;
                });
            }
        }
        else if (this.element.id == 'BenefitsGridpayComponent___payFrequencyId') {
            payFrequencyDD = this;
            if (payComponentTypeDD.itemData) {
                let data = payComponentTypeDD.itemData.data;
                payFrequencyDD.dataSource = [{ label: data.valueComponentType.code + ' - ' + data.valueComponentType.name, value: data.valueComponentType.id }];
                payFrequencyDD.value = data.valueComponentTypeId;
            }
        }
    }

    function dicValueTypeCreated(args) {
        console.log(this.element.id);
        if (this.element.id == 'AcademiaGridacademiaCertificateSubTypeId') {
            academicCertificateSubTypeDD = this;

            if (academicCertificateTypeDD.itemData) {
                let selection = academicCertificateTypeDD.itemData;
                if (selection == '@(EnumExtensions.GetDescription(OS_AcademiaCertificateType.Education))') {
                    academiaProfileGrid.showSpinner();
                    cERP.appServices.setup.lookup.dictionaryValue.getAllByValueType(ValueTypeModules.EducationCertificate).done(function (data) {
                        academiaProfileGrid.hideSpinner();

                        dictionaryValueTypes.removeIf(function (x) { return data.filter(function (y) { return y.id == x.id }).length > 0 })
                        dictionaryValueTypes = dictionaryValueTypes.concat(data);

                        let dataMS = [];
                        for (let i = 0; i < data.length; i++) {
                            let item = data[i];
                            dataMS.push({ label: `${item.value} (${item.key})`, value: item.id, data: item });
                        }

                        academicCertificateSubTypeDD.dataSource = dataMS;
                        academicCertificateSubTypeDD.value = curAcademiaCertificateSubTypeId;
                    });
                }
                else {
                    //loadDictionaryValues(ValueTypeModules.TrainingCertificate, [academiaProfileGrid], ['certificateSubType.value']);

                    academiaProfileGrid.showSpinner();
                    cERP.appServices.setup.lookup.dictionaryValue.getAllByValueType(ValueTypeModules.TrainingCertificate).done(function (data) {
                        academiaProfileGrid.hideSpinner();

                        dictionaryValueTypes.removeIf(function (x) { return data.filter(function (y) { return y.id == x.id }).length > 0 })
                        dictionaryValueTypes = dictionaryValueTypes.concat(data);

                        let dataMS = [];
                        for (let i = 0; i < data.length; i++) {
                            let item = data[i];
                            dataMS.push({ label: `${item.value} (${item.key})`, value: item.id, data: item });
                        }

                        academicCertificateSubTypeDD.dataSource = dataMS;
                        academicCertificateSubTypeDD.value = curAcademiaCertificateSubTypeId;
                    });
                }
            }
        }
        else if (this.element.id == 'SkillsGridskillSubTypeId') {
            skillSubTypeDD = this;
            if (skillTypeDD.itemData) {
                let selection = skillTypeDD.itemData;

                if (selection == '@(EnumExtensions.GetDescription(OS_SkillType.TypeI))') {
                    //loadDictionaryValues(ValueTypeModules.TypeISkill, [skillsProfileGrid], ['subType.value']);

                    skillsProfileGrid.showSpinner();
                    cERP.appServices.setup.lookup.dictionaryValue.getAllByValueType(ValueTypeModules.TypeISkill).done(function (data) {
                        skillsProfileGrid.hideSpinner();

                        dictionaryValueTypes.removeIf(function (x) { return data.filter(function (y) { return y.id == x.id }).length > 0 })
                        dictionaryValueTypes = dictionaryValueTypes.concat(data);

                        let dataMS = [];
                        for (let i = 0; i < data.length; i++) {
                            let item = data[i];
                            dataMS.push({ label: `${item.value} (${item.key})`, value: item.id, data: item });
                        }

                        skillSubTypeDD.dataSource = dataMS;
                        skillSubTypeDD.value = curSkillSubTypeId;
                    });

                }
                else {
                    //loadDictionaryValues(ValueTypeModules.TypeIISkill, [skillsProfileGrid], ['subType.value']);
                    skillsProfileGrid.showSpinner();
                    cERP.appServices.setup.lookup.dictionaryValue.getAllByValueType(ValueTypeModules.TypeIISkill).done(function (data) {
                        skillsProfileGrid.hideSpinner();

                        dictionaryValueTypes.removeIf(function (x) { return data.filter(function (y) { return y.id == x.id }).length > 0 })
                        dictionaryValueTypes = dictionaryValueTypes.concat(data);

                        let dataMS = [];
                        for (let i = 0; i < data.length; i++) {
                            let item = data[i];
                            dataMS.push({ label: `${item.value} (${item.key})`, value: item.id, data: item });
                        }

                        skillSubTypeDD.dataSource = dataMS;
                        skillSubTypeDD.value = curSkillSubTypeId;
                    });
                }
            }
        }
    }

    function codeNameEditChanged(args) {
        console.log(this.element.id);

        let selection = this.itemData;
        console.log(selection);
        if (this.element.id == 'BenefitsGridpayComponent___payComponentTypeId') {

            payComponentValueTypeDD.value = selection.data.valueTypeDescription;
            if (selection.data.valueType == @((int)PS_PayComponentTypeValueType.Amount)) {
                payComponentValueTypeComponentTypeDD.dataSource = [];
            } else {
                payComponentValueTypeComponentTypeDD.dataSource = [{ label: selection.data.valueComponentType.code + ' - ' + selection.data.valueComponentType.name, value: selection.data.valueComponentType.id }];
                payComponentValueTypeComponentTypeDD.value = selection.data.valueComponentTypeId;
            }
            payComponentValueTypeAmount.value = selection.data.amount;
            payComponentDD.dataSource = [];

            cERP.appServices.hR.organizationalManagement.payrollStructure.pS_PayComponent.getAllByPayComponentType(selection.data.id).done(function (data) {
                let dataMS = [];
                for (let i = 0; i < data.length; i++) {
                    let item = data[i];
                    dataMS.push({ label: `${item.code} - ${item.name}`, value: item.id, data: item });
                }

                codeNameTypes.removeIf(function (x) { return data.filter(function (y) { return y.id == x.id }).length > 0 })
                codeNameTypes = codeNameTypes.concat(data);

                //console.log(dataMS);
                payComponentDD.dataSource = dataMS;

                console.log('Pay Component Type Id');
                console.log(selection.data.id);
                if (isEditingEmployee && curBenefitEdit.payComponentTypeId == selection.data.id)
                    payComponentDD.value = curBenefitEdit.payComponentId;
            });
            //compBenefitsGrid.columns.filter(function (x) { return x.field == 'payComponentType.valueComponentType.name' })[0].value = selection.data.valueComponentType;
            //compBenefitsGrid.columns.filter(function (x) { return x.field == 'payComponentType.amount' })[0].text = selection.data.amount;
        }
        else if (this.element.id == 'BenefitsGridpayComponentId') {
            payFrequencyDD.dataSource = [{ label: selection.data.payFrequency.code + ' - ' + selection.data.payFrequency.name, value: selection.data.payFrequencyId }];
            payFrequencyDD.value = selection.data.payFrequencyId;

            payComponentValueTypeAmount.enabled = selection.data.canOverride;

            if (isEditingEmployee && selection.data.id == curBenefitEdit.payComponentId)
                payComponentValueTypeAmount.value = curBenefitEdit.payComponentComponentTypeAmount;
        }
    }

    function dicValueEditChanged(args) {
        //console.log(this.element.id);


    }

    function editDependant(dependnat) {
        console.log('Editing Dependant');
        console.log(dependnat);
    }

    let elem;
    let uploadObj;
    function fileCreate() {
        elem = document.createElement('input');
        return elem;
    }
    function fileRead(args) {
        return uploadObj.filesData;
    }
    function fileDestroy() {
        uploadObj.destroy();
    }
    function fileWrite(args) {
        if (args.requestType === 'beginEdit') {
        }
        uploadObj = new ej.inputs.Uploader({
            //while editing we have loaded the previous file
            files: (args.requestType === 'beginEdit') ? args.rowData.files : [''],
            allowedExtensions: '.jpg,.png,.docx,.xlsx,.pdf,.doc, .xls',
            minFileSize: 100,
            maxFileSize: 1500000,
            multiple: false
        });
        uploadObj.appendTo(elem)
    }

    function checkValidity(endDate) {
        let validityEndDate = new Date(endDate);
        let isValid = new Date().getDate() < validityEndDate.getDate();

        return isValid;
    }
    function updateAndCheckPalePrimaryValidity(dataSource, cur = null) {

        let primaries = dataSource.filter(function (x) { return x.isPrimary });
        if (primaries.length == 0 || primaries.length > 1) {
            let isSet = false;
            if (cur != null && cur.isPrimary)
                isSet = true;
            $.each(dataSource, function (i, x) {
                if (cur != null && isSet && x.id == cur.id) { }
                else {
                    x.isPrimary = false;
                    if (!isSet) {
                        x.isPrimary = true;
                        isSet = true;
                    }
                }
            });
        }
    }
    function updateAndCheckPrimaryValidity(dataSource, cur = null) {
        console.log(dataSource);
        $.each(dataSource, function (i, x) {
            if (!checkValidity(x.validityToDate)) x.isPrimary = false;
        });

        let primaries = dataSource.filter(function (x) { return x.isPrimary });
        console.log('primaries');
        console.log(primaries);
        if (primaries.length == 0 || primaries.length > 1) {
            let isSet = false;
            if (cur != null && checkValidity(cur.validityToDate) && cur.isPrimary)
                isSet = true;
            $.each(dataSource, function (i, x) {
                if (cur != null && isSet && x.id == cur.id) { }
                else
                    x.isPrimary = false;
                if (checkValidity(x.validityToDate)) {
                    if (!isSet) {
                        x.isPrimary = true;
                        isSet = true;
                    }
                }
            });
        }
        console.log(dataSource);
    }
    function getUniqueIdForDS(dataSource, max = 100) {
        let id = Math.floor(Math.random() * max);
        let isUnique = dataSource.filter(function (x) { return x.id == id; }).length == 0;
        while (!isUnique) {
            id = Math.floor(Math.random() * max);
            isUnique = dataSource.filter(function (x) { return x.id == id; }).length == 0;
        }

        return id;
    }


    function defaultPrimaryFilesCrudActionComplete(args) {
        if (this.element.id.includes('BenefitsGrid')) {
            this.columns[1].visible = false;
        }
        if (args.requestType == "add") {

        }
        else if (args.requestType == "save") {
            console.log('save');
            console.log(this.dataSource);

            let isPrimary = args.data.isPrimary;
            let isValid = checkValidity(args.data.validityToDate);
            if (isPrimary) {
                args.data.isPrimary = isValid;
            }

            updateAndCheckPrimaryValidity(this.dataSource, args.data);

            let cur = this.dataSource.filter(function (x) { return x.id == args.data.id })[0];
            args.data.id = getUniqueIdForDS(this.dataSource);

            if (typeof args.data.attachment !== 'undefined' && args.data.attachment.length > 0) {
                cur.files = [...args.data.attachment];
                cur.attachment = args.data.attachment[0].name;
                console.log(cur.files);
                console.log(this.dataSource);
            }
            else {
                cur.files = [];
            }
            

            this.refresh();
        }
    }
    function defaultPrimaryFilesCrudActionBegin(args) {
        let type = args.requestType;
        if (type == "beginEdit" || type == "add") {
            let dependantColumns = this.columns.filter(function (x) { return x.field == 'dependantId' });
            attachDependantsReferences(dependantColumns);
        }
    }
    function defaultPrimaryFilesCrudCommandClick() {

    }

    function defaultPalePrimaryCrudActionComplete(args) {
        if (args.requestType == "add") {

        }
        else if (args.requestType == "save") {
            console.log('save');
            console.log(this.dataSource);

            updateAndCheckPalePrimaryValidity(this.dataSource, args.data);

            let cur = this.dataSource.filter(function (x) { return x.id == args.data.id })[0];
            args.data.id = getUniqueIdForDS(this.dataSource);

            this.refresh();
        }
    }
    function defaultPalePrimaryCrudActionBegin(args) {
        let type = args.requestType;
        if (type == "beginEdit" || type == "add") {
            let dependantColumns = this.columns.filter(function (x) { return x.field == 'dependantId' });
            attachDependantsReferences(dependantColumns);
        }
    }
    function defaultPalePrimaryCrudCommandClick() {

    }

    function defaultPrimaryCrudActionComplete(args) {
        if (args.requestType == "add") {

        }
        else if (args.requestType == "save") {
            console.log('save');
            console.log(this.dataSource);

            let isPrimary = args.data.isPrimary;
            let isValid = checkValidity(args.data.validityToDate);
            if (isPrimary) {
                args.data.isPrimary = isValid;
            }

            updateAndCheckPrimaryValidity(this.dataSource, args.data);

            let cur = this.dataSource.filter(function (x) { return x.id == args.data.id })[0];
            args.data.id = getUniqueIdForDS(this.dataSource);

            this.refresh();
        }
    }
    function defaultPrimaryCrudActionBegin(args) {
        let type = args.requestType;
        if (type == "beginEdit" || type == "add") {
            let dependantColumns = this.columns.filter(function (x) { return x.field == 'dependantId' });
            attachDependantsReferences(dependantColumns);
        }
    }
    function defaultPrimaryCrudCommandClick() {

    }

    function defaultCrudActionComplete(args) {
        if (args.requestType == "add") {

        }
        else if (args.requestType == "save") {
            console.log('save');
            console.log(this.dataSource);

            //let cur = this.dataSource.filter(function (x) { return x.id == args.data.id })[0];
            args.data.id = getUniqueIdForDS(this.dataSource);

            this.refresh();

            if (this.element.id.includes('DependantsGrid')) {
                dependantNationalIndentitiesGrid.refresh();
                dependantPassportTravelDocsGrid.refresh();

                let dependantsBook = [];

                for (var i = 0; i < this.dataSource.length; i++) {
                    let curDependant = this.dataSource[i];
                    let data = {
                        relationshipTypeId: curDependant.relationshipTypeId,
                        header_title: curDependant.firstName + ' ' + curDependant.lastName,
                        header_subtitle: dictionaryValueAccessor('relationshipTypeId', curDependant),
                        header_birthCountry: dictionaryValueAccessor('birthCountryId', curDependant),
                        header_dateOfBirth: curDependant.dateOfBirth,
                        header_placeOfBirth: curDependant.placeOfBirth,
                        cardImage: false,//{ url: '../css/card/Tile_2.png', tag: 'client' },
                        cardContent: false,//'Node.js is a wildly popular platform for writing web applications that has revolutionized web development in many ways.',
                        card_action_btn: {
                            action_btns: [{ tag: '', target: '_blank', text: 'Edit', action: editDependant(this.dataSource[i]) }],
                            isVertical: true
                        },
                        isHorizontal: false
                    };
                    dependantsBook.push(data);
                }
                console.log('Dependants Book');
                console.log(dependantsBook);
                cardObj = dependantsBook;
                destroyAllCard();
                cardRendering(cardObj);
            }
        }
    }
    let curBenefitEdit;
    let loadingCurBenefit = false;
    function defaultCrudActionBegin(args) {
        let type = args.requestType;
        console.log(type);
        if (this.element.id.includes('BenefitsGrid')) {
            this.columns[1].visible = false;
            curBenefitEdit = args.rowData;
        }
        if (type == "add") {
            if (this.element.id.includes('BenefitsGrid')) {
                this.columns[1].visible = true;
            }
        }
        else if (type == "beginEdit") {
            let dependantColumns = this.columns.filter(function (x) { return x.field == 'dependantId' });
            attachDependantsReferences(dependantColumns);

            if (this.element.id.includes('BenefitsGrid')) {
                this.columns[1].visible = true;
                console.log('Benefits');
                console.log(args);
                curPayComponentId = args.rowData.payComponentId;
                console.log(curPayComponentId);
            }
            else if (this.element.id.includes('SkillsGrid')) {
                console.log('Skills');
                console.log(args);
                curSkillSubTypeId = args.rowData.skillSubTypeId;
                console.log(curSkillSubTypeId);
            }
            else if (this.element.id.includes('AcademiaGrid')) {
                console.log('Academia');
                console.log(args);
                curAcademiaCertificateSubTypeId = args.rowData.academiaCertificateSubTypeId;
                console.log(curAcademiaCertificateSubTypeId);
            }
        }
        else if (type == "refresh" || type == "save") {
            if (this.element.id.includes('BenefitsGrid')) {
                for (var i = 0; i < this.dataSource.length; i++) {
                    let benefit = this.dataSource[i];
                    console.log('Benefit Loading');
                    console.log(benefit);
                    //if (loadingCurBenefit) continue;
                    if (benefit.payComponent.payComponentType == null || benefit.payComponent.payFrequency == null) {
                        console.log('Pay Component Loading');
                        loadingCurBenefit = true;
                        cERP.appServices.hR.organizationalManagement.payrollStructure.pS_PayComponent.get(benefit.payComponentId).done(function (data) {
                            console.log(data);
                            codeNameTypes.removeIf(function (x) { return x.id == data.id })
                            codeNameTypes.push(data);
                            codeNameTypes.removeIf(function (x) { return x.id == data.payFrequencyId })
                            codeNameTypes.push(data.payFrequency);
                            codeNameTypes.removeIf(function (x) { return x.id == data.payComponentTypeId })
                            codeNameTypes.push(data.payComponentType);

                            console.log('Pay Component Loaded');
                            console.log(data);
                            benefit.payComponent = data;
                            loadingCurBenefit = false;
                        });
                    }
                    else {
                        codeNameTypes.removeIf(function (x) { return x.id == benefit.payComponent.id })
                        codeNameTypes.push(benefit.payComponent);
                        codeNameTypes.removeIf(function (x) { return x.id == benefit.payComponent.payFrequencyId })
                        codeNameTypes.push(benefit.payComponent.payFrequency);
                        codeNameTypes.removeIf(function (x) { return x.id == benefit.payComponent.payComponentTypeId })
                        codeNameTypes.push(benefit.payComponent.payComponentType);
                    }
                }
            }
        }
    }
    function defaultCrudCommandClick() {

    }

    function defaultActionComplete(args) {
        if (this.element.id.includes('BenefitsGrid')) {
            this.columns[1].visible = false;
        }
        if (args.requestType == "add") {

        }
        else if (args.requestType == "save") {
            console.log('save');
            //console.log(this.dataSource);

            //let cur = this.dataSource.filter(function (x) { return x.id == args.data.id })[0];
            //args.data.id = getUniqueIdForDS(this.dataSource);

            this.refresh();
        }
    }
    function defaultActionBegin(args) {
        let type = args.requestType;
        if (type == "beginEdit" || type == "add") {

        }
    }
    function defaultCommandClick() {

    }

    function defaultFilesCrudActionComplete(args) {
        if (args.requestType == "add") {

        }
        else if (args.requestType == "save") {
            console.log('save');
            console.log(this.dataSource);

            let cur = this.dataSource.filter(function (x) { return x.id == args.data.id })[0];
            args.data.id = getUniqueIdForDS(this.dataSource);

            if (typeof args.data.attachment !== 'undefined' && args.data.attachment.length > 0) {
                cur.files = [...args.data.attachment];
                cur.attachment = args.data.attachment[0].name;
                console.log(cur.files);
                console.log(this.dataSource);
            }
            else {
                cur.files = [];
            }
            
            this.refresh();
        }
    }
    function defaultFilesCrudActionBegin(args) {
        let type = args.requestType;
        if (type == "beginEdit" || type == "add") {
            let dependantColumns = this.columns.filter(function (x) { return x.field == 'dependantId' });
            console.log(dependantColumns);
            attachDependantsReferences(dependantColumns);
        }
    }
    function defaultFilesCrudCommandClick() {

    }

    function attachDependantsReferences(dependantColumns) {
        if (dependantColumns.length > 0) {
            let dependants = dependantsGrid.dataSource;

            $.each(dependants, function (i, x) { x.name = x.firstName + ' ' + x.lastName; });

            fullNameValueObjects = fullNameValueObjects.filter(function (x) { return dependants.filter(function (y) { return y.id == x.id }).length > 0 });
            fullNameValueObjects = fullNameValueObjects.concat(dependants);
            $.each(dependantColumns, function (i, x) { return x.edit.params.dataSource = dependants; });
        }
    }


    function alertBtnClick() {
        let dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
        let dialogObj1 = document.getElementById('alert_dialog_1').ej2_instances[0];
        dialogObj.hide();
        dialogObj1.hide();
    }


    function removeImage(e) {
        $('#profileImageUpload').val('');
        $('#imageCancel').hide();
        $('#remove').hide();

        $('#EmpPhoto').attr('src', '/Uploads/noimage.jpg');
        $('#EmpPhoto').hide();
        $('#EmpPhoto').fadeIn(650);

    }

    function showpreview(input) {
        if (input.files && input.files[0]) {

            var reader = new FileReader();
            reader.onload = function (e) {
                $('#imageCancel').show();
                $('#imageCancel').css('display', '');
                $('#remove').show();

                $('#EmpPhoto').attr('src', e.target.result);
                $('#EmpPhoto').hide();
                $('#EmpPhoto').fadeIn(650);
            }
            //reader.onload = function (e) {
            //    $('#EmpPhoto').css('visibility', 'visible');
            //    $('#EmpPhoto').attr('src', e.target.result);
            //}
            reader.readAsDataURL(input.files[0]);
        }

    }

</script>