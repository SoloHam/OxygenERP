@page "/HR/Employees"
@model CERP.Web.Areas.HR.Pages.Employees.ListModel
@{
    ViewData["Title"] = "Employees";
    ViewData["IconClass"] = "fa fa-user-tie";
    ViewData["HeaderTitle"] = "EMPLOYEES";
    ViewData["SubTitle"] = "List of Employees";
    ViewData["Area"] = "HR";

    ViewData["IsList"] = false;
    ViewData["IsCreate"] = true;
    ViewData["CreateNewText"] = "Add Employee";
    ViewData["CreateNewLink"] = "/Employees/Employee";

    var alertanimation = new Syncfusion.EJ2.Popups.DialogAnimationSettings { Effect = Syncfusion.EJ2.Popups.DialogEffect.None };
}
@section styles {
    <link href="~/libs/syncfusion/ej2-grid/styles/fabric.css" rel="stylesheet" />

    <style>
        .e-grid .e-headercell {
            background-color: #f5f5f5;
            /*font-size: 18px;*/
        }

        .e-detailcell .e-headercell {
            background-color: #6691b1 !important;
            color: rgb(253,253,253);
            /*font-size: 18px;*/
        }



        /*.statustemp.e-terminatedcolor {
            background-color: #ffd7cc;
        }

        .statustemp.e-probationcolor {
            background-color: #fff8d4;
        }

        .statustemp.e-activecolor {
            background-color: #ccffcc;
        }

        .statustxt.e-activecolor {
            color: #00cc00;
        }

        .statustxt.e-inactivecolor {
            color: #f68459;
        }

        .statustxt.e-probationcolor {
            color: #d8c238;
        }

        #Trusttext {
            position: relative;
            top: 1px;
        }

        .e-image {
            height: 13px;
            width: 14px;
        }

        .statustemp.e-terminatedcolor {
            margin: auto;
            width: 85px;
        }

        .statustemp.e-activecolor {
            margin: auto;
            width: 57px;
        }

        .statustemp.e-probationcolor {
            margin: auto;
            width: 80px;
        }

        .statustemp {
            position: relative;
            height: 19px;
            border-radius: 5px;
            text-align: center
        }*/
    </style>
}
@section scripts {
    <!-- Syncfusion Essential JS 2 Scripts -->
    <script src="~/libs/syncfusion/ej2-grid/scripts/ej2.min.js"></script>
    <ejs-scripts></ejs-scripts>
}
<partial name="_DefaultPageHeader" />
<div class="site-content customContentArea" style="padding-top: 0;
        background-color: rgb(253,253,253);">
    <div class="control-section">
        <ejs-grid id="Grid" dataSource="@ViewData["Employees_DS"]" enableAutoFill="true" columns="@Model.GetPrimaryGridColumns()"
                  dataBound="dataBound" commandClick="commandClick" queryCellInfo="queryCellInfo" showColumnChooser="true"
                  allowExcelExport="true" allowGrouping="true" height="100%" allowPdfExport="true" allowReordering="true"
                  hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true" detailTemplate="#detailtemplate"
                  allowSorting="true" allowMultiSorting="true" gridLines="Both" allowTextWrap="true" textWrapSettings="@(new Syncfusion.EJ2.Grids.GridTextWrapSettings() { WrapMode = Syncfusion.EJ2.Grids.WrapMode.Header })"
                  toolbarClick="toolbarClick" toolbar="@(new List<object>() {"ExcelExport", "PdfExport", "CsvExport", "Print", "Search", "Delete", new { text = "Copy", tooltipText = "Copy", prefixIcon = "e-copy", id = "copy" }, new { text = "Copy With Header", tooltipText = "Copy With Header", prefixIcon = "e-copy", id = "copyHeader" }, "ColumnChooser" })"
                  allowPaging="true" allowResizing="true">

            <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
            <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="false"></e-grid-editSettings>
            <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
            <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
        </ejs-grid>
    </div>
    <style type="text/css" class="cssStyles">
        .detailtable td {
            font-size: 13px;
            padding: 4px;
            max-width: 0;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .photo {
            width: 100px;
            height: 100px;
            border-radius: 50px;
            box-shadow: inset 0 0 1px #e0e0e0, inset 0 0 14px rgba(0, 0, 0, 0.2);
        }
    </style>
    <script type="text/x-jsrender" id="detailtemplate">
        @*${console.log(ExtraProperties)}*@
        @*let GetProfilePic = (ProfilePic == null || ProfilePic == "") ? "noimage.jpg" : ProfilePic;*@
        @*console.log(GetProfilePic);*@
        <table class="detailtable" width="100%">
            <colgroup>
                <col width="35%" />
                <col width="35%" />
                <col width="30%" />
            </colgroup>
            <tbody>
                <tr>
                    <td rowspan="4" style="text-align: center;">
                        <img class="photo" src="/Uploads/${ProfilePic}" alt="${Id}" />
                    </td>
                    <td>
                        <span style="font-weight: 500;">First Name: </span> ${FirstName}
                    </td>
                    <td>
                        <span style="font-weight: 500;">Gender: </span> ${Gender.Value}
                    </td>
                </tr>
                <tr>
                    <td>
                        <span style="font-weight: 500;">Last Name: </span> ${LastName}
                    </td>
                    <td>
                        <span style="font-weight: 500;">Email: </span> ${ExtraProperties['contactInformation'].PrimaryContact.Email}
                    </td>
                </tr>
                <tr>
                    <td>
                        <span style="font-weight: 500;">Department: </span> ${Position.Department.Name}
                    </td>
                    <td>
                        <span style="font-weight: 500;">Join Date: </span> ${JoiningDate}
                    </td>
                </tr>
                <tr>
                    <td>
                        <span style="font-weight: 500;">Position: </span> ${Position.Title}
                    </td>
                    <td>
                        <span style="font-weight: 500;">Phone: </span> ${ExtraProperties['contactInformation'].PrimaryContact.PhoneNumber}
                    </td>
                </tr>
            </tbody>
        </table>
    </script>
    <script type="text/x-jsrender" id="statusTemplate">
        @*<div id="status" class="statustemp">
            <span class="statustxt">${EmployeeStatus.Value}</span>
        </div>*@
        <div id="status" class="statustemp">
            <span class="statustxt">${EmployeeStatus.Value}</span>
        </div>
    </script>
    <script type="text/x-jsrender" id="contractStatusTemplate">
        <div id="contractStatus" class="statustemp">
            <span class="statustxt">${ContractStatus.Value}</span>
        </div>
    </script>
    <script type="text/x-jsrender" id="ContractStatusItemTemp">
        ${contractStatusDetail(data)}
    </script>

    <script type="text/x-jsrender" id="StatusItemTemp">
        ${statusDetail(data)}
    </script>

    <script id="coltemplate" type="text/x-template">
        <span class="zmdi zmdi-pin" style="color:#797878"></span>
        <span id="locationtext">&nbsp${Nationality.Value}</span>
    </script>
</div>

<ejs-dialog id="alert_dialog" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy with Header" content="Atleast one row should be selected to copy with header">
    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
    </e-dialog-buttons>
</ejs-dialog>
<ejs-dialog id="alert_dialog_1" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy" content="Atleast one row should be selected to copy">
    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
    </e-dialog-buttons>
</ejs-dialog>

<script>
    function queryCellInfo(args) {
        if (args.column.field === 'EmployeeStatus.Value') {
            if (args.cell.textContent === "Active") {
                args.cell.querySelector(".statustxt").classList.add("label", "label-outline-success");
                args.cell.querySelector(".statustemp").classList.add("e-activecolor");
            }
            if (args.cell.textContent === "Terminated") {
                args.cell.querySelector(".statustxt").classList.add("label", "label-outline-danger");
                args.cell.querySelector(".statustemp").classList.add("e-terminatedcolor");
            }
            if (args.cell.textContent === "Probation") {
                args.cell.querySelector(".statustxt").classList.add("label", "label-outline-info");
                args.cell.querySelector(".statustemp").classList.add("e-probationcolor");
            }
        }
        else if (args.column.field === 'ContractStatus.Value') {
            if (args.cell.textContent === "Active") {
                args.cell.querySelector(".statustxt").classList.add("label", "label-outline-success");
                args.cell.querySelector(".statustemp").classList.add("e-activecolor");
            }
            if (args.cell.textContent === "Inactive") {
                args.cell.querySelector(".statustxt").classList.add("label", "label-outline-danger");
                args.cell.querySelector(".statustemp").classList.add("e-terminatedcolor");
            }
        }
    }
    function contractStatusDetail(e) {
        console.log(e);
        console.log(e.ContractStatus.Value);
        var div = document.createElement('div');
        var span;
        span = document.createElement('span');
        if (e.ContractStatus.Value === "Active") {
            span.className = 'statustxt e-activecolor';
            span.textContent = "Active"
            div.className = 'statustemp e-activecolor'
        }
        else if (e.ContractStatus.Value === "Inactive") {
            span = document.createElement('span');
            span.className = 'statustxt e-inactivecolor';
            span.textContent = "Terminated"
            div.className = 'statustemp e-inactivecolor'
        }
        div.appendChild(span);
        return div.outerHTML;
    }
    function statusDetail(e) {
        console.log(e.EmployeeStatus.Value);
        var div = document.createElement('div');
        var span;
        span = document.createElement('span');
        if (e.EmployeeStatus.Value === "Active") {
            span.className = 'statustxt e-activecolor';
            span.textContent = "Active"
            div.className = 'statustemp e-activecolor'
        }
        else if (e.EmployeeStatus.Value === "Terminated") {
            span = document.createElement('span');
            span.className = 'statustxt e-inactivecolor';
            span.textContent = "Terminated"
            div.className = 'statustemp e-inactivecolor'
        }
        else if (e.EmployeeStatus.Value === "Probation") {
            span = document.createElement('span');
            span.className = 'statustxt e-probationcolor';
            span.textContent = "Probation"
            div.className = 'statustemp e-probationcolor'
        }
        div.appendChild(span);
        return div.outerHTML;
    }
    function onLoad() {
        this.parentDetails.parentKeyFieldValue = this.parentDetails.parentRowData['Id'];
    }
    function toolbarClick(args) {
        var gridObj = document.getElementById("Grid").ej2_instances[0];
        if (args.item.id === 'Grid_pdfexport') {
            gridObj.pdfExport();
        }
        if (args.item.id === 'Grid_excelexport') {
            gridObj.excelExport();
        }
        if (args.item.id === 'Grid_csvexport') {
            gridObj.csvExport();
        }
        if (this.getSelectedRecords().length > 0) {
            var withHeader = false;
            if (args.item.id === 'copyHeader') {
                withHeader = true;
            }
            this.copy(withHeader);
        } else {
            if (args.item.id === 'copyHeader') {
                var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                dialogObj.show();
            }
            else if (args.item.id === 'copy') {
                var dialogObj = document.getElementById('alert_dialog_1').ej2_instances[0];
                dialogObj.show();
            }
        }
    }
    function alertBtnClick() {
        var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
        var dialogObj1 = document.getElementById('alert_dialog_1').ej2_instances[0];
        dialogObj.hide();
        dialogObj1.hide();
    }
    var initial = true;
    function dataBound(args) {
        //this.autoFitColumns();
        //if (initial == true) {
        //    this.groupModule.collapseAll();
        //    initial = false;
        //}
        //console.log(args);
    }

    function commandClick(args) {
        console.log(args);
        if (args.commandColumn.type == "Edit") {
            var params_ = JSON.stringify(args.rowData);  // display row data
            window.location = "@Url.Content("~")/HR/Employee/" + args.rowData.Id;
            @*$.ajax({
                url: "/?handler=EditAccountkj&Guid_=" + params_.Id,
                async: true,
                type: "GET",
                data: "",
                success: function (data) {
                    console.log(data);
                    //window.location = "@Url.Content("~")/COA/Edit";
                },
                error: function (err) {
                    console.log(err);
                }
            })*@
        }
        else if (args.commandColumn.type == "Copy") {
            this.copy(false);
        }
    }
</script>