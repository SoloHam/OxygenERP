@using CERP.App;
@using Syncfusion.EJ2.Grids;
@using CERP.HR.EMPLOYEE.DTOs;
@using CERP.HR.EMPLOYEE.RougeDTOs
@{
    List<GridColumn> workShiftsColumns = (List<GridColumn>)ViewData["workShiftsColumns"];
    //List<WorkShift_Dto> workShifts = (List<WorkShift_Dto>)ViewData["workShifts"];


    WorkShiftDetail workShiftDetail = ((bool)ViewData["IsEditing"] == true) ? (WorkShiftDetail)Model.WorkShiftDetail : null;
    IList<WorkShiftRDto> workShiftsDS = ((bool)ViewData["IsEditing"] == true) ? workShiftDetail.workShifts : new List<WorkShiftRDto>();
}

@section scripts{
}

<script>
    $(document).ready(function () {
        $('#addWorkshiftsSectionBtn').on('click', function () {
            var isCollapsed = $('#form-step-6-1').css('display') == 'none';

            if (isCollapsed) {
                $('#addWorkshiftsSection').slideUp(200);
                $('#form-step-6-1').slideDown(200);
                setTimeout(function () { $('#addWorkshiftsSectionBtn', '#addWorkshiftsSection').html('<i class="fa fa-arrow-up p-r-5"></i> Cancel Add') }, 200)
                $('#addWorkshiftsSection').slideDown(200);
            } else {
                $('#addWorkshiftsSection').slideUp(200);
                $('#form-step-6-1').slideUp(200);
                setTimeout(function () { $('#addWorkshiftsSectionBtn', '#addWorkshiftsSection').html('<i class="fa fa-plus p-r-5"></i> Add Workshift') }, 200)
                $('#addWorkshiftsSection').slideDown(200);
            }
        });
    });
</script>

<div class="m-l-20 m-t-0">
    <h2>Work Shifts Details</h2>
    <p>
        Provide work shifts of the employee
    </p>
</div>
<hr class="m-b-0"/>
<div class="panel-body" style="padding-bottom:0">
    <div class="col-lg-12 padding-right-0">
        <div id="addWorkshiftsSection" class="row" style="margin-bottom:10px;">
            <div class="col-lg-12">
                <button id="addWorkshiftsSectionBtn" type="button" class="btn btn-primary btn-block"><i class="fa fa-plus p-r-5"></i> Add Workshift</button>
            </div>
        </div>
        <div id="form-step-6-1" role="form" data-toggle="validator" style="display: none">
            <div class="row">
                <div class="col-lg-4 col-sm-6 col-12">
                    <div class="form-group">
                        <label class="margin-bottom-5  control-label">Work Shift:</label>
                        <select id="workshiftId" name="WorkshiftId" class="form-control" required>
                            <option></option>
                            @*@for (int i = 0; i < workShifts.Count; i++)
                            {
                                <option value="@workShifts[i].Id" data-value="@workShifts[i].Title" data-startH="@workShifts[i].StartHour" data-endH="@workShifts[i].EndHour">@workShifts[i].Title</option>
                            }*@
                        </select>
                    </div>
                </div>

                <div class="col-lg-4 col-sm-6 col-12">
                    <div class="col-sm-6" style="padding:0">
                        <div class="form-group">
                            <label class="control-label m-b-5">From:</label>
                            <input type="text" id="workshiftFromDate" name="WorkshiftFromDate" @*value="@(empInfo!=null? empInfo.JOINING_DATE : "")"*@ style="width:100% !important" class="text-left form-control inline pull-left DatePicker" required>
                        </div>
                    </div>
                    <div class="col-sm-6" style="padding:0">
                        <div class="form-group">
                            <label class="control-label m-b-5 pull-right ">Hijri Date</label>
                            <input type="text" id="fromHDate" name="FromHDate" @*value="@(empInfo!=null? empInfo.JOINING_DATE_H : "")"*@ style="width:100% !important" class="text-right  form-control inline   DatePickerHijri">
                        </div>
                    </div>
                </div>

                <div class="col-lg-4 col-sm-6 col-12">
                    <div class="col-sm-6" style="padding:0">
                        <div class="form-group">
                            <label class="control-label m-b-5">To:</label>
                            <input type="text" id="workshiftToDate" name="WorkshiftToDate" @*value="@(empInfo!=null? empInfo.JOINING_DATE : "")"*@ style="width:100% !important" class="text-left form-control inline pull-left DatePicker" required>
                        </div>
                    </div>
                    <div class="col-sm-6" style="padding:0">
                        <div class="form-group">
                            <label class="control-label m-b-5 pull-right ">Hijri Date</label>
                            <input type="text" id="toHDate" name="ToHDate" @*value="@(empInfo!=null? empInfo.JOINING_DATE_H : "")"*@ style="width:100% !important" class="text-right  form-control inline   DatePickerHijri">
                        </div>
                    </div>
                </div>

            </div>

            <div class="row">
                <div class="col-lg-12">
                    <button id="submitWorkShift" type="button" class="btn btn-primary btn-block">Add Work Shift</button>
                </div>
            </div>
        </div>

        <div class="control-section m-t-20">
            <ejs-grid id="WorkShiftsGrid" dataSource="@workShiftsDS" enableAutoFill="true" columns="@workShiftsColumns"
                      dataBound="dataBoundResponsive"commandClick="commandClick"
                      allowExcelExport="true" height="100%"allowPdfExport="true"
                      hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true"
                      allowSorting="true" allowMultiSorting="true" gridLines="Horizontal"
                      toolbarClick="toolbarClick" showColumnChooser="true" toolbar="@ViewData["initialToolBar"]"
                      
                      allowPaging="true" allowResizing="true">

                <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
            <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="false"></e-grid-editSettings>
                <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
            </ejs-grid>
        </div>


    </div>
</div>

<script>

    function toolbarClick(args) {
        var gridObj = document.getElementById("WorkShiftsGrid").ej2_instances[0];
        if (args.item.id === 'WorkShiftsGrid_pdfexport') {
            gridObj.pdfExport();
        }
        if (args.item.id === 'WorkShiftsGrid_excelexport') {
            gridObj.excelExport();
        }
        if (args.item.id === 'WorkShiftsGrid_csvexport') {
            gridObj.csvExport();
        }
        if (this.getSelectedRecords().length > 0) {
            var withHeader = false;
            if (args.item.id === 'copyHeader') {
                withHeader = true;
            }
            this.copy(withHeader);
        } else {
            if (args.item.id === 'copyHeader') {
                var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                dialogObj.show();
            }
            else if (args.item.id === 'copy') {
                var dialogObj = document.getElementById('alert_dialog_1').ej2_instances[0];
                dialogObj.show();
            }
        }
        if (args.item.id === 'showActions') {
            gridObj.toolbar = [{ text: "Hide Actions", tooltipText: "Actions", prefixIcon: "e-custom-hide-actions", id: "hideActions" }, { text: "Toggle Grouping", tooltipText: "Grouping", prefixIcon: "e-custom-group-toggle", id: "toggleGrouping" }, { text: "Toggle Detailed", tooltipText: "Toggle Detailed", prefixIcon: "e-toggledetailed", id: "toggleDetailed" }, { text: "ExcelExport", tooltipText: "Excel Export", prefixIcon: "e-excelexport", id: "excelexport", align: 'Right' }, "CsvExport", "Print", "Search",{ text: "Copy", tooltipText: "Copy", prefixIcon: "e-copy", id: "copy" }, "Search", { text: "Copy With Header", tooltipText: "Copy With Header", prefixIcon: "e-copy", id: "copyHeader" }, "ColumnChooser"];
	gridObj.refresh();
        }
        if (args.item.id === 'hideActions') {
            gridObj.toolbar = [{ text: "Show Actions", tooltipText: "Actions", prefixIcon: "e-custom-show-actions", id: "showActions" }, "Search", "ColumnChooser"];
            gridObj.showColumnChooser = true;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleGrouping') {
            gridObj.allowGrouping = !gridObj.allowGrouping;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleDetailed') {
            var visCount = 0;
            for (var i = 0; i < gridObj.columns.length; i++) {
                if (gridObj.columns[i].visible) visCount++;
            }
            if (visCount == gridObj.columns.length) {
                for (var i = 0; i < gridObj.columns.length; i++) {
                    var col = gridObj.columns[i];
                    if (typeof col.customAttributes != 'undefined' && typeof col.customAttributes.id != 'undefined' && col.customAttributes.id == 'detailed')
                        gridObj.showHider.hide(col.headerText, 'headerText');
                    else if(col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
            else {
                for (var i = 0; i < gridObj.columns.length; i++) {
                    var col = gridObj.columns[i];
	    if(col.showInColumnChooser)
                         gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
        }
    }
    function alertBtnClick() {
        var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
        var dialogObj1 = document.getElementById('alert_dialog_1').ej2_instances[0];
        dialogObj.hide();
        dialogObj1.hide();
    }
    var initial = true;
    function dataBound(args) {
        //this.autoFitColumns();
        //if (initial == true) {
        //    this.groupModule.collapseAll();
        //    initial = false;
        //}
        console.log(args);
    }

    function commandClick(args) {
        console.log(args);
        if (args.commandColumn.type == "Edit") {
            var params_ = JSON.stringify(args.rowData);  // display row data
            window.location = "@Url.Content("~")/GL/Edit?Id=" + args.rowData.Id;
            @*$.ajax({
                url: "/?handler=EditAccountkj&Guid_=" + params_.Id,
                async: true,
                type: "GET",
                data: "",
                success: function (data) {
                    console.log(data);
                    //window.location = "@Url.Content("~")/COA/Edit";
                },
                error: function (err) {
                    console.log(err);
                }
            })*@
        }
        else if (args.commandColumn.type == "Copy") {
            this.copy(false);
        }
    }
</script>