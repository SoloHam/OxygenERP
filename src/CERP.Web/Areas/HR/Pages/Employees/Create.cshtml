@page "/HR/Employee/Create"
@using CERP;
@using Syncfusion.EJ2.Grids;
@model CERP.Web.Areas.HR.Pages.Employees.CreateModel
@{
    ViewData["Title"] = "Add Employee";
    ViewData["IconClass"] = "fa fa-user-tie";
    ViewData["HeaderTitle"] = "EMPLOYEES";
    ViewData["SubTitle"] = "Add New Employee";

    ViewData["IsList"] = false;
    ViewData["IsCreate"] = false;

    ViewData["birthPlaces"] = Model.DictionaryValuesRepo.Where(x => x.Key == AppSettings.DicValueTypeId.Location).OrderBy(x => x.Key).ToList();
    ViewData["nationalities"] = Model.DictionaryValuesRepo.Where(x => x.Key == AppSettings.DicValueTypeId.Nationality).OrderBy(x => x.Key).ToList();
    ViewData["genders"] = Model.DictionaryValuesRepo.Where(x => x.Key == AppSettings.DicValueTypeId.Gender).OrderBy(x => x.Key).ToList();
    ViewData["maritalStatuses"] = Model.DictionaryValuesRepo.Where(x => x.Key == AppSettings.DicValueTypeId.MaritalStatus).OrderBy(x => x.Key).ToList();
    ViewData["booldGroups"] = Model.DictionaryValuesRepo.Where(x => x.Key == AppSettings.DicValueTypeId.BloodGroup).OrderBy(x => x.Key).ToList();

    ViewData["religions"] = Model.DictionaryValuesRepo.Where(x => x.Key == AppSettings.DicValueTypeId.Religion).OrderBy(x => x.Key).ToList();


    ViewData["idTypes"] = Model.DictionaryValuesRepo.Where(x => x.Key == AppSettings.DicValueTypeId.IDType).OrderBy(x => x.Key).ToList();
    ViewData["idIssuers"] = Model.DictionaryValuesRepo.Where(x => x.Key == AppSettings.DicValueTypeId.Location).OrderBy(x => x.Key).ToList();
    ViewData["passportIssuers"] = Model.DictionaryValuesRepo.Where(x => x.Key == AppSettings.DicValueTypeId.Location).OrderBy(x => x.Key).ToList();


    ViewData["departments"] = Model.DictionaryValuesRepo.Where(x => x.Key == AppSettings.DicValueTypeId.Location).OrderBy(x => x.Key).ToList();
    ViewData["positions"] = Model.DictionaryValuesRepo.Where(x => x.Key == AppSettings.DicValueTypeId.Location).OrderBy(x => x.Key).ToList();
    ViewData["employeeStatuses"] = Model.DictionaryValuesRepo.Where(x => x.Key == AppSettings.DicValueTypeId.Location).OrderBy(x => x.Key).ToList();
    ViewData["contractTypes"] = Model.DictionaryValuesRepo.Where(x => x.Key == AppSettings.DicValueTypeId.Location).OrderBy(x => x.Key).ToList();
    ViewData["contractStatuses"] = Model.DictionaryValuesRepo.Where(x => x.Key == AppSettings.DicValueTypeId.Location).OrderBy(x => x.Key).ToList();


    ViewData["banks"] = Model.DictionaryValuesRepo.Where(x => x.Key == AppSettings.DicValueTypeId.Location).OrderBy(x => x.Key).ToList();
    ViewData["allowancesColumns"] = new List<GridColumn>() {
        new GridColumn { Field = "AllowanceType", Width = "110", HeaderText = "Allowance Type", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "PercBasicSalary", Width = "110", HeaderText = "% of Basic Salary", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "Amount", Width = "110", HeaderText = "Amount", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "From", Width = "80", HeaderText = "From", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "To", Width = "80", HeaderText = "To", TextAlign=TextAlign.Center,  MinWidth="10"  },
    };
    ViewData["allowancesDS"] = null;


    ViewData["countries"] = Model.DictionaryValuesRepo.Where(x => x.Key == AppSettings.DicValueTypeId.Location).OrderBy(x => x.Key).ToList();
    ViewData["cities"] = Model.DictionaryValuesRepo.Where(x => x.Key == AppSettings.DicValueTypeId.City).OrderBy(x => x.Key).ToList();


    ViewData["degrees"] = Model.DictionaryValuesRepo.Where(x => x.Key == AppSettings.DicValueTypeId.City).OrderBy(x => x.Key).ToList();
    ViewData["institues"] = Model.DictionaryValuesRepo.Where(x => x.Key == AppSettings.DicValueTypeId.City).OrderBy(x => x.Key).ToList();
    ViewData["qualificationsColumns"] = new List<GridColumn>() {
        new GridColumn { Field = "Degree", Width = "110", HeaderText = "Degree / Certificate", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "Institution", Width = "110", HeaderText = "Institution", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "From", Width = "80", HeaderText = "From", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "To", Width = "80", HeaderText = "To", TextAlign=TextAlign.Center,  MinWidth="10"  },
    };
    ViewData["qualificationsDS"] = null;


    ViewData["dependentRelationshipTypes"] = Model.DictionaryValuesRepo.Where(x => x.Key == AppSettings.DicValueTypeId.City).OrderBy(x => x.Key).ToList();
    ViewData["dependentsColumns"] = new List<GridColumn>() {
        new GridColumn { Field = "DependentName", Width = "110", HeaderText = "Dependent Name", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "DependentNameLocalized", Width = "110", HeaderText = "Dependent Name in AR", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "From", Width = "80", HeaderText = "From", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "To", Width = "80", HeaderText = "To", TextAlign=TextAlign.Center,  MinWidth="10"  },
    };
    ViewData["dependentsDS"] = null;


    ViewData["workShifts"] = Model.DictionaryValuesRepo.Where(x => x.Key == AppSettings.DicValueTypeId.City).OrderBy(x => x.Key).ToList();
    ViewData["workShiftsColumns"] = new List<GridColumn>() {
        new GridColumn { Field = "WorkShift", Width = "110", HeaderText = "Work Shift", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "From", Width = "80", HeaderText = "From", TextAlign=TextAlign.Center,  MinWidth="10"  },
        new GridColumn { Field = "To", Width = "80", HeaderText = "To", TextAlign=TextAlign.Center,  MinWidth="10"  },
    };
    ViewData["workShiftsDS"] = null;
    //var coaInput = Model.COAInput;
}
@section styles {
    <link href="~/libs/smartwizard/dist/css/smart_wizard_theme_arrows.min.css" rel="stylesheet" />
    <link href="~/libs/smartwizard/dist/css/smart_wizard.min.css" rel="stylesheet" />
    <link href="~/libs/syncfusion/ej2-grid/styles/fabric.css" rel="stylesheet" />

    <style>
        .e-grid .e-headercell {
            background-color: #f5f5f5;
            /*font-size: 18px;*/
        }
    </style>
}
@section scripts {

    <script src="~/libs/smartwizard/dist/js/jquery.smartWizard.min.js"></script>
    <script src="~/libs/syncfusion/ej2-grid/scripts/ej2.min.js"></script>

    @*<script src="~/libs/syncfusion/ej2-according/scripts/ej2-according.min.js"></script>*@
    <script type="text/javascript">
        $(document).ready(function () {

            $.each($("#groupCat > option"), function (i, item) {
                $(this).hide();
            });
            function UpdateAccountCodeField() {
                var companyCode = $('option:selected', $('#company')).attr('data-companyCode');
                var headAccCode = $('option:selected', $('#headAccount')).attr('data-headAccCode');
                var subCatCode = $('option:selected', $('#subCat')).attr('data-categoryCode');
                var groupCatCode = $('option:selected', $('#groupCat')).attr('data-categoryCode');
                var subCat3Code = $('option:selected', $('#subCat3')).attr('data-categoryCode');
                var subLedgerCode = $('option:selected', $('#subLedger')).attr('data-subLedgerCode');

                var accountCode = "";
                if (companyCode != null && companyCode != "") {
                    accountCode = companyCode;

                    if (headAccCode != null && headAccCode != "") {
                        accountCode += "." + headAccCode;

                        if (subCatCode != null && subCatCode != "") {
                            accountCode += subCatCode.padStart(2, '0');

                            if (groupCatCode != null && groupCatCode != "") {
                                accountCode += groupCatCode.padStart(2, '0');
                            }
                            else {
                                accountCode += "00";
                            }

                            if (subLedgerCode != null && subLedgerCode != "") {
                                accountCode += "." + subLedgerCode;
                            }
                            else {
                                accountCode += ".000";
                            }
                        }
                        else {
                            accountCode += "0000.000";
                        }
                    }
                    else {
                        accountCode += ".00000.000";
                    }

                    accountCode += " [Auto Generated]"
                }
                $("#accountCode").attr("placeholder", accountCode);

                //console.log(accountCode);
            }

            var curStepNumber = 0;
            function GetFormValidated() {
                for (var i = 0; i < 4; i++) {

                    var elmForm = $("#form-step-" + i);
                    // stepDirection === 'forward' :- this condition allows to do the form validation
                    // only on forward navigation, that makes easy navigation on backwards still do the validation when going next
                    var valid = true;
                    elmForm.validator('validate');
                    var elmErr = elmForm.find('.has-error');
                    if (elmErr) {
                            console.log("Yup");
                        if (elmErr.length > 0) {
                            console.log("Greater");
                            // Form validation failed
                            valid = false;
                        }
                        else {
                            console.log("Lesser");
                            valid = true;
                        }
                    }
                }
                return valid;
            }
            $("#allowGLPosting").change(function (e) {
                if (!$(this)[0].checked) {
                    $("#allowPayment").attr("disabled", "disabled");
                    $("#allowPaymentRow").hide();
                    $("#allowReceipt").attr("disabled", "disabled");
                    $("#allowReceiptRow").hide();
                    $("#postingAttr").hide();
                } else {
                    $("#allowPaymentRow").show();
                    $("#allowPayment").removeAttr("disabled");
                    $("#allowReceiptRow").show();
                    $("#allowReceipt").removeAttr("disabled");
                    $("#postingAttr").show();
                }
            });
            $("#allowGLPosting").prop('checked', true);

            $('#coaForm').on('submit', function (e) {

                e.preventDefault();

                var params = $('#coaForm').serialize();

                var companyCode = $('option:selected', $('#company')).attr('data-companyCode');
                console.log(companyCode);
                params += "&companyCode=" + companyCode;

                var headAccCode = $('option:selected', $('#headAccount')).attr('data-headAccCode');
                console.log(headAccCode);
                params += "&headAccCode=" + headAccCode;

                var subCatCode = $('option:selected', $('#subCat')).attr('data-categoryCode');
                console.log(subCatCode);
                params += "&subCatCode=" + subCatCode;

                var groupCatCode = $('option:selected', $('#groupCat')).attr('data-categoryCode');
                console.log(groupCatCode);
                params += "&groupCatCode=" + groupCatCode;

                var accStatementTypeId = $('option:selected', $('#statementType')).val();
                console.log(accStatementTypeId + " dsddsdfds");
                params += "&accStatementTypeId=" + accStatementTypeId;

                if (GetFormValidated() === true) {

                    console.log(params);
                    @*$.ajax({
                        url: "@Url.Content("~")/COA/Create",
                        async: false,
                        type: "POST",
                        data: params,
                        success: function (data) {
                            window.location = "@Url.Content("~")/COA";
                        },
                        error: function (err) {
                            console.log(err);
                        }
                    })*@
                }
                else {
                    console.log("Invalid Form");
                }
            });
            // Smart Wizard
            $('#smartwizard').smartWizard({
                selected: 0,
                theme: 'arrows',
                transitionEffect: 'slide',
                showStepURLhash: false,
                toolbarSettings: {
                    showNextButton: false, // show/hide a Next button
                    showPreviousButton: false, // show/hide a Previous button
                },
                anchorSettings: {
                    anchorClickable: true, // Enable/Disable anchor navigation
                    markDoneStep: true, // add done css
                    markAllPreviousStepsAsDone: false, // When a step selected by url hash, all previous steps are marked done
                    removeDoneStepOnNavigateBack: true, // While navigate back done step after active step will be cleared
                    enableAnchorOnDoneStep: true, // Enable/Disable the done steps navigation
                }
            });
            $("#smartwizard").on("showStep", function (e, anchorObject, stepNumber, stepDirection, stepPosition) {
                //alert("You are on step "+stepNumber+" now");
                if (stepPosition === 'first') {
                    $("#prev-btn").addClass('disabled');
                } else if (stepPosition === 'final') {
                    $("#next-btn").addClass('disabled');
                } else {
                    $("#prev-btn").removeClass('disabled');
                    $("#next-btn").removeClass('disabled');
                }
            });
            $("#smartwizard").on("leaveStep", function (e, anchorObject, stepNumber, stepDirection) {
                curStepNumber = stepNumber;
                var elmForm = $("#form-step-" + stepNumber);
                console.log(curStepNumber);
                // stepDirection === 'forward' :- this condition allows to do the form validation
                // only on forward navigation, that makes easy navigation on backwards still do the validation when going next
                var valid = true;
                elmForm.validator('validate');
                if (stepDirection === 'forward' && elmForm) {
                    //elmForm.validate({
                    //    submitHandler: function (form) {
                    //        console.log("Submit")
                    //        valid = true;
                    //    },
                    //    invalidHandler: function (form) {
                    //        console.log("Invalid")
                    //        valid = false;
                    //    }
                    //})
                    var elmErr = elmForm.find('.has-error');
                    if (elmErr) {
                        if (elmErr.length > 0) {
                            // Form validation failed
                            valid = true;
                        }
                        else {
                            valid = true;
                        }
                        console.log(elmErr.length);
                    }
                }
                return valid;
            });
            $("#smartwizard").on("endReset", function () {
                $("#next-btn").removeClass('disabled');
            });

            // Toolbar extra buttons
            var btnFinish = $('<button></button>').text('Finish')
                .addClass('btn btn-info')
                .on('click', function () { alert('Finish Clicked'); });
            var btnCancel = $('<button></button>').text('Cancel')
                .addClass('btn btn-danger')
                .on('click', function () { $('#smartwizard').smartWizard("reset"); });

            // External Button Events
            $("#reset-btn").on("click", function () {
                // Reset wizard
                $('#smartwizard').smartWizard("reset");
                $("#next-btn").removeClass('disabled');
                return true;
            });
            $("#prev-btn").on("click", function () {
                // Navigate previous
                $('#smartwizard').smartWizard("prev");
                return true;
            });
            $("#next-btn").on("click", function () {
                // Navigate next
                $('#smartwizard').smartWizard("next");
                return true;
            });

            $("#customToolbar").removeClass("tab-pane");
            $("#customToolbar").removeClass("step-content");
            $("#customToolbar").addClass("col-sm-12");

            //$("#theme_selector").on("change", function () {
            //    // Change theme
            //    $('#smartwizard').smartWizard("theme", $(this).val());
            //    return true;
            //});

            //// Set selected theme on page refresh
            //$("#theme_selector").change();

            $("#company").on("change", function () {
                UpdateAccountCodeField()
            });
            $("#headAccount").on("change", function () {
                var headAccount = $('option:selected', this).val();
                var headAccountName = $('option:selected', this).attr("data-headName");
                //$("#subCat").empty();
                //$("#subCat").append("<option value=''>Select Sub Header Account</option>");
                $.each($("#subCat > option"), function (i, item) {
                    $(this).hide();

                    var optionType = $(this).attr('data-headId');
                    if (optionType == headAccount || optionType == '') {
                        $('#subCat').val('');
                        $(this).show();
                    }
                });
                $.getJSON(`?handler=SubCategoriesAndStatementType&headAccount=${headAccount}&headAccountName=${headAccountName}&parentId=@Guid.Empty&CLR=2`, (data) => {
                    $("#statementType").val(data.item2);
                    SelectStatementDetail();
                });

                UpdateAccountCodeField();
            });
            $("#subCat").on("change", function () {
               var subCat = $('option:selected', this).val();

                if (!$("#groupCat > option#desc").length)
                    $("#groupCat").prepend("<option value='' id='desc'>Select a Sub Header Group Category</option>");

                $.each($("#groupCat > option"), function (i, item) {
                    $(this).hide();

                    var optionType = $(this).attr('data-parentId');
                    if (optionType == subCat || optionType == '') {
                        $('#groupCat').val('');
                        $(this).show();
                    }
                });

                UpdateAccountCodeField();
            });
            $("#groupCat").on("change", function () {
                var groupCat = $('option:selected', this).val();

                if (!$("#subCat3 > option#desc").length)
                    $("#subCat3").prepend("<option value='' id='desc'>Select Account Group</option>");
                $.each($("#subCat3 > option"), function (i, item) {
                    $(this).hide();

                    var optionType = $(this).attr('data-parentId');
                    if (optionType == groupCat || optionType == '') {
                        $('#subCat3').val('');
                        $(this).show();
                    }
                });

                UpdateAccountCodeField();
            });
            $("#subCat3").on("change", function () {
                var subCat3 = $('option:selected', this).val();

                if (!$("#subCat4 > option#desc").length)
                    $("#subCat4").prepend("<option value='' id='desc'>Select Tertiary Sub Account</option>");
                $.each($("#subCat4 > option"), function (i, item) {
                    $(this).hide();

                    var optionType = $(this).attr('data-parentId');
                    if (optionType == subCat3 || optionType == '') {
                        $('#subCat4').val('');
                        $(this).show();
                    }
                });

                UpdateAccountCodeField();
            });

            $("#statementType").on("change", function () {
                SelectStatementDetail();
            });

           function SelectStatementDetail() {
               var statementType = $("#statementType").val();
                $("#statementDetails").empty();
                $("#statementDetails").append("<option value=''>Select Statement Details</option>");
                $.getJSON(`?handler=StatementDetails&statementType=${statementType}`, (data) => {
                    $.each(data, function (i, item) {
                        $("#statementDetails").append(`<option value="${item.id}">${item.title}</option>`);
                    });
                });
           }
        });
    </script>
    <ejs-scripts></ejs-scripts>
}

<div class="site-content" style="padding:0; background-color: rgb(253,253,253);">
    <partial name="_DefaultPageHeader" />
</div>

<div class="site-content" style="background-color: rgb(253,253,253);">
    <form id="employeeForm" role="form" method="post" accept-charset="utf-8">
        <div id="smartwizard">
            <ul>
                <li><a href="#step-1">Step 1<br /><p style="font-size: 15px">General Information</p></a></li>
                <li><a href="#step-2">Step 2<br /><p style="font-size: 15px">ID & Residence</p></a></li>
                <li><a href="#step-3">Step 3<br /><p style="font-size: 15px">Job Detail</p></a></li>
                <li><a href="#step-4">Step 4<br /><p style="font-size: 15px">Financial Detail</p></a></li>
                <li><a href="#step-5">Step 5<br /><p style="font-size: 15px">Contact Information</p></a></li>
                <li><a href="#step-6">Step 6<br /><p style="font-size: 15px">Qualification</p></a></li>
                <li><a href="#step-7">Step 7<br /><p style="font-size: 15px">Dependents</p></a></li>
                <li><a href="#step-8">Step 8<br /><p style="font-size: 15px">Work Shifts</p></a></li>
            </ul>


            <div>
                <div id="step-1">
                    <div id="form-step-0" role="form" data-toggle="validator">
                        <partial name="_EmployeeGeneralInfoPartial" />
                    </div>
                </div>
                <div id="step-2">
                    <div id="form-step-1" role="form" data-toggle="validator">
                        <partial name="_EmployeeIdAndResidencePartial" />
                    </div>
                </div>
                <div id="step-3">
                    <div id="form-step-2" role="form" data-toggle="validator">
                        <partial name="_EmployeeContractDetailsPartial" />
                    </div>
                </div>
                <div id="step-4">
                    <div id="form-step-3" role="form" data-toggle="validator">
                        <partial name="_EmployeeFinancialDetailsPartial" />
                    </div>
                </div>
                <div id="step-5">
                    <div id="form-step-4" role="form" data-toggle="validator">
                        <partial name="_EmployeeContactInfoPartial" />
                    </div>
                </div>
                <div id="step-6">
                    <div id="form-step-5" role="form" data-toggle="validator">
                        <partial name="_EmployeeQualificationDetailsPartial" />
                    </div>
                </div>
                <div id="step-7">
                    <div id="form-step-6" role="form" data-toggle="validator">
                        <partial name="_EmployeeDependentsDetailsPartial" />
                    </div>
                </div>
                <div id="step-8">
                    <div id="form-step-7" role="form" data-toggle="validator">
                        <partial name="_EmployeeWorkShiftsDetailsPartial" />
                        <div class="col-sm-12">
                            <div class="form-group">
                                <button id="submitCOA" type="submit" class="btn btn-outline-success btn-block">Create Account</button>
                            </div>
                        </div>
                    </div>
                </div>

                <div id="customToolbar">
                    <hr />
                    <div class="col-sm-6">
                        <button class="btn btn-outline-light btn-block disabled" id="prev-btn">Previous</button>
                    </div>
                    <div class="col-sm-6">
                        <button class="btn btn-primary btn-block" id="next-btn">Next</button>
                    </div>
                </div>
            </div>


        </div>


    </form>
</div>