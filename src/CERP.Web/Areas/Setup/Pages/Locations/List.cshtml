@page "/Setup/Locations"
@using CERP.Localization;
@using Microsoft.AspNetCore.Mvc.Localization;
@using CERP.App;
@using CERP;
@inject IHtmlLocalizer<CERPResource> L
@model CERP.Web.Areas.Setup.Pages.Locations.ListModel;
@using CERP.App.Helpers;
@{
    ViewData["Title"] = L["Location"].Name;
    ViewData["IconClass"] = "fa fa-map-marked-alt m-l-20";
    ViewData["HeaderTitle"] = L["Locations"].Name.ToUpper();
    ViewData["SubTitle"] = $"{L["ListOf"]} {L["Locations"]}";
    ViewData["Area"] = "Setup";

    ViewData["IsList"] = false;
    ViewData["IsCreate"] = false;
    string cNT = $"{L["Add"].Name} {L["Location"].Name}";

    var alertanimation = new Syncfusion.EJ2.Popups.DialogAnimationSettings { Effect = Syncfusion.EJ2.Popups.DialogEffect.None };

    var initialToolBar = new List<object>() { new { text = "Show Actions", tooltipText = "Actions", prefixIcon = "e-custom-show-actions", id = "showActions" }, "Search", "ColumnChooser" };
    var fullToolBar = new List<object>() { new { text = "Hide Actions", tooltipText = "Actions", prefixIcon = "e-custom-hide-actions", id = "hideActions" }, new { text = "Toggle Grouping", tooltipText = "Grouping", prefixIcon = "zmdi-chevron-up", id = "toggleGrouping" }, new { text = "Audit Trail", tooltipText = "View Audit Trail", prefixIcon = "e-toggleaudittrail", id = "toggleaudittrail" }, new { text = "Toggle Detailed", tooltipText = "Toggle Detailed", prefixIcon = "e-toggledetailed", id = "toggleDetailed" }, new { text = "ExcelExport", tooltipText = "Excel Export", prefixIcon = "e-excelexport", id = "excelexport", align = "Right" }, "CsvExport", "Print", "Search", new { text = "Copy", tooltipText = "Copy", prefixIcon = "e-copy", id = "copy" }, new { text = "Copy With Header", tooltipText = "Copy With Header", prefixIcon = "e-copy", id = "copyHeader" }, "ColumnChooser" };

    List<object> locationsCommands = new List<object>();
    locationsCommands.Add(new { type = "Edit", buttonOption = new { iconCss = "e-icons e-edit", cssClass = "e-flat" } });
    locationsCommands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "e-flat" } });
    locationsCommands.Add(new { type = "Cancel", buttonOption = new { iconCss = "e-icons e-cancel-icon", cssClass = "e-flat" } });

    List<object> addressesCommands = new List<object>();
    addressesCommands.Add(new { type = "Edit", buttonOption = new { iconCss = "e-icons e-edit", cssClass = "e-flat" } });
    addressesCommands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "e-flat" } });
    addressesCommands.Add(new { type = "Cancel", buttonOption = new { iconCss = "e-icons e-cancel-icon", cssClass = "e-flat" } });

    List<CERP.Setup.LocationStatus> locationStatuses = Enum.GetValues(typeof(CERP.Setup.LocationStatus)).Cast<CERP.Setup.LocationStatus>().ToList();
    List<DictionaryValue> countries = Model.DictionaryValuesRepo.WithDetails().Where(x => x.ValueType.ValueTypeFor == ValueTypeModules.Country).OrderBy(x => x.Key).ToList(); ;

    Syncfusion.EJ2.Grids.Grid locationAddressGrid = new Syncfusion.EJ2.Grids.Grid()
    {
        QueryString = "id",
        DataSource = new List<dynamic>(),
        EnableAutoFill = true,
        AllowSorting = true,
        AllowFiltering = true,
        AllowSelection = true,
        FilterSettings = new Syncfusion.EJ2.Grids.GridFilterSettings() { Type = Syncfusion.EJ2.Grids.FilterType.CheckBox },
        Columns = new List<Syncfusion.EJ2.Grids.GridColumn>()
{
            new Syncfusion.EJ2.Grids.GridColumn() { Field = "geoPhone", HeaderText = "Phone #", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center },
            new Syncfusion.EJ2.Grids.GridColumn() { Field = "geoMobile", HeaderText = "Mobile #", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center },
            new Syncfusion.EJ2.Grids.GridColumn() { Field = "geoFax", HeaderText = "Fax", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center },
            new Syncfusion.EJ2.Grids.GridColumn() { Field = "geoEmail", HeaderText = "Email", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center },
            new Syncfusion.EJ2.Grids.GridColumn() { Field = "geoCountry", HeaderText = "Country", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center },
            new Syncfusion.EJ2.Grids.GridColumn() { Field = "geoCity", HeaderText = "City", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center },
            new Syncfusion.EJ2.Grids.GridColumn() { Field = "geoZip", HeaderText = "Zip Code", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center },
            new Syncfusion.EJ2.Grids.GridColumn() { Field = "geoPO", HeaderText = "P.O Box #", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center },
            new Syncfusion.EJ2.Grids.GridColumn() { Field = "hasNationalAddress", HeaderText = "National Address", DisplayAsCheckBox=true, TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center },
        },

    };
}
@section styles {

}

@section scripts {
    <script>
        isEditingLocations = false;
        isEditingLocationsLoaded = false;
        let curLocationsEditRow;

        isEditingAddress = false;
        isEditingAddressLoaded = false;
        let curAddressEditRow;

        $(document).ready(function () {
            let grid = $("#AllLocationsGrid")[0].ej2_instances[0];

            grid.showSpinner();
            cERP.appServices.setup.locationSetup.locationTemplate.getAllLocations().done(function (data) {
                grid.dataSource = data;

                grid.refresh();
                grid.hideSpinner();
            });

            $('#addLocationsBtn').on('click', function () {
                isEditingLocations = false;

                $('#submitLocationBtn').val('Add Location');

                $('#locationTitle').val('');
                $('#locationTitleLocalized').val('');
                $('#locationCode').val('');
            });
            $('#submitLocationBtn').on('click', function (e) {
                e.preventDefault();
                let hasNationalAddress = $('#hasNationalAddress').val() == 'true';
                if (ValidateForm('locationSpecificForm')) {
                    console.log(hasNationalAddress);
                    let formToVerify = hasNationalAddress ? 'addressSpecificForm' : 'geographicalAddressForm';
                    if (!ValidateForm(formToVerify))
                        return;

                    grid.showSpinner();
                    Swal.showLoading();

                    let form = [];
                    let locationDetails = $('#locationSpecificForm').find("textarea, input, select").serializeArray();
                    form = form.concat(locationDetails);

                    let addressDetails = $('#' + formToVerify).find("textarea, input, select").serializeArray();
                    form = form.concat(addressDetails);

                    let params = objectifyForm(form);

                    let id = 0;
                    if (grid.dataSource.length > 0)
                        id = grid.dataSource[grid.dataSource.length - 1].id;

                    params.locationCountryId = $('#countryId').val();

                    params.isEditing = isEditingLocations;
                    console.log(addressDetails);
                    params.address = objectifyForm(addressDetails);
                    params.address.hasNationalAddress = hasNationalAddress;

                    console.log(params.address);
                    if (isEditingLocations) {
                        params.id = curLocationsEditRow.id;

                        //cERP.appServices.hR.leaveRequestTemplates.update()
                    }
                    else {

                        //cERP.appServices.hR.leaveRequestTemplates.update()
                    }

                    let formData = new FormData();
                    formData.append("info", JSON.stringify(params));
                    formData.append("address", JSON.stringify(params.address));
                    let xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
                    formData.append("__RequestVerificationToken", xhrToken);

                    $.ajax({
                        url: "?handler=LocationTemplate",
                        async: true,
                        type: "POST",
                        data: formData,
                        contentType: false,
                        processData: false,
                        success: function (data) {
                            Swal.hideLoading();
                            console.log(data);
                            if (isEditingLocations) {
                                grid.refresh(); // refresh the Grid.

                                swal.fire("Success", "Location has successfully been updated", "success");

                                for (let i = 0; i < grid.dataSource.length; i++) {
                                    if (grid.dataSource[i].id == data.id) {
                                        grid.dataSource[i] = data;
                                    }
                                }
                                grid.refresh();
                            }
                            else {
                                let address = data.extraProperties.address;
                                address.id = data.id;
                                grid.dataSource.push(data);

                                grid.refresh(); // refresh the Grid.

                                swal.fire("Success", "Location has successfully been added", "success");
                            }
                            grid.hideSpinner();
                        },
                        error: function (err) {
                            Swal.hideLoading();
                            if (isEditingLocations)
                                swal.fire("Failed", "Location couldn't be updated, please fix all errors and try again.", "error");
                            else
                                swal.fire("Failed", "Location couldn't be added, please fix all errors and try again.", "error");

                            console.log(err);
                            grid.hideSpinner();
                        }
                    });
                }
                else {
                    Swal.close();
                    Swal.hideLoading();
                }
            });

            $('#countryId').change();
        });
    </script>
}
<partial name="_DefaultPageHeader" />
<div class="site-content customContentArea">
    <div class="panel-body p-t-0" style="padding-bottom:0;">
        <div class="areaHeader" style="display:flex;">
            <div id="locationsLoader" class="pull-left loader-inline" style="display:none"></div>
            <div class="areaHeaderTitle">
                <span id="areHeadertitle" class="areaHeaderTitleNode menu-text">Current Locations</span>
                @*<span id="" class="areaHeaderTitleInNode menu-text"> > </span>*@
                @*<span id="subTitle" class="menu-text" style="padding-left:15px; font-size: 28px; font-family:Roboto; font-weight:200;">@ViewData["SubTitle"]</span>*@
            </div>
            @*<h3 class="control-label" style="flex-grow: 1; margin:0">Approval Route</h3>*@
            <div class="pull-right text-right p-r-20 areaHeaderBtnSec">
                @*<div class="clearfix margin-15"></div>*@
                <a id="addLocationsBtn" onclick="areaHeaderBtnClick(event); isEditingLocations = false;" class="btn btn-outline-dark areaHeaderBtn"><i class="fa fa-plus fa-fw"></i> Add New</a>
            </div>
        </div>
        <form id="locationsForm" onkeydown="return event.key != 'Enter';" class="row areaForm" method="post" data-toggle="validator" style="display: none; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
            <div id="locationSpecificForm">
                <div class="row">
                    <div class="col-lg-4 col-md-4 col-sm-4 col-12">
                        <div class="col-sm-6" style="padding:0">
                            <div class="form-group">
                                <label class="control-label m-b-5 ">Title:</label>
                                <input type="text" id="locationTitle" name="LocationName" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control " required>
                            </div>
                        </div>
                        <div class="col-sm-6" style="padding:0">
                            <div class="form-group">
                                <label class="control-label m-b-5 ">Title (In Arabic):</label>
                                <input type="text" id="locationTitleLocalized" name="LocationNameLocalized" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-4 col-md-4 col-sm-4 col-12">
                        <div class="form-group">
                            <label class="margin-bottom-5 control-label">Location Code:</label>
                            <input type="text" id="locationCode" name="LocationCode" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" required>
                        </div>
                    </div>
                    <div class="col-lg-4 col-md-4 col-sm-4 col-12">
                        <div class="form-group">
                            <label class="margin-bottom-5 control-label">Location Status:</label>
                            <select id="locationStatus" name="Status" class="form-control" required>
                                @for (int i = 0; i < locationStatuses.Count; i++)
                                {
                                    <option value="@locationStatuses[i]">@EnumExtensions.GetDescription(locationStatuses[i])</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                        <div class="col-sm-12" style="padding:0">
                            <div class="form-group">
                                <label class="control-label m-b-5 ">Phone:</label>
                                <input type="number" id="phoneNo" name="locationPhone" @*value="@(empInfo!=null? empInfo.PHONE_NO : "")"*@ style="width:100% !important" class="form-control inline">
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                        <div class="col-sm-12" style="padding:0">
                            <div class="form-group">
                                <label class="control-label m-b-5 ">Mobile:</label>
                                <input type="number" id="mobileNo" name="locationMobile" @*value="@(empInfo!=null? empInfo.PHONE_NO : "")"*@ style="width:100% !important" class="form-control inline">
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                        <div class="col-sm-12" style="padding:0">
                            <div class="form-group">
                                <label class="control-label m-b-5 ">Fax:</label>
                                <input type="number" id="faxNo" name="locationFax" @*value="@(empInfo!=null? empInfo.PHONE_NO : "")"*@ style="width:100% !important" class="form-control inline">
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                        <div class="form-group">
                            <label class="margin-bottom-5  control-label">Email:</label>
                            <input type="email" id="email" name="locationEmail" @*value="@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" required>
                        </div>
                    </div>
                </div>
            </div>
            <hr />
            <div id="addressSpecificForm" role="form">
                <div class="m-l-20 m-t-0">
                    <h2>Geographical Address</h2>
                    <p>
                        Provide geographical address of the company
                    </p>
                </div>
                <hr class="margin-top-5 margin-bottom-10">
                <div id="geographicalAddressForm">
                    <div class="clearfix margin-5"></div>
                    <div class="row" style="margin:0">
                        <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                            <label class="margin-bottom-5  control-label">Country:</label>
                            <div>
                                <select id="countryId" name="locationCountryId" onchange="
                                        let country = $('option:selected', '#countryId').attr('data-value');
                                        if (country.includes('Saudi')) { $('#nationalAddressInfo').slideDown(); $('#hasNationalAddress').val('true'); } else { $('#nationalAddressInfo').slideUp(); $('#hasNationalAddress').val('false'); }
                                        $('#gmap').attr('src', 'https://www.google.com/maps/embed/v1/search?key=AIzaSyCvsn-sVRnoujxTLlO1atl49obqHA6xRqw&q=' + country.replace(' ', '+'));
                                    " class="form-control">
                                    @for (int i = 0; i < countries.Count; i++)
                                    {
                                        <option value="@countries[i].Id" data-value="@countries[i].Value">@countries[i].Value</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                            <div>
                                <label class="margin-bottom-5  control-label">City:</label>
                            </div>
                            <div>
                                <input type="text" id="cityId" name="geoCity" min="0" onkeydown="
                                        if (event.key == 'Enter') {
                                            let country = $('option:selected', '#countryId').attr('data-value');
                                            let city = $('#cityId').val();
                                            $('#gmap').attr('src', 'https://www.google.com/maps/embed/v1/search?key=AIzaSyCvsn-sVRnoujxTLlO1atl49obqHA6xRqw&q=' + country.replace(' ', '+') + ',' + city.replace(' ', '+'));
                                        }
                                    " class="form-control">
                            </div>
                        </div>
                        <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                            <div class="form-group">
                                <label class="margin-bottom-5  control-label">Zip Code:</label>
                                <input type="number" id="zipCode" name="geoZip" min="0" @*value="@(empInfo!=null? empInfo.ZIP_CODE : "")"*@ class="form-control">
                            </div>
                        </div>
                        <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                            <div class="form-group">
                                <label class="margin-bottom-5  control-label">P.O Box:</label>
                                <input type="number" id="poBox" name="geoPO" min="0" @*value="@(empInfo!=null? empInfo.PO_BOX : "")"*@ class="form-control">
                            </div>
                        </div>
                    </div>
                    <div class="row" style="margin:0">
                        <div class="col-lg-6 col-md-6 col-sm-6 col-12">
                            <div class="form-group">
                                <label class="margin-bottom-5  control-label">Address Line 1:</label>
                                <input type="text" id="addressLine1" name="addressLine1" onkeydown="
                                        if (event.key == 'Enter') {
                                            let country = $('option:selected', '#countryId').attr('data-value');
                                            let city = $('#cityId').val();
                                            let ad1 = $('#addressLine1').val();
                                            $('#gmap').attr('src', 'https://www.google.com/maps/embed/v1/search?key=AIzaSyCvsn-sVRnoujxTLlO1atl49obqHA6xRqw&q=' + ad1.replace(' ', '+') + ',' + city.replace(' ', '+') + ',' + country.replace(' ', '+'));
                                        }
                                    " class="form-control" required>
                            </div>
                        </div>
                        <div class="col-lg-6 col-md-6 col-sm-6 col-12">
                            <div class="form-group">
                                <label class="margin-bottom-5  control-label">Address Line 2:</label>
                                <input type="text" id="addressLine2" name="addressLine2" onkeydown="
                                        if (event.key == 'Enter') {
                                            let country = $('option:selected', '#countryId').attr('data-value');
                                            let city = $('#cityId').val();
                                            let ad1 = $('#addressLine1').val();
                                            let ad2 = $('#addressLine2').val();
                                            $('#gmap').attr('src', 'https://www.google.com/maps/embed/v1/search?key=AIzaSyCvsn-sVRnoujxTLlO1atl49obqHA6xRqw&q=' + ad2.replace(' ', '+') + ',' + ad1.replace(' ', '+') + ',' + city.replace(' ', '+') + ',' + country.replace(' ', '+'));
                                        }
                                    " class="form-control">
                            </div>
                        </div>
                    </div>
                    <div class="row" style="margin: 0">
                        <div class="col-md-12">
                            <iframe id="gmap" width="100%"
                                    height="250"
                                    frameborder="0" style="border:0"
                                    src="https://www.google.com/maps/embed/v1/search?key=AIzaSyCvsn-sVRnoujxTLlO1atl49obqHA6xRqw&q=Saudi+Arabia" allowfullscreen>
                            </iframe>
                        </div>
                    </div>
                    <input hidden type="checkbox" id="hasNationalAddress" name="hasNationalAddress" value="false">
                </div>
                <div id="nationalAddressInfo" style="display: none;">
                    <hr class="margin-top-5 margin-bottom-10">
                    <div class="m-l-20 m-t-0">
                        <h2>National Address</h2>
                        <p>
                            Provide national address of the company
                        </p>
                    </div>
                    <div>
                        <hr class="margin-top-5 margin-bottom-10">
                        <div class="row" style="margin:0">
                            <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                                <div class="form-group">
                                    <label class="margin-bottom-5  control-label">Building No:</label>
                                    <input type="text" id="buildingNumber" name="buildingNumber" class="form-control" required>
                                </div>
                            </div>
                            <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                                <div class="form-group">
                                    <label class="margin-bottom-5  control-label">Street Name:</label>
                                    <input type="text" id="streetName" name="streetName" class="form-control" required>
                                </div>
                            </div>
                            <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                                <div class="form-group">
                                    <label class="margin-bottom-5  control-label">District:</label>
                                    <input type="text" id="addDistrict" name="naDistrict" class="form-control">
                                </div>
                            </div>
                            <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                                <div class="form-group">
                                    <label class="margin-bottom-5  control-label">City:</label>
                                    <input type="text" id="addCity" name="naCity" class="form-control" required>
                                </div>
                            </div>
                        </div>
                        <div class="clearfix margin-5"></div>
                        <div class="row" style="margin:0">
                            <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                                <div class="form-group">
                                    <label class="margin-bottom-5  control-label">Postal Code:</label>
                                    <input type="text" id="addPostalCode" name="naPostalCode" @*value="@(empInfo!=null? empInfo.ADD_POSTAL_CODE : "")"*@ class="form-control">
                                </div>
                            </div>
                            <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                                <div class="form-group">
                                    <label class="margin-bottom-5  control-label">Additional Number:</label>
                                    <input type="text" id="addAdditionalNumber" name="naAdditionalNumber" @*value="@(empInfo!=null? empInfo.ADD_ADDITIONAL_NO : "")"*@ class="form-control">
                                </div>
                            </div>
                        </div>
                    </div>
                    @*<hr />
            <div class="container" style="background-color:#DCE8E0;">
                <div class="row">
                    <div class="col-md-12">
                        <div style="margin-bottom:20px;">
                            <h1>National Address Maps Api Portal - Get Location Info.</h1>
                        </div>
                        <div style="position:relative;height:500px;width:100%;">
                            <div id="map" style="width:100%;height:100%; margin:0px; padding:0px; background-color:white;"></div>
                        </div>
                        <div id="Div4" style="background-color:Highlight; height:10px; width:100%; padding-bottom:18px; font-weight:bold;">Location Information</div>
                        <div id="locationStatus" style="background-color:Highlight; height:100%; width:100%; font-family:Calibri;"></div>
                        <div id="resultsDiv" style="background-color:Highlight; height:100%; width:100%; font-family:Calibri;">
                            <table id="locationInformationTable" border="1"></table>
                            <div id="noresultsdiv"></div>
                        </div>
                    </div>
                </div>
            </div>*@
                </div>
            </div>
            <hr />
            <div class="row m-t-20">
                <div class="col-lg-12">
                    <input id="submitLocationBtn" type="button" class="btn btn-success btn-block" value="Create Location" required />
                </div>
            </div>
        </form>
        <div id="locationsCS" class="control-section">
            <ejs-grid id="AllLocationsGrid" enableAutoFill="true" dataBound="dataBoundResponsive" commandClick="locationsCommandClick" actionBegin="locationsActionBegin"
                      allowExcelExport="true" height="100%" allowPdfExport="true"
                      hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true"
                      allowSorting="true" allowMultiSorting="true" gridLines="Horizontal"
                      toolbarClick="locationsToolbarClick" showColumnChooser="true" toolbar="@initialToolBar"
                      allowPaging="true" allowResizing="true">

                <e-grid-columns>
                    <e-grid-column field="id" headerText="Id" isPrimaryKey="true" textAlign="Center" visible="false" showInColumnChooser="false"></e-grid-column>
                    <e-grid-column field="locationName" headerText="Name" textAlign="Center"></e-grid-column>
                    <e-grid-column field="locationNameLocalized" headerText="Local Name" textAlign="Center"></e-grid-column>
                    <e-grid-column field="locationCode" headerText="Code" textAlign="Center"></e-grid-column>
                    <e-grid-column field="locationCountry.value" headerText="Country" textAlign="Center"></e-grid-column>
                    <e-grid-column field="extraProperties.address.geoCity" headerText="City" textAlign="Center"></e-grid-column>
                    <e-grid-column field="extraProperties.address.geoPhone" visible="false" headerText="Phone" textAlign="Center"></e-grid-column>
                    <e-grid-column field="extraProperties.address.geoMobile" visible="false" headerText="Mobile" textAlign="Center"></e-grid-column>
                    <e-grid-column field="extraProperties.address.geoFax" visible="false" headerText="Fax" textAlign="Center"></e-grid-column>
                    <e-grid-column field="locationEmail" headerText="Email" textAlign="Center"></e-grid-column>
                    <e-grid-column field="extraProperties.address.addressLine1" headerText="Address Line 1" textAlign="Center"></e-grid-column>
                    <e-grid-column field="extraProperties.address.addressLine2" visible="false" headerText="Address Line 2" textAlign="Center"></e-grid-column>
                    <e-grid-column field="extraProperties.address.hasNationalAddress" displayAsCheckBox="true" headerText="National Address" textAlign="Center"></e-grid-column>
                    <e-grid-column field="extraProperties.address.buildingNumber" visible="false" headerText="NA Building Number" textAlign="Center"></e-grid-column>
                    <e-grid-column field="extraProperties.address.streetName" visible="false" headerText="NA Street Name" textAlign="Center"></e-grid-column>
                    <e-grid-column field="extraProperties.address.naDistrict" visible="false" headerText="NA District" textAlign="Center"></e-grid-column>
                    <e-grid-column field="extraProperties.address.naCity" visible="false" headerText="NA City" textAlign="Center"></e-grid-column>
                    <e-grid-column field="extraProperties.address.naPostalCode" visible="false" headerText="NA Postal Code" textAlign="Center"></e-grid-column>
                    <e-grid-column field="extraProperties.address.naAdditionalNumber" visible="false" headerText="NA Additional Number" textAlign="Center"></e-grid-column>
                    <e-grid-column field="statusDescription" headerText="Status" textAlign="Center"></e-grid-column>

                    <e-grid-column headerText="Actions" textAlign="Center" commands="locationsCommands"></e-grid-column>
                </e-grid-columns>

                <e-grid-filterSettings type="CheckBox">
                </e-grid-filterSettings>
                <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="false"></e-grid-editSettings>
                <e-grid-selectionsettings type="Multiple">
                </e-grid-selectionsettings>
                <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
            </ejs-grid>

        </div>
    </div>
    <ejs-dialog id="alert_dialog" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy with Header" content="Atleast one row should be selected to copy with header">
        <e-dialog-buttons>
            <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
        </e-dialog-buttons>
    </ejs-dialog>
    <ejs-dialog id="alert_dialog_1" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy" content="Atleast one row should be selected to copy">
        <e-dialog-buttons>
            <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
        </e-dialog-buttons>
    </ejs-dialog>
</div>
<script>
    function locationsToolbarClick(args) {
        let gridObj = document.getElementById("AllLocationsGrid").ej2_instances[0];

        if (args.item.id === 'AllLocationsGrid_pdfexport') {
            gridObj.pdfExport();
        }
        if (args.item.id === 'AllLocationsGrid_excelexport') {
            gridObj.excelExport();
        }
        if (args.item.id === 'AllLocationsGrid_csvexport') {
            gridObj.csvExport();
        }
        if (this.getSelectedRecords().length > 0) {
            let withHeader = false;
            if (args.item.id === 'copyHeader') {
                withHeader = true;
            }
            this.copy(withHeader);
        }
        else {
            if (args.item.id === 'copyHeader') {
                let dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                dialogObj.show();
            }
            else if (args.item.id === 'copy') {
                let dialogObj = document.getElementById('alert_dialog_1').ej2_instances[0];
                dialogObj.show();
            }
        }
        if (args.item.id === 'showActions') {
            gridObj.toolbar = [{ text: "Hide Actions", tooltipText: "Actions", prefixIcon: "e-custom-hide-actions", id: "hideActions" }, { text: "Toggle Grouping", tooltipText: "Grouping", prefixIcon: "e-custom-group-toggle", id: "toggleGrouping" }, { text: "Toggle Detailed", tooltipText: "Toggle Detailed", prefixIcon: "e-toggledetailed", id: "toggleDetailed" }, { text: "ExcelExport", tooltipText: "Excel Export", prefixIcon: "e-excelexport", id: this.element.id + "_excelexport", align: 'Right' }, { text: this.element.id + "_PdfExport", tooltipText: "Pdf Export", prefixIcon: "e-pdfexport", id: "pdfexport", align: 'Right' }, { text: "CsvExport", tooltipText: "Csv Export", prefixIcon: "e-csvexport", id: this.element.id + "_csvexport", align: 'Right' }, { text: "Print", tooltipText: "Print", prefixIcon: "e-print", id: this.element.id + "_print", align: 'Right' }, { text: "Copy", tooltipText: "Copy", prefixIcon: "e-copy", id: "copy" }, "Search", { text: "Copy With Header", tooltipText: "Copy With Header", prefixIcon: "e-copy", id: "copyHeader" }, "ColumnChooser"];
            gridObj.refresh();
        }
        if (args.item.id === 'hideActions') {
            gridObj.toolbar = [{ text: "Show Actions", tooltipText: "Actions", prefixIcon: "e-custom-show-actions", id: "showActions" }, "Search", "ColumnChooser"];
            gridObj.showColumnChooser = true;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleGrouping') {
            gridObj.allowGrouping = !gridObj.allowGrouping;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleDetailed') {
            let visCount = 0;
            for (let i = 0; i < gridObj.columns.length; i++) {
                if (gridObj.columns[i].visible) visCount++;
            }
            if (visCount == gridObj.columns.length) {
                for (let i = 0; i < gridObj.columns.length; i++) {
                    let col = gridObj.columns[i];
                    if (typeof col.customAttributes != 'undefined' && typeof col.customAttributes.id != 'undefined' && col.customAttributes.id == 'detailed')
                        gridObj.showHider.hide(col.headerText, 'headerText');
                    else if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
            else {
                for (let i = 0; i < gridObj.columns.length; i++) {
                    let col = gridObj.columns[i];
                    if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
        }
        if (args.item.id === 'toggleaudittrail') {

        }

        gridObj.hideSpinner();
    }
    function locationsActionBegin(args) {
        if (args.requestType == "delete") {
            Swal.showLoading();

            let formData = new FormData();
            formData.append("locations", JSON.stringify(args.data));
            let xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
            formData.append("__RequestVerificationToken", xhrToken);

            $.ajax({
                url: '?handler=Location',
                async: true,
                type: "DELETE",
                data: formData,
                contentType: false,
                processData: false,
                success: function (data) {
                    $('#AllLocationsGrid')[0].ej2_instances[0].hideSpinner();
                    swal.fire("Success", "Location has successfully been deleted", "success");

                    if ($('#locationsForm').css('display') !== 'none') {
                        $('#locationsForm').slideUp();
                    }
                },
                error: function (err) {
                    $('#AllLocationsGrid')[0].ej2_instances[0].hideSpinner();
                    swal.fire("Failed", "Location couldn't be deleted, please fix all errors and try again.", "error");

                    console.log(err);
                }
            });
        }

    }
    function locationsCommandClick(args) {
        if (args.commandColumn == null) return;

        if (args.commandColumn.type == "Edit") {
            isEditingLocations = true;
            let params = args.rowData;
            curLocationsEditRow = params;

            toggleAreaFormBtn('locationsForm', false);

            setTimeout(function () {
                $('#submitLocationBtn').val('Update Location');
                toggleAreaFormBtn('locationsForm', true);
            }, 200);

            FillFormByObject(params, $('#locationsForm'));
            console.log(params.extraProperties.address);
            console.log(params);
            FillFormByObject(params.extraProperties.address, $('#locationsForm'));
            //$('#locationTitle').val(params.locationName);
            //$('#locationTitleLocalized').val(params.locationNameLocalized);
            //$('#locationCode').val(params.locationCode);
            $('#locationStatus').val(params.statusDescription);

            $('#countryId').val(params.locationCountryId);
            $('#countryId').change();
        }
        else if (args.commandColumn.type == "Copy") {
            this.copy(false);
        }
    }
    function alertBtnClick() {
        let dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
        let dialogObj1 = document.getElementById('alert_dialog_1').ej2_instances[0];
        dialogObj.hide();
        dialogObj1.hide();
    }

    function addressesToolbarClick(args) {
        let gridObj = document.getElementById("AllAddressesGrid").ej2_instances[0];

        if (args.item.id === 'AllAddressesGrid_pdfexport') {
            gridObj.pdfExport();
        }
        if (args.item.id === 'AllAddressesGrid_excelexport') {
            gridObj.excelExport();
        }
        if (args.item.id === 'AllAddressesGrid_csvexport') {
            gridObj.csvExport();
        }
        if (this.getSelectedRecords().length > 0) {
            let withHeader = false;
            if (args.item.id === 'copyHeader') {
                withHeader = true;
            }
            this.copy(withHeader);
        }
        else {
            if (args.item.id === 'copyHeader') {
                let dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                dialogObj.show();
            }
            else if (args.item.id === 'copy') {
                let dialogObj = document.getElementById('alert_dialog_1').ej2_instances[0];
                dialogObj.show();
            }
        }
        if (args.item.id === 'showActions') {
            gridObj.toolbar = [{ text: "Hide Actions", tooltipText: "Actions", prefixIcon: "e-custom-hide-actions", id: "hideActions" }, { text: "Toggle Grouping", tooltipText: "Grouping", prefixIcon: "e-custom-group-toggle", id: "toggleGrouping" }, { text: "Toggle Detailed", tooltipText: "Toggle Detailed", prefixIcon: "e-toggledetailed", id: "toggleDetailed" }, { text: "ExcelExport", tooltipText: "Excel Export", prefixIcon: "e-excelexport", id: this.element.id + "_excelexport", align: 'Right' }, { text: this.element.id + "_PdfExport", tooltipText: "Pdf Export", prefixIcon: "e-pdfexport", id: "pdfexport", align: 'Right' }, { text: "CsvExport", tooltipText: "Csv Export", prefixIcon: "e-csvexport", id: this.element.id + "_csvexport", align: 'Right' }, { text: "Print", tooltipText: "Print", prefixIcon: "e-print", id: this.element.id + "_print", align: 'Right' }, { text: "Copy", tooltipText: "Copy", prefixIcon: "e-copy", id: "copy" }, "Search", { text: "Copy With Header", tooltipText: "Copy With Header", prefixIcon: "e-copy", id: "copyHeader" }, "ColumnChooser"];
            gridObj.refresh();
        }
        if (args.item.id === 'hideActions') {
            gridObj.toolbar = [{ text: "Show Actions", tooltipText: "Actions", prefixIcon: "e-custom-show-actions", id: "showActions" }, "Search", "ColumnChooser"];
            gridObj.showColumnChooser = true;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleGrouping') {
            gridObj.allowGrouping = !gridObj.allowGrouping;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleDetailed') {
            let visCount = 0;
            for (let i = 0; i < gridObj.columns.length; i++) {
                if (gridObj.columns[i].visible) visCount++;
            }
            if (visCount == gridObj.columns.length) {
                for (let i = 0; i < gridObj.columns.length; i++) {
                    let col = gridObj.columns[i];
                    if (typeof col.customAttributes != 'undefined' && typeof col.customAttributes.id != 'undefined' && col.customAttributes.id == 'detailed')
                        gridObj.showHider.hide(col.headerText, 'headerText');
                    else if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
            else {
                for (let i = 0; i < gridObj.columns.length; i++) {
                    let col = gridObj.columns[i];
                    if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
        }
        if (args.item.id === 'toggleaudittrail') {

        }

        gridObj.hideSpinner();
    }
    function addressesActionBegin(args) {
        //var grid = $('#AllAddressesGrid')[0].ej2_instances[0];
        ////if (args.requestType == "delete") {

        ////}
        //setTimeout(function () { grid.hideSpinner() }, 100)
    }
    function addressesActionComplete(args) {
        var grid = $('#AllAddressesGrid')[0].ej2_instances[0];
        //if (args.requestType == "delete") {

        //}
        setTimeout(function () { grid.hideSpinner() }, 100)
    }
    function addressesCommandClick(args) {
        var grid = $('#AllAddressesGrid')[0].ej2_instances[0];
        if (args.commandColumn.type == "Copy") {
            this.copy(false);
        }
        grid.hideSpinner();
    }
</script>

