@page "/Setup/Companies"
@using CERP.Localization;
@using Microsoft.AspNetCore.Mvc.Localization;
@using CERP.App;
@using CERP;
@inject IHtmlLocalizer<CERPResource> L
@inject Volo.Abp.Json.IJsonSerializer JsonSerializer
@using CERP.App.Helpers;

@model CERP.Web.Areas.Setup.Pages.Companies.ListModel
@{
    ViewData["IsEditing"] = false;
    bool IsEditing = (bool)ViewData["IsEditing"];

    List<DictionaryValue> documentTypes = Model.DictionaryValuesRepo.WithDetails().Where(x => x.ValueType.ValueTypeFor == ValueTypeModules.CompanyDocumentType).OrderBy(x => x.Key).ToList(); ;

    ViewData["Title"] = L["Companies"].Name;
    ViewData["IconClass"] = "fa fa-building";
    ViewData["HeaderTitle"] = L["Companies"].Name.ToUpper();
    ViewData["SubTitle"] = $"{L["ListOf"]} {L["Companies"]}";
    ViewData["Area"] = "Setup";

    ViewData["IsList"] = false;
    ViewData["IsCreate"] = false;
    string cNT = $"{L["Add"].Name} {L["Company"].Name}";
    ViewData["CreateNewText"] = cNT;
    ViewData["CreateNewLink"] = "/Companies/Company";

    string TabPlaceholder = (bool)ViewData["IsEditing"] ? L["Area"].Name : L["Step"].Name;

    var alertanimation = new Syncfusion.EJ2.Popups.DialogAnimationSettings { Effect = Syncfusion.EJ2.Popups.DialogEffect.None };

    var initialToolBar = new List<object>() { new { text = "Show Actions", tooltipText = "Actions", prefixIcon = "e-custom-show-actions", id = "showActions" }, "Search", "ColumnChooser" };
    var fullToolBar = new List<object>() { new { text = "Hide Actions", tooltipText = "Actions", prefixIcon = "e-custom-hide-actions", id = "hideActions" }, new { text = "Toggle Grouping", tooltipText = "Grouping", prefixIcon = "zmdi-chevron-up", id = "toggleGrouping" }, new { text = "Audit Trail", tooltipText = "View Audit Trail", prefixIcon = "e-toggleaudittrail", id = "toggleaudittrail" }, new { text = "Toggle Detailed", tooltipText = "Toggle Detailed", prefixIcon = "e-toggledetailed", id = "toggleDetailed" }, "ExcelExport", "CsvExport", "Print", "Search", new { text = "Copy", tooltipText = "Copy", prefixIcon = "e-copy", id = "copy" }, new { text = "Copy With Header", tooltipText = "Copy With Header", prefixIcon = "e-copy", id = "copyHeader" }, "ColumnChooser" };

    List<object> companiesCommands = new List<object>();
    companiesCommands.Add(new { type = "Edit", buttonOption = new { iconCss = "e-icons e-edit", cssClass = "e-flat" } });
    companiesCommands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "e-flat" } });
    companiesCommands.Add(new { type = "Cancel", buttonOption = new { iconCss = "e-icons e-cancel-icon", cssClass = "e-flat" } });

    List<object> companyDocsCommands = new List<object>();
    //companyDocsCommands.Add(new { type = "View", buttonOption = new { iconCss = "e-icons e-search", cssClass = "e-flat" } });
    companyDocsCommands.Add(new { type = "View", buttonOption = new { iconCss = "e-icons zmdi zmdi-search", cssClass = "e-flat" } });
    companyDocsCommands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "e-flat" } });

    List<object> companyCurrencyCommands = new List<object>();
    //companyDocsCommands.Add(new { type = "View", buttonOption = new { iconCss = "e-icons e-search", cssClass = "e-flat" } });
    companyCurrencyCommands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "e-flat" } });

    List<object> companyLocationsCommands = new List<object>();
    //companyDocsCommands.Add(new { type = "View", buttonOption = new { iconCss = "e-icons e-search", cssClass = "e-flat" } });
    companyLocationsCommands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "e-flat" } });

    List<object> companyPrintSizeCommands = new List<object>();
    //companyDocsCommands.Add(new { type = "View", buttonOption = new { iconCss = "e-icons e-search", cssClass = "e-flat" } });
    companyPrintSizeCommands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "e-flat" } });

    List<CERP.Setup.LocationType> locationTypes = Enum.GetValues(typeof(CERP.Setup.LocationType)).Cast<CERP.Setup.LocationType>().ToList();

    List<CERP.Setup.CompanyStatus> companyStatuses = Enum.GetValues(typeof(CERP.Setup.CompanyStatus)).Cast<CERP.Setup.CompanyStatus>().ToList();
    List<CERP.Setup.CurrencyType> currencyTypes = Enum.GetValues(typeof(CERP.Setup.CurrencyType)).Cast<CERP.Setup.CurrencyType>().ToList();
    List<CERP.Setup.Language> languages = Enum.GetValues(typeof(CERP.Setup.Language)).Cast<CERP.Setup.Language>().ToList();
    List<CERP.Setup.PrintSize> printSizes = Enum.GetValues(typeof(CERP.Setup.PrintSize)).Cast<CERP.Setup.PrintSize>().ToList();
    List<CERP.Setup.PrintSizeStatus> printSizeStatuses = Enum.GetValues(typeof(CERP.Setup.PrintSizeStatus)).Cast<CERP.Setup.PrintSizeStatus>().ToList();

    List<CERP.Setup.CurrencyStatus> currencyStatuses = Enum.GetValues(typeof(CERP.Setup.CurrencyStatus)).Cast<CERP.Setup.CurrencyStatus>().ToList();
    List<string> currencyStatusesDescs = new List<string>();
    currencyStatuses.ForEach(x => currencyStatusesDescs.Add(EnumExtensions.GetDescription(x)));

    var currencyEdit = new {@@params = new Syncfusion.EJ2.DropDowns.DropDownList() { CssClass = "moduleTypeDropDown", BeforeOpen = "loadCurrencyStatusesDropdown", DataSource = currencyStatusesDescs, Query = "new ej.data.Query()", AllowFiltering = true }};
}
@section styles {
    @if ((bool)ViewData["IsEditing"])
    {
        <link href="~/libs/smartwizard/dist/css/smart_wizard_theme_circles.min.css" rel="stylesheet" />
    }

    <style>
        .customContentArea {
            position: unset !important;
        }
    </style>

    <style>
        .avatar-upload {
            position: relative;
        }

            .avatar-upload .avatar-edit {
                position: absolute;
                right: 12px;
                z-index: 1;
                top: 10px;
            }

                .avatar-upload .avatar-edit input {
                    display: none;
                }

                    .avatar-upload .avatar-edit input + label {
                        display: inline-block;
                        width: 34px;
                        height: 34px;
                        margin-bottom: 0;
                        border-radius: 0%;
                        background: #FFFFFF;
                        border: 1px solid transparent;
                        box-shadow: 0px 2px 4px 0px rgba(0, 0, 0, 0.12);
                        cursor: pointer;
                        font-weight: normal;
                        transition: all 0.2s ease-in-out;
                    }

                        .avatar-upload .avatar-edit input + label:hover {
                            background: #f1f1f1;
                            border-color: #d6d6d6;
                        }

                    .avatar-upload .avatar-edit input#imageCancel + label#remove:after {
                        content: "\f136";
                        font-size: 1.35em;
                        font-family: Material-Design-Iconic-Font;
                        color: #757575;
                        position: absolute;
                        top: 6px;
                        left: 11px;
                        text-align: center;
                        margin: auto;
                    }

                    .avatar-upload .avatar-edit input#imageUpload + label#upload:after {
                        content: "\f11f";
                        font-size: 1.35em;
                        font-family: Material-Design-Iconic-Font;
                        color: #757575;
                        position: absolute;
                        top: 6px;
                        right: 11px;
                        text-align: center;
                        margin: auto;
                    }

            .avatar-upload .avatar-preview {
                height: auto;
                position: relative;
                border-radius: 0%;
                border: 6px solid #F8F8F8;
                box-shadow: 0px 2px 4px 0px rgba(0, 0, 0, 0.1);
            }

                .avatar-upload .avatar-preview > div {
                    width: 100%;
                    height: auto;
                    border-radius: 0%;
                    background-size: cover;
                    background-repeat: no-repeat;
                    background-position: center;
                }
    </style>
}
@section scripts {

    <script>
        //--- Load SP Maps
        function initMapApi() {
            let mapDiv = 'map'; //id of the div where the map should appear
            let mapType = '21';
            let mapLanguage = 'E';
            let proxyUrl = '';
            let apiClientKey = '13af4fc1ca1846a7864ccec09975f1df';
            SANGC_LoadMapViewer(mapDiv, mapType, mapLanguage, proxyUrl, apiClientKey);
            AssignUserEvents();
        };

        //======= Assign User Events so that to be trigered
        function AssignUserEvents() {
            //------- Map Events.
            SANGC_OnMapLoaded = ClientOnMapLoaded;
            SANGC_OnMouseClick = ClientOnMouseClick;
            SANGC_OnIdentify = ClientOnIdentify;
        };

        //--- Callback function for Map Loaded Event
        function ClientOnMapLoaded() {
            return;
        };

        //--- Callback function for Identify Click event
        function ClientOnIdentify(aResult) {
            document.getElementById("locationInformationTable").innerHTML = '';
            document.getElementById("noresultsdiv").innerHTML = '';
            if ((aResult == null) || (aResult.length == 0)) {
                document.getElementById("noresultsdiv").innerHTML = "No Result";
            } else {
                for (let i = 0; i <= aResult.length - 1; i++) {
                    alert(aResult[i].BuildingNumber +
                        aResult[i].ZipCode +
                        aResult[i].AdditionalNumber +
                        aResult[i].StreetAr +
                        aResult[i].StreetEn +
                        aResult[i].DistrictAr +
                        aResult[i].DistrictEn +
                        aResult[i].CityAr +
                        aResult[i].CityEn +
                        aResult[i].ServiceNameAr +
                        aResult[i].ServiceNameEn +
                        aResult[i].HasParcel +
                        aResult[i].RegionAr +
                        aResult[i].RegionEn +
                        aResult[i].Latitude +
                        aResult[i].Longitude);
                }
            }
        };

        function ClientOnMouseClick(px, py, sx, sy) {
            let locationObj = document.getElementById('locationStatus');
            locationObj.innerHTML = `
                            Longitude: ` + px.toString() + ", Latitude: " + py.toString();
        };

        var isEditingCompany = false;
        var curCompanyEditRow;
        $(document).ready(function () {

            let options = {
                buttonWidth: '100%',
                includeSelectAllOption: true,
                enableFiltering: false,
                enableClickableOptGroups: true,
                includeResetOption: true,
                includeResetDivider: true,
                enableCollapsibleOptGroups: true
            };
            $('#locationsField').multiselect(options);
            $('#currencyField').multiselect(options);
            let locations = [];
            let currencies = [];
            cERP.appServices.setup.locationSetup.locationTemplate.getList({}).done(function (data) {
                locations = data.items;
                let dataMS = [];
                for (let i = 0; i < data.items.length; i++) {
                    let item = data.items[i];
                    dataMS.push({ label: `${item.locationCode} - ${item.locationName}`, value: item.id, data: item });
                }
                $('#locationsField').multiselect('dataprovider', dataMS);
                $('#locationsField').change();
            });
            cERP.appServices.setup.currencySetup.currency.getList({}).done(function (data) {
                currencies = data.items;
                let dataMS = [];
                for (let i = 0; i < data.items.length; i++) {
                    let item = data.items[i];
                    dataMS.push({ label: `${item.currencyCode} - ${item.currencyName}`, value: item.id, data: item });
                }
                $('#currencyField').multiselect('dataprovider', dataMS);
                $('#currencyField').change();
            });
            cERP.appServices.setup.companySetup.company.getList({}).done(function (data) {
                let gridObj = $("#CompaniesGrid")[0].ej2_instances[0];
                gridObj.dataSource = data.items;
                setTimeout(function () { gridObj.hideSpinner() }, 200);
            });

            $('#clientId').val('[Auto Generated]');

            $('#addCompaniesBtn').on('click', function () {
                isEditingLocations = false;

                $('#submitCompanyBtn').val('Create Company');

                let docGrid = $("#CompanyDocumentsGrid")[0].ej2_instances[0];
                docGrid.dataSource = [];
                docGrid.refresh();
                setTimeout(function () { docGrid.hideSpinner() }, 200);
                let currenciesGrid = $("#CompanyCurrenciesGrid")[0].ej2_instances[0];
                currenciesGrid.dataSource = [];
                currenciesGrid.refresh();
                setTimeout(function () { currenciesGrid.hideSpinner() }, 200);
                let locationsGrid = $("#CompanyLocationsGrid")[0].ej2_instances[0];
                locationsGrid.dataSource = [];
                locationsGrid.refresh();
                setTimeout(function () { locationsGrid.hideSpinner() }, 200);
                let printSizesGrid = $("#CompanyPrintSizesGrid")[0].ej2_instances[0];
                printSizesGrid.dataSource = [];
                printSizesGrid.refresh();
                setTimeout(function () { printSizesGrid.hideSpinner() }, 200);
            });

            $("#submitDocumentBtn").on("click", function (e) {
                // Navigate previous
                e.preventDefault();
                e.stopImmediatePropagation();
                if (ValidateForm('documentsForm')) {
                    let grid = $("#CompanyDocumentsGrid")[0].ej2_instances[0];
                    let id = 0;
                    if (grid.dataSource.length > 0)
                        id = grid.dataSource[grid.dataSource.length - 1].id;

                    let documentTitle = $("#documentTitle").val();
                    let documentTitleLocalized = $("#documentTitleLocalized").val();

                    let documentTypeValue = $("option:selected", "#documentType").attr("data-value");
                    let documentTypeId = $("#documentType").val();

                    let issueDate = $("#documentIssueDate").val();
                    let endDate = $("#documentEndDate").val();
                    let documentCopy = $("#document")[0];
                    let documentCopyFile = documentCopy.files[0];
                    console.log(documentTitle);
                    grid.dataSource.push({
                        id: id + 1,
                        documentTitle,
                        documentTitleLocalized,
                        documentType: { id: documentTypeId, value: documentTypeValue },
                        issueDate: issueDate,
                        endDate: endDate,
                        softCopy: documentCopyFile,
                        document: { name: documentCopyFile.name }
                    }); // refresh the Grid.
                    grid.refresh(); // refresh the Grid.
                    toastr.info(`${documentTypeValue} Added for the company`);
                    grid.hideSpinner();
                }
            });
            $("#submitCurrencyBtn").on("click", function (e) {
                // Navigate previous
                e.preventDefault();
                e.stopImmediatePropagation();

                if (ValidateForm('currenciesForm')) {
                    let grid = $("#CompanyCurrenciesGrid")[0].ej2_instances[0];
                    let currency = currencies.filter(function (x) { return x.id == $("#currencyField").val(); })[0];
                    let id = 0;
                    let currencyType = $('#currencyType').val();
                    let currencyStatus = $('#currencyStatus').val();

                    let conversionRate = $("#conversionRate").val();
                    conversionRate = conversionRate <= 0 ? 1 : conversionRate;

                    if (grid.dataSource.length > 0) {
                        id = grid.dataSource[grid.dataSource.length - 1].id;
                        if (grid.dataSource.filter(function (x) { return x.currency.id == currency.id }).length > 0) {
                            toastr.error(`${currency.currencyName} - already exists in the company`);
                            return;
                        }
                        if (currencyType.includes('Base') && grid.dataSource.filter(function (x) { return x.currencyType.includes('Base') }).length > 0) {
                            toastr.error(`A base currency already exists`);
                            return;
                        }
                    }
                    $("#CompanyCurrenciesGrid")[0].ej2_instances[0].dataSource.push({
                        id: id + 1,
                        currency,
                        currencyType,
                        currencyTypeDescription: currencyType,
                        exchangeRate: conversionRate,
                        status: currencyStatus,
                        statusDescription: currencyStatus
                    }); // refresh the Grid.
                    grid.refresh(); // refresh the Grid.
                    toastr.info(`${currency.currencyName} - added for the company`);
                    grid.hideSpinner();
                }
            });
            $("#submitPrintSizeBtn").on("click", function (e) {
                // Navigate previous
                e.preventDefault();
                e.stopImmediatePropagation();

                if (ValidateForm('printSizesForm')) {
                    let grid = $("#CompanyPrintSizesGrid")[0].ej2_instances[0];
                    let id = 0;

                    let printSize = $('option:selected', "#printSizeType").attr('data-value');
                    let status = $('option:selected', "#printSizeStatus").attr('data-value');

                    if (grid.dataSource.length > 0) {
                        id = grid.dataSource[grid.dataSource.length - 1].id;

                        if (grid.dataSource.filter(function (x) { return x.printSize == printSize }).length > 0) {
                            toastr.error(`${printSize} - already exists in the company`);
                            return;
                        }
                    }
                    grid.dataSource.push({
                        id: id + 1,
                        printSize,
                        printSizeDescription: printSize,
                        status,
                        statusDescription: status,
                    });
                    grid.refresh(); // refresh the Grid.
                    toastr.info(`${printSize} - added for the company`);
                    grid.hideSpinner();
                }
            });
            $("#submitLocationBtn").on("click", function (e) {
                // Navigate previous
                e.preventDefault();
                e.stopImmediatePropagation();

                if (ValidateForm('locationsForm')) {
                    let grid = $("#CompanyLocationsGrid")[0].ej2_instances[0];

                    let allLocationsIds = $("#locationsField").val();
                    console.log(allLocationsIds);
                    let selectedlocations = locations.filter(function (x) { return allLocationsIds.includes(x.id); });
                    console.log(selectedlocations);

                    let existantLocs = grid.dataSource.filter(function (x) { console.log(x.location.id.toString()); return allLocationsIds.includes(x.location.id.toString()); });
                    console.log(existantLocs);
                    for (var i = 0; i < existantLocs.length; i++) {
                        toastr.error(`${selectedlocations[i].locationName} - already exists in the company`);
                        grid.hideSpinner();
                    }
                    if (existantLocs.length > 0) {
                        return;
                    }
                    if (selectedlocations.length > 1 && grid.dataSource.length == 0) {
                        toastr.error('A @EnumExtensions.GetDescription(CERP.Setup.LocationType.HeadOffice) location is required to perform this action');
                        grid.hideSpinner();
                        return;
                    }

                    let existantDefaults = grid.dataSource.filter(function (x) { return x.locationType == "@((int)CERP.Setup.LocationType.HeadOffice)" || x.locationType == "@(CERP.Setup.LocationType.HeadOffice)" });

                    for (var i = 0; i < selectedlocations.length; i++)
                    {
                        let locationName = $("#locationName").val();

                        let locationValidFrom = $('#locationStartDate').val();
                        let locationValidTill = $('#locationEndDate').val();

                        let locationType = $('#locationType').val();
                        let locationTypeDescription = $('option:selected', '#locationType').attr('data-value');
                        if (selectedlocations.length > 1) {
                            locationType = "@CERP.Setup.LocationType.Branch";
                            locationName = selectedlocations[i].locationCode + " - " + selectedlocations[i].locationName;
                        }
                        else if (locationType == '@CERP.Setup.LocationType.HeadOffice' && existantDefaults.length > 0) {
                            toastr.error('A @EnumExtensions.GetDescription(CERP.Setup.LocationType.HeadOffice) location already exists');
                            grid.hideSpinner();
                            return;
                        }
                        let id = 0;
                        if (grid.dataSource.length > 0) {
                            id = grid.dataSource[grid.dataSource.length - 1].id;
                        }

                        let isDefault = locationType == "@CERP.Setup.LocationType.HeadOffice";
                        grid.dataSource.push({ id: id + 1, isDefault, location: selectedlocations[i], name: locationName, locationValidityStart: locationValidFrom, locationValidityEnd: locationValidTill, locationType, locationTypeDescription }); // refresh the Grid.
                        toastr.info(`${locationName} - added for the company`);
                    }
                    grid.refresh(); // refresh the Grid.
                    grid.hideSpinner();
                }
            });

            $("#submitCompanyBtn").on("click", function (e) {
                // Navigate previous
                e.preventDefault();
                e.stopImmediatePropagation();

                let forms = $(`div[id='mainForm']`, '#companiesForm');
                if (ValidateFormByQuery(forms)) {
                    let grid = $("#CompaniesGrid")[0].ej2_instances[0];
                    grid.showSpinner();
                    Swal.showLoading();

                    let docGrid = $("#CompanyDocumentsGrid")[0].ej2_instances[0];
                    let currenciesGrid = $("#CompanyCurrenciesGrid")[0].ej2_instances[0];
                    let locationsGrid = $("#CompanyLocationsGrid")[0].ej2_instances[0];
                    let printSizesGrid = $("#CompanyPrintSizesGrid")[0].ej2_instances[0];

                    let form = [];
                    for (var i = 0; i < forms.length; i++) {
                        let curForm = forms[i];

                        let details = $(curForm).find("textarea, input, select").serializeArray();
                        form = form.concat(details);
                    }
                    let params = objectifyForm(form);
                    console.log(isEditingCompany);
                    if (isEditingCompany)
                        params.id = curCompanyEditRow.id;

                    let documents = docGrid.dataSource;
                    params.companyDocuments = documents;
                    console.log(documents);
                    let locations = locationsGrid.dataSource;
                    console.log(locations);
                    params.companyLocations = locations;
                    if (locations.length == 0 || locations.filter(function (x) { return x.locationType == '@((int)CERP.Setup.LocationType.HeadOffice)' || x.locationType == '@(CERP.Setup.LocationType.HeadOffice)'; }).length == 0) {
                        toastr.error('A @EnumExtensions.GetDescription(CERP.Setup.LocationType.HeadOffice) location is required to perform this action');
                        Swal.hideLoading();
                        if (isEditingCompany)
                            swal.fire("Failed", "A @EnumExtensions.GetDescription(CERP.Setup.LocationType.HeadOffice) location is required in a company to perform this action", "error");
                        else
                            swal.fire("Failed", "A @EnumExtensions.GetDescription(CERP.Setup.LocationType.HeadOffice) location is required in a company to perform this action", "error");

                        grid.hideSpinner();
                        return;
                    }
                    let currencies = currenciesGrid.dataSource;
                    params.companyCurrencies = currencies;
                    for (var i = 0; i < currencies.length; i++) {
                        params.companyCurrencies[i].status = params.companyCurrencies[i].statusDescription; 
                    }
                    console.log(currencies);
                    let printSizes = printSizesGrid.dataSource;
                    params.companyPrintSizes = printSizes;
                    console.log(printSizes);

                    var fileInput = $('#imageUpload')[0];
                    var companyPic = fileInput.files[0];

                    let formData = new FormData();
                    formData.append("CompanyPic", companyPic);

                    for (var i = 0; i < documents.length; i++) {
                        if (typeof documents[i].softCopy != 'undefined') {
                            var recKey = documents[i].softCopy.lastModified + '-' + documents[i].softCopy.size;
                            formData.append(recKey, documents[i].softCopy);
                            documents[i].document.name = recKey;
                        }
                    }

                    formData.append("info", JSON.stringify(params));
                    let xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
                    formData.append("__RequestVerificationToken", xhrToken);
                    $.ajax({
                        url: "?handler=Company",
                        async: true,
                        type: "POST",
                        data: formData,
                        contentType: false,
                        processData: false,
                        success: function (data) {
                            Swal.hideLoading();
                            if (isEditingCompany) {
                                grid.refresh(); // refresh the Grid.

                                swal.fire("Success", "Company has successfully been updated", "success");

                                for (let i = 0; i < grid.dataSource.length; i++) {
                                    if (grid.dataSource[i].id == data.id) {
                                        grid.dataSource[i] = data;
                                    }
                                }
                                grid.refresh();
                            }
                            else {
                                console.log(data);
                                grid.dataSource.push(data);
                                //grid.childGrid.dataSource.push(data.extraProperties.addresses);
                                grid.refresh(); // refresh the Grid.

                                swal.fire("Success", "Company has successfully been added", "success");
                            }
                            grid.hideSpinner();
                        },
                        error: function (err) {
                            Swal.hideLoading();
                            if (isEditingLocations)
                                swal.fire("Failed", "Company couldn't be updated, please fix all errors and try again.", "error");
                            else
                                swal.fire("Failed", "Company couldn't be added, please fix all errors and try again.", "error");

                            console.log(err);
                            grid.hideSpinner();
                        }
                    });
                    grid.hideSpinner();
                }
                else {
                    Swal.close();
                    Swal.hideLoading();
                }
            });

            initMapApi();

            let currencyGrid = $('#CompanyCurrenciesGrid')[0].ej2_instances[0];
            currencyGrid.columns[4].edit.params.dataSource = JSON.parse(@(JsonSerializer.Serialize(currencyStatuses)));

            console.log(currencyGrid.columns[4].edit.params.dataSource);
        });
    </script>
}
<partial name="_DefaultPageHeader" />
<div class="site-content customContentArea">
    <div class="control-section">
        <div class="areaHeader" style="display:flex;">
            <div id="companiesLoader" class="pull-left loader-inline" style="display:none"></div>
            <div class="areaHeaderTitle">
                <span id="areHeadertitle" class="areaHeaderTitleNode menu-text">Current Companies</span>
                @*<span id="" class="areaHeaderTitleInNode menu-text"> > </span>*@
                @*<span id="subTitle" class="menu-text" style="padding-left:15px; font-size: 28px; font-family:Roboto; font-weight:200;">@ViewData["SubTitle"]</span>*@
            </div>
            @*<h3 class="control-label" style="flex-grow: 1; margin:0">Approval Route</h3>*@
            <div class="pull-right text-right p-r-20 areaHeaderBtnSec">
                @*<div class="clearfix margin-15"></div>*@
                <a id="addCompaniesBtn" onclick="areaHeaderBtnClick(event); isEditingCompanies = false; $('#clientId').val('[Auto Generated]');" class="btn btn-outline-dark areaHeaderBtn"><i class="fa fa-plus fa-fw"></i> Add New</a>
            </div>
        </div>
        <form id="companiesForm" class="row areaForm" method="post" style="display: none; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
            <div id="smartwizard">
                <ul>
                    <li><a href="#step-1">@TabPlaceholder 1<br /><p style="font-size: 15px">General Information</p></a></li>
                    <li><a href="#step-2">@TabPlaceholder 2<br /><p style="font-size: 15px">Locations</p></a></li>
                    <li><a href="#step-3">@TabPlaceholder 3<br /><p style="font-size: 15px">Default</p></a></li>
                </ul>
                <div>
                    <div id="step-1">
                        <div id="form-step-0" role="form" data-toggle="validator">
                            <div class="m-l-20 m-t-0">
                                <h2>General Information</h2>
                                <p>
                                    Provide general details of the company
                                </p>
                            </div>
                            <hr style="margin-bottom: 0" />
                            <div id="mainForm">
                                <div class="panel-body" style="padding: 0; width:100%; display: inline-flex">
                                    <div class="m-t-15" style="width: 200px; padding-left: 20px;">
                                        <div class="avatar-upload">
                                            <div class="avatar-edit">
                                                <input type='' id="imageCancel" accept=".png, .jpg, .jpeg" onclick="removeImage(this);" />
                                                <label id="remove" for="imageCancel"></label>
                                                <input type='file' id="imageUpload" value="noimage.jpg" accept=".png, .jpg, .jpeg" onchange="showpreview(this);" />
                                                <label id="upload" for="imageUpload"></label>
                                            </div>
                                            <div class="avatar-preview">
                                                @*<div id="imagePreview" style="background-image: url(/images/@(isEditing && employee != null? employee.ProfilePic : "noimage.jpg"));">
                                                </div>*@
                                                <img id="CompLogo" src="/Uploads/noimage.jpg" class="img-responsive padding-5" style="cursor:pointer" />
                                            </div>
                                        </div>
                                        @*<div id='profile-upload'>
                                            <div class="hvr-profile-img"><input type="file" name="logo" id='getval' onchange="showpreview(this);" class="upload fa-w-18" title="Dimensions 180 X 180" id="imag"></div>
                                            <i class="fa fa-camera"></i>
                                        </div>*@

                                        @*<img id="EmpPhoto" src="~/images/@(isEditing && employee != null? employee.ProfilePic : "noimage.jpg")" class="img-responsive padding-5" style="cursor:pointer" />*@
                                        @*@if (empInfo != null && empInfo.PHOTO != null)
                                        {
                                            <img id="EmpPhoto" src='@(Url.Content("~")+"Files\\"+ Model.EMP_ID+"\\"+Convert.ToString(empInfo.PHOTO)+"?v="+DateTime.Now.Second.ToString())' class="img-responsive padding-5" style="cursor:pointer" />
                                        }
                                        else
                                        {
                                            <img id="EmpPhoto" src="@Url.Content("~")assets/img/noimage.jpg" class="img-responsive padding-5" style="cursor:pointer" />
                                        }*@

                                        @*<input type="hidden" id="PHOTO" name="PHOTO" value="@(empInfo!=null? empInfo.PHOTO : "")" class="form-control">*@

                                        @*<div id="divPhoto" class="form-control" style="display:none">
                                            <input type="file" id="PIC" name="PIC" width="100px"  />
                                            <div class="col-lg-3">
                                                <span class="fas fa-close pull-right"> Remove</span>
                                            </div>
                                        </div>*@

                                    </div>
                                    <div style="width: 100%; padding: 0 20px;">
                                        <div class="row">
                                            <div class="col-lg-6 col-md-6 col-sm-6 col-12">
                                                <div class="form-group">
                                                    <label class="control-label m-b-5 ">Client ID:</label>
                                                    <input type="text" id="clientId" name="ClientID" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ readonly value="" class="form-control " required>
                                                </div>
                                            </div>
                                            <div class="col-lg-6 col-md-6 col-sm-6 col-12">
                                                <div class="form-group">
                                                    <label class="margin-bottom-5 control-label">Company Status:</label>
                                                    <select id="companyStatus" name="StatusDescription" class="form-control" required>
                                                        @for (int i = 0; i < companyStatuses.Count; i++)
                                                        {
                                                            <option value="@companyStatuses[i]">@EnumExtensions.GetDescription(companyStatuses[i])</option>
                                                        }
                                                    </select>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-lg-6 col-md-6 col-sm-6 col-12">
                                                <div class="form-group">
                                                    <label class="control-label m-b-5 ">Legal Name:</label>
                                                    <input type="text" id="companyTitle" name="CompanyName" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control " required>
                                                </div>
                                            </div>
                                            <div class="col-lg-6 col-md-6 col-sm-6 col-12">
                                                <div class="form-group">
                                                    <label class="control-label m-b-5 ">Legal Name (In Arabic):</label>
                                                    <input type="text" id="companyTitleLocalized" name="CompanyNameLocalized" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <hr />
                                <div class="m-l-20 m-t-0">
                                    <h2>Company Registration</h2>
                                    <p>
                                        Provide registration details of the company
                                    </p>
                                </div>
                                <hr />
                                <div class="row" style="margin: 0">
                                    <div class="col-lg-6 col-md-6 col-sm-6 col-12">
                                        <div class="form-group">
                                            <label class="control-label m-b-5 ">Company Registration ID:</label>
                                            <input type="number" min="0" id="companyRegistration" name="RegistrationID" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" required>
                                        </div>
                                    </div>
                                    <div class="col-lg-6 col-md-6 col-sm-6 col-12">
                                        <div class="form-group">
                                            <label class="control-label m-b-5 ">Labour Office ID:</label>
                                            <input type="number" min="0" id="companyLabourId" name="LabourOfficeId" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control" required>
                                        </div>
                                    </div>
                                </div>
                                <hr />
                                <div class="m-l-20 m-t-0">
                                    <h2>Tax Registration</h2>
                                    <p>
                                        Provide tax registration details of the company
                                    </p>
                                </div>
                                <hr />
                                <div class="row" style="margin: 0">
                                    <div class="col-lg-4 col-md-4 col-sm-4 col-12">
                                        <div class="form-group">
                                            <label class="control-label m-b-5 ">Tax ID:</label>
                                            <input type="number" min="0" id="taxId" name="TaxID" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control " required>
                                        </div>
                                    </div>
                                    <div class="col-lg-4 col-md-4 col-sm-4 col-12">
                                        <div class="form-group">
                                            <label class="control-label m-b-5 ">VAT ID:</label>
                                            <input type="number" min="0" id="vatID" name="VATID" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control " required>
                                        </div>
                                    </div>
                                    <div class="col-lg-4 col-md-4 col-sm-4 col-12">
                                        <div class="form-group">
                                            <label class="control-label m-b-5 ">Social Insurance ID:</label>
                                            <input type="number" min="0" id="siId" name="SocialInsuranceID" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control " required>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <hr />
                            <div class="m-l-20 m-t-0">
                                <h2>Company Documents</h2>
                                <p>
                                    Provide various documents of the company
                                </p>
                            </div>
                            <hr />
                            <div class="panel-body p-t-0" style="padding-bottom:0;">
                                <div class="areaHeader" style="display:flex;">
                                    <div id="locationsLoader" class="pull-left loader-inline" style="display:none"></div>
                                    <div class="areaHeaderTitle">
                                        <span id="areHeadertitle" class="areaHeaderTitleNode menu-text">Documents</span>
                                        @*<span id="" class="areaHeaderTitleInNode menu-text"> > </span>*@
                                        @*<span id="subTitle" class="menu-text" style="padding-left:15px; font-size: 28px; font-family:Roboto; font-weight:200;">@ViewData["SubTitle"]</span>*@
                                    </div>
                                    @*<h3 class="control-label" style="flex-grow: 1; margin:0">Approval Route</h3>*@
                                    <div class="pull-right text-right p-r-20 areaHeaderBtnSec">
                                        @*<div class="clearfix margin-15"></div>*@
                                        <a id="addDocumentBtn" onclick="areaHeaderBtnClick(event);" class="btn btn-outline-dark areaHeaderBtn"><i class="fa fa-plus fa-fw"></i> Add New</a>
                                    </div>
                                </div>
                                <div role="form" id="documentsForm" class="row areaForm" method="post" data-toggle="validator" style="display: none; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
                                    <div class="row">
                                        <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                                            <div class="col-sm-6" style="padding-right:0">
                                                <div class="form-group">
                                                    <label class="control-label m-b-5 ">Title:</label>
                                                    <input type="text" id="documentTitle" name="DocumentTitle" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control " required>
                                                </div>
                                            </div>
                                            <div class="col-sm-6" style="padding-left:0">
                                                <div class="form-group">
                                                    <label class="control-label m-b-5 ">(In Arabic):</label>
                                                    <input type="text" id="documentTitleLocalized" name="DocumentTitleLocalized" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                                            <div class="col-sm-6" style="padding-right:0">
                                                <div class="form-group">
                                                    <label class="control-label m-b-5 ">Issue Date:</label>
                                                    <input type="text" id="documentIssueDate" name="DocumentIssueDate" class="text-left form-control inline pull-left" required>
                                                </div>
                                            </div>
                                            <div class="col-sm-6" style="padding-left:0">
                                                <div class="form-group">
                                                    <label class="control-label m-b-5 ">End Date:</label>
                                                    <input type="text" id="documentEndDate" name="DocumentEndDate" class="text-left form-control inline pull-left" required>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                                            <div class="form-group">
                                                <label class="control-label m-b-5 ">Document:</label>
                                                <input type="file" id="document" name="Document" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control " required>
                                            </div>
                                        </div>
                                        <div class="col-lg-3 col-md-6 col-sm-6 col-12">
                                            <div class="form-group">
                                                <label class="margin-bottom-5 control-label">Document Type:</label>
                                                <select id="documentType" name="DocumentType" class="form-control" required>
                                                    @for (int i = 0; i < documentTypes.Count; i++)
                                                    {
                                                        <option value="@documentTypes[i].Id" data-value="@documentTypes[i].Value">@documentTypes[i].Value</option>
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                    <hr />
                                    <div class="row m-t-20">
                                        <div class="col-lg-12">
                                            <button id="submitDocumentBtn" type="button" class="btn btn-success btn-block">Add Document</button>
                                        </div>
                                    </div>
                                </div>
                                <div id="companyDocumentsCS" class="control-section">
                                    <ejs-grid id="CompanyDocumentsGrid" enableAutoFill="true" dataBound="dataBoundResponsive"
                                              allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true"
                                              hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true"
                                              allowSorting="true" allowMultiSorting="true" gridLines="Both" dataSource="new List<dynamic>()"
                                              toolbar="@initialToolBar" commandClick="companyDocsCommandClick" actionBegin="companyDocsActionBegin"
                                              toolbarClick="companyDocsToolbarClick" allowPaging="true" allowResizing="true">

                                        <e-grid-columns>
                                            <e-grid-column field="id" headerText="Id" textAlign="Center" visible="false" showInColumnChooser="false"></e-grid-column>
                                            <e-grid-column field="documentTitle" headerText="Title" textAlign="Center"></e-grid-column>
                                            <e-grid-column field="documentTitleLocalized" headerText="Local Title" textAlign="Center"></e-grid-column>
                                            <e-grid-column field="issueDate" headerText="Issue Date" textAlign="Center"></e-grid-column>
                                            <e-grid-column field="endDate" headerText="End Date" textAlign="Center"></e-grid-column>
                                            <e-grid-column field="documentType.value" headerText="Type" textAlign="Center"></e-grid-column>

                                            <e-grid-column headerText="Actions" textAlign="Center" commands="companyDocsCommands"></e-grid-column>
                                        </e-grid-columns>

                                        <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                        <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="false"></e-grid-editSettings>
                                        <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                        <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                    </ejs-grid>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="step-2">
                        <div id="form-step-1" role="form" data-toggle="validator">
                            <div class="m-l-20 m-t-0">
                                <h2>Locations</h2>
                                <p>
                                    Provide the company locations
                                </p>
                            </div>
                            <hr />
                            <div class="panel-body p-t-0" style="padding-bottom:0;">
                                <div class="areaHeader" style="display:flex;">
                                    <div id="locationsLoader" class="pull-left loader-inline" style="display:none"></div>
                                    <div class="areaHeaderTitle">
                                        <span id="areHeadertitle" class="areaHeaderTitleNode menu-text">Locations</span>
                                        @*<span id="" class="areaHeaderTitleInNode menu-text"> > </span>*@
                                        @*<span id="subTitle" class="menu-text" style="padding-left:15px; font-size: 28px; font-family:Roboto; font-weight:200;">@ViewData["SubTitle"]</span>*@
                                    </div>
                                    @*<h3 class="control-label" style="flex-grow: 1; margin:0">Approval Route</h3>*@
                                    <div class="pull-right text-right p-r-20 areaHeaderBtnSec">
                                        @*<div class="clearfix margin-15"></div>*@
                                        <a id="addLocationBtn" onclick="areaHeaderBtnClick(event);" class="btn btn-outline-dark areaHeaderBtn"><i class="fa fa-plus fa-fw"></i> Add New</a>
                                    </div>
                                </div>
                                <div role="form" id="locationsForm" class="row areaForm" method="post" data-toggle="validator" style="display: none; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
                                    <div class="row">
                                        <div class="col-lg-3 col-md-3 col-sm-3 col-12">
                                            <div class="form-group">
                                                <label class="control-label m-b-5 ">Location:</label>
                                                <select id="locationsField" multiple="multiple" onchange="if ($('#locationsField').val().length > 1) { $('#locationType').attr('readonly', 'readonly'); $('#locationType').val(''); $('#locationName').val('[Auto]'); $('#locationName').attr('readonly','readonly'); } else { $('#locationType').removeAttr('readonly'); $('#locationName').removeAttr('readonly'); $('#locationName').val($('option:selected', '#locationsField').text()); $('#locationType').val('@CERP.Setup.LocationType.HeadOffice');  }" name="Location" class="form-control" required>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="col-lg-3 col-md-3 col-sm-3 col-12">
                                            <div class="form-group">
                                                <label class="control-label m-b-5 ">Name:</label>
                                                <input type="text" id="locationName" name="LocationName" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control " required>
                                            </div>
                                        </div>
                                        <div class="col-lg-3 col-md-3 col-sm-3 col-12">
                                            <div class="col-sm-6" style="padding-right:0">
                                                <div class="form-group">
                                                    <label class="control-label m-b-5 ">Start Date:</label>
                                                    <input type="text" id="locationStartDate" name="LocationStartDate" class="text-left form-control inline pull-left" required>
                                                </div>
                                            </div>
                                            <div class="col-sm-6" style="padding-left:0">
                                                <div class="form-group">
                                                    <label class="control-label m-b-5 ">End Date:</label>
                                                    <input type="text" id="locationEndDate" name="LocationEndDate" class="text-left form-control inline pull-left" required>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-lg-3 col-md-3 col-sm-3 col-12">
                                            <div class="form-group">
                                                <label class="control-label m-b-5 ">Location Type:</label>
                                                <select id="locationType" name="LocationTypeDescription" class="form-control" required>
                                                    @for (int i = 0; i < locationTypes.Count; i++)
                                                    {
                                                        <option value="@locationTypes[i]" data-value="@EnumExtensions.GetDescription(locationTypes[i])">@EnumExtensions.GetDescription(locationTypes[i])</option>
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-lg-12">
                                            <button id="submitLocationBtn" type="button" class="btn btn-success btn-block">Add Location</button>
                                        </div>
                                    </div>
                                </div>
                                <div id="companyLocationsCS" class="control-section">
                                    <ejs-grid id="CompanyLocationsGrid" enableAutoFill="true" dataBound="dataBoundResponsive"
                                              allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true"
                                              hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true"
                                              allowSorting="true" allowMultiSorting="true" gridLines="Both" dataSource="new List<dynamic>()"
                                              toolbar="@initialToolBar" toolbarClick="defaultToolbarClick" commandClick="companyLocationsCommandClick" actionBegin="companyLocationsActionBegin" actionComplete="companyLocationsActionComplete"
                                              allowPaging="true" allowResizing="true">

                                        <e-grid-columns>
                                            <e-grid-column field="locationId" headerText="Id" textAlign="Center" visible="false" isPrimaryKey="true" showInColumnChooser="false"></e-grid-column>
                                            <e-grid-column field="location.locationName" allowEditing="false" headerText="Location" textAlign="Center"></e-grid-column>
                                            <e-grid-column field="location.locationCode" allowEditing="false" headerText="Code" textAlign="Center"></e-grid-column>
                                            <e-grid-column field="name" headerText="Name" allowEditing="true" validationRules="new { required = true, minLength = 1 }" textAlign="Center"></e-grid-column>
                                            <e-grid-column headerText="Validity Period" textAlign="Center" columns='new List<Syncfusion.EJ2.Grids.GridColumn>() {
                                                new Syncfusion.EJ2.Grids.GridColumn(){ Field="locationValidityStart", Format = "yMd", Type = "date", AllowEditing = true, ValidationRules = new { required = true }, EditType = "datepickeredit", HeaderText="From", TextAlign= Syncfusion.EJ2.Grids.TextAlign.Center },
                                                new Syncfusion.EJ2.Grids.GridColumn(){ Field="locationValidityEnd", Format = "yMd", Type = "date", AllowEditing = true, ValidationRules = new { required = true }, EditType = "datepickeredit", HeaderText="Till", TextAlign= Syncfusion.EJ2.Grids.TextAlign.Center },
                                            }'></e-grid-column>
                                            <e-grid-column field="isDefault" allowEditing="false" headerText="Default" displayAsCheckBox="true" textAlign="Center"></e-grid-column>
                                            <e-grid-column field="locationTypeDescription" allowEditing="false" headerText="Location Type" textAlign="Center"></e-grid-column>
                                            <e-grid-column headerText="Actions" textAlign="Center" commands="companyLocationsCommands"></e-grid-column>
                                        </e-grid-columns>

                                        <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                        <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true"></e-grid-editSettings>
                                        <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                        <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                    </ejs-grid>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="step-3">
                        <div id="form-step-2" role="form" data-toggle="validator">
                            <div class="m-l-20 m-t-0">
                                <h2>Company Defaults</h2>
                                <p>
                                    Provide default configurations for the company
                                </p>
                            </div>
                            <hr />
                            <div id="mainForm">
                                <div class="row" style="margin: 0">
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                                        <div class="form-group">
                                            <label class="control-label m-b-5 ">Language:</label>
                                            <select id="language" name="LanguageDescription" class="form-control" required>
                                                @for (int i = 0; i < languages.Count; i++)
                                                {
                                                    <option value="@languages[i]" data-value="@languages[i]">@EnumExtensions.GetDescription(languages[i])</option>
                                                }
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <hr />
                            <div class="m-l-20 m-t-0">
                                <h2>Currency Information</h2>
                                <p>
                                    Provide currency details of the company
                                </p>
                            </div>
                            <hr />
                            <div class="panel-body p-t-0" style="padding-bottom:0;">
                                <div class="areaHeader" style="display:flex;">
                                    <div id="currenciesLoader" class="pull-left loader-inline" style="display:none"></div>
                                    <div class="areaHeaderTitle">
                                        <span id="areHeadertitle" class="areaHeaderTitleNode menu-text">Currencies</span>
                                        @*<span id="" class="areaHeaderTitleInNode menu-text"> > </span>*@
                                        @*<span id="subTitle" class="menu-text" style="padding-left:15px; font-size: 28px; font-family:Roboto; font-weight:200;">@ViewData["SubTitle"]</span>*@
                                    </div>
                                    @*<h3 class="control-label" style="flex-grow: 1; margin:0">Approval Route</h3>*@
                                    <div class="pull-right text-right p-r-20 areaHeaderBtnSec">
                                        @*<div class="clearfix margin-15"></div>*@
                                        <a id="addCurrencyBtn" onclick="areaHeaderBtnClick(event);" class="btn btn-outline-dark areaHeaderBtn"><i class="fa fa-plus fa-fw"></i> Add New</a>
                                    </div>
                                </div>
                                <div role="form" id="currenciesForm" class="row areaForm" method="post" data-toggle="validator" style="display: none; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
                                    <div class="row">
                                        <div class="col-lg-3 col-md-3 col-sm-3 col-12">
                                            <div class="form-group">
                                                <label class="control-label m-b-5 ">Currency:</label>
                                                <select id="currencyField" name="Currency" class="form-control" required>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="col-lg-3 col-md-3 col-sm-3 col-12">
                                            <div id="currencyTypeField" class="col-sm-12">
                                                <div class="form-group">
                                                    <label class="margin-bottom-5 control-label">Currency Type:</label>
                                                    <select id="currencyType" onchange="
                                                            if (!$('#currencyType').val().includes('Base')) {
                                                                $('#currencyTypeField').removeClass('col-sm-12');
                                                                $('#currencyTypeField').addClass('col-sm-6');
                                                                setTimeout(function () {
                                                                    $('#currencyConvRateField').slideDown(0);
                                                                }, 520);
                                                            } else {
                                                                $('#currencyConvRateField').slideUp(0);
                                                                $('#currencyTypeField').removeClass('col-sm-6');
                                                                $('#currencyTypeField').addClass('col-sm-12');
                                                            }
                                                        " name="Type" class="form-control" required>
                                                        @for (int i = 0; i < currencyTypes.Count; i++)
                                                        {
                                                            <option value="@currencyTypes[i]" data-value="@currencyTypes[i]">@EnumExtensions.GetDescription(currencyTypes[i])</option>
                                                        }
                                                    </select>
                                                </div>
                                            </div>
                                            <div id="currencyConvRateField" class="col-sm-6" style="display:none">
                                                <div class="form-group">
                                                    <label class="margin-bottom-5 control-label">Exchange Rate:</label>
                                                    <input type="number" step="0.0000000001" min="0" id="conversionRate" name="ConversionRate" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control">
                                                </div>
                                            </div>

                                        </div>
                                        <div class="col-lg-3 col-md-3 col-sm-3 col-12">
                                            <div class="form-group">
                                                <label class="margin-bottom-5 control-label">Currency Status:</label>
                                                <select id="currencyStatus" name="Status" class="form-control" required>
                                                    @for (int i = 0; i < currencyStatuses.Count; i++)
                                                    {
                                                        <option value="@currencyStatuses[i]">@EnumExtensions.GetDescription(currencyStatuses[i])</option>
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                        <div class="col-lg-3 col-md-3 col-sm-3 col-12">
                                            <div class="form-group">
                                                <label class="control-label m-b-5 "></label>
                                                <button id="submitCurrencyBtn" type="button" class="btn btn-success btn-block">Add Currency</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div id="companyCurrenciesCS" class="control-section">
                                    <ejs-grid id="CompanyCurrenciesGrid" enableAutoFill="true" dataBound="dataBoundResponsive"
                                              allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true"
                                              hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true"
                                              allowSorting="true" allowMultiSorting="true" gridLines="Both" dataSource="new List<dynamic>()"
                                              toolbar="@initialToolBar" toolbarClick="defaultToolbarClick" commandClick="companyCurrenciesCommandClick" actionBegin="companyCurrenciesActionBegin" actionComplete="companyCurrenciesActionComplete"
                                              allowPaging="true" allowResizing="true">

                                        <e-grid-columns>
                                            <e-grid-column field="id" headerText="Id" textAlign="Center" visible="false" isPrimaryKey="true" showInColumnChooser="false"></e-grid-column>
                                            <e-grid-column headerText="Currency" textAlign="Center" columns='new List<Syncfusion.EJ2.Grids.GridColumn>() {
                                                    new Syncfusion.EJ2.Grids.GridColumn(){ Field = "currency.currencyName", AllowEditing=false, HeaderText = "Name", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center },
                                                    new Syncfusion.EJ2.Grids.GridColumn(){ Field = "currency.currencyNameLocal", AllowEditing=false, HeaderText = "Local", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center }
                                            }'></e-grid-column>
                                            <e-grid-column field="currencyTypeDescription" allowEditing="false" headerText="Type" textAlign="Center"></e-grid-column>
                                            <e-grid-column field="exchangeRate" allowEditing="true" headerText="Exchange Rate" textAlign="Center"></e-grid-column>
                                            <e-grid-column field="statusDescription" allowEditing="true" editType="dropdownedit" edit="currencyEdit" headerText="Status" textAlign="Center"></e-grid-column>

                                            <e-grid-column headerText="Actions" textAlign="Center" commands="companyCurrencyCommands"></e-grid-column>
                                        </e-grid-columns>

                                        <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                        <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="true"></e-grid-editSettings>
                                        <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                        <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                    </ejs-grid>
                                </div>
                            </div>
                            <hr />
                            <div class="m-l-20 m-t-0">
                                <h2>Print Page Sizes</h2>
                                <p>
                                    Provide printing page sizes in the company
                                </p>
                            </div>
                            <hr />
                            <div class="panel-body p-t-0" style="padding-bottom:0;">
                                <div class="areaHeader" style="display:flex;">
                                    <div id="printSizesLoader" class="pull-left loader-inline" style="display:none"></div>
                                    <div class="areaHeaderTitle">
                                        <span id="areHeadertitle" class="areaHeaderTitleNode menu-text">Print Sizes</span>
                                        @*<span id="" class="areaHeaderTitleInNode menu-text"> > </span>*@
                                        @*<span id="subTitle" class="menu-text" style="padding-left:15px; font-size: 28px; font-family:Roboto; font-weight:200;">@ViewData["SubTitle"]</span>*@
                                    </div>
                                    @*<h3 class="control-label" style="flex-grow: 1; margin:0">Approval Route</h3>*@
                                    <div class="pull-right text-right p-r-20 areaHeaderBtnSec">
                                        @*<div class="clearfix margin-15"></div>*@
                                        <a id="addPrintSizeBtn" onclick="areaHeaderBtnClick(event);" class="btn btn-outline-dark areaHeaderBtn"><i class="fa fa-plus fa-fw"></i> Add New</a>
                                    </div>
                                </div>
                                <div role="form" id="printSizesForm" class="row areaForm" method="post" data-toggle="validator" style="display: none; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
                                    <div class="row">
                                        <div class="col-lg-6 col-md-6 col-sm-6 col-12">
                                            <div id="printSizeTypeField" class="col-sm-12">
                                                <div class="form-group">
                                                    <label class="margin-bottom-5 control-label">Print Size:</label>
                                                    <select id="printSizeType" name="PrintSize" class="form-control" required>
                                                        @for (int i = 0; i < printSizes.Count; i++)
                                                        {
                                                            <option value="@printSizes[i]" data-value="@printSizes[i]">@EnumExtensions.GetDescription(printSizes[i])</option>
                                                        }
                                                    </select>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-lg-6 col-md-6 col-sm-6 col-12">
                                            <div id="printSizeTypeField" class="col-sm-12">
                                                <div class="form-group">
                                                    <label class="margin-bottom-5 control-label"></label>

                                                    <button id="submitPrintSizeBtn" type="button" class="btn btn-success btn-block">Add Print Size</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div id="companyPrintSizesCS" class="control-section">
                                    <ejs-grid id="CompanyPrintSizesGrid" enableAutoFill="true" dataBound="dataBoundResponsive"
                                              allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true"
                                              hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true"
                                              allowSorting="true" allowMultiSorting="true" gridLines="Both" dataSource="new List<dynamic>()"
                                              toolbar="@initialToolBar" toolbarClick="defaultToolbarClick" commandClick="companyPrintSizesCommandClick"
                                              allowPaging="true" allowResizing="true">

                                        <e-grid-columns>
                                            <e-grid-column field="id" textAlign="Center" visible="false" isPrimaryKey="true" showInColumnChooser="false"></e-grid-column>
                                            <e-grid-column field="printSizeDescription" headerText="Size" textAlign="Center"></e-grid-column>
                                            @*<e-grid-column field="statusDescription" headerText="Status" textAlign="Center"></e-grid-column>*@

                                            <e-grid-column headerText="Actions" width="100" textAlign="Center" autoFit="true" commands="companyPrintSizeCommands"></e-grid-column>
                                        </e-grid-columns>

                                        <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                                        <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="false"></e-grid-editSettings>
                                        <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                                        <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
                                    </ejs-grid>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <hr />
            <div class="row m-t-20">
                <div class="col-lg-12">
                    <input id="submitCompanyBtn" type="button" class="btn btn-success btn-block" value="Create Company" />
                </div>
            </div>
        </form>
        <div id="companiesCS" class="control-section">
            <ejs-grid id="CompaniesGrid" enableAutoFill="true" dataBound="dataBoundResponsive" commandClick="commandClick"
                      showColumnChooser="true" allowExcelExport="true" height="100%" allowPdfExport="true" allowReordering="true"
                      hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true" actionBegin="companyActionBegin" actionComplete="companyActionComplete"
                      allowSorting="true" allowMultiSorting="true" gridLines="Both" allowTextWrap="true" textWrapSettings="@(new Syncfusion.EJ2.Grids.GridTextWrapSettings() { WrapMode = Syncfusion.EJ2.Grids.WrapMode.Header })"
                      toolbarClick="toolbarClick" toolbar="@initialToolBar"
                      allowPaging="true" allowResizing="true">

                <e-grid-columns>
                    <e-grid-column field="id" headerText="Id" textAlign="Center" visible="false" showInColumnChooser="false"></e-grid-column>
                    <e-grid-column field="clientID" headerText="Client ID" textAlign="Center"></e-grid-column>
                    <e-grid-column headerText="Name" textAlign="Center" columns='new List<Syncfusion.EJ2.Grids.GridColumn>() {
                        new Syncfusion.EJ2.Grids.GridColumn() { Field= "companyName", HeaderText = "English", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center },
                        new Syncfusion.EJ2.Grids.GridColumn() { Field= "companyNameLocalized", HeaderText = "Local", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center }
                    }'></e-grid-column>
                    <e-grid-column field="registrationID" headerText="Registration ID" textAlign="Center"></e-grid-column>
                    <e-grid-column field="statusDescription" headerText="Status" textAlign="Center"></e-grid-column>

                    <e-grid-column headerText="Actions" textAlign="Center" commands="companiesCommands"></e-grid-column>
                </e-grid-columns>

                <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
                <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="false"></e-grid-editSettings>
                <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
                <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
            </ejs-grid>
        </div>
        <div id="auditTrail" style="display:none;">
            <partial name="_DataAuditTrailPartialView" model="@Model.GetDataAuditTrailModel()" />
        </div>
    </div>

</div>
<ejs-dialog id="alert_dialog" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy with Header" content="Atleast one row should be selected to copy with header">
    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
    </e-dialog-buttons>
</ejs-dialog>
<ejs-dialog id="alert_dialog_1" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy" content="Atleast one row should be selected to copy">
    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
    </e-dialog-buttons>
</ejs-dialog>

<script>
    let isAuditTrail = false;
    function loadCurrencyStatusesDropdown() {

    }
    function toolbarClick(args) {
        let gridObj = document.getElementById("CompaniesGrid").ej2_instances[0];

        if (args.item.id === 'CompaniesGrid_pdfexport') {
            gridObj.pdfExport();
        }
        if (args.item.id === 'CompaniesGrid_excelexport') {
            gridObj.excelExport();
        }
        if (args.item.id === 'CompaniesGrid_csvexport') {
            gridObj.csvExport();
        }
        if (this.getSelectedRecords().length > 0) {
            let withHeader = false;
            if (args.item.id === 'copyHeader') {
                withHeader = true;
            }
            this.copy(withHeader);
        }
        else {
            if (args.item.id === 'copyHeader') {
                let dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                dialogObj.show();
            }
            else if (args.item.id === 'copy') {
                let dialogObj = document.getElementById('alert_dialog_1').ej2_instances[0];
                dialogObj.show();
            }
        }
        if (args.item.id === 'showActions') {
            gridObj.toolbar = [{ text: "Hide Actions", tooltipText: "Actions", prefixIcon: "e-custom-hide-actions", id: "hideActions" }, { text: "Toggle Grouping", tooltipText: "Grouping", prefixIcon: "e-custom-group-toggle", id: "toggleGrouping" }, { text: "Audit Trail", tooltipText: "View Audit Trail", prefixIcon: "e-custom-audit-trail", id: "toggleaudittrail" },  { text: "Toggle Detailed", tooltipText: "Toggle Detailed", prefixIcon: "e-toggledetailed", id: "toggleDetailed" }, "ExcelExport", "PdfExport", "CsvExport", "Print", "Search", { text: "Copy", tooltipText: "Copy", prefixIcon: "e-copy", id: "copy" }, { text: "Copy With Header", tooltipText: "Copy With Header", prefixIcon: "e-copy", id: "copyHeader" }, "ColumnChooser"];
            gridObj.refresh();
        }
        if (args.item.id === 'hideActions') {
            gridObj.toolbar = [{ text: "Show Actions", tooltipText: "Actions", prefixIcon: "e-custom-show-actions", id: "showActions" }, "Search", "ColumnChooser"];
            gridObj.showColumnChooser = true;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleGrouping') {
            gridObj.allowGrouping = !gridObj.allowGrouping;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleDetailed') {
            let visCount = 0;
            for (let i = 0; i < gridObj.columns.length; i++) {
                if (gridObj.columns[i].visible) visCount++;
            }
            if (visCount == gridObj.columns.length) {
                for (let i = 0; i < gridObj.columns.length; i++) {
                    let col = gridObj.columns[i];
                    if (typeof col.customAttributes != 'undefined' && typeof col.customAttributes.id != 'undefined' && col.customAttributes.id == 'detailed')
                        gridObj.showHider.hide(col.headerText, 'headerText');
                    else if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
            else {
                for (let i = 0; i < gridObj.columns.length; i++) {
                    let col = gridObj.columns[i];
                    if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
        }
        if (args.item.id === 'toggleaudittrail') {

            if (!isAuditTrail) {
                var grid = gridObj;
                var agtGrid = $("#AuditTrailGrid")[0].ej2_instances[0];
                grid.showSpinner();

                $.ajax({
                    url: '?handler=DataAuditTrail',
                    async: true,
                    type: "GET",
                    data: {},
                    success: function (data) {
                        grid.hideSpinner();

                        //agtGrid.childGrid.childGrid.dataSource = data.tertiaryDS;
                        //agtGrid.childGrid.dataSource = data.secondaryDS;
                        agtGrid.dataSource = data.ds;
                        agtGrid.refresh();

                        $(".customContentArea").css('position', 'unset');
                        $("#auditTrail").slideDown(200);
                    },
                    error: function (data) {
                        grid.hideSpinner();

                        $(".customContentArea").css('position', 'absolute');
                        $("#auditTrail").slideUp(200);

                        swal.fire('Failed', `An error occured while generating the audit trail`, 'error');
                    }
                });

            }
            else {
                $(".customContentArea").css('position', 'absolute');
                $("#auditTrail").slideUp(200);
            }

            isAuditTrail = !isAuditTrail;
        }
        setTimeout(function () { gridObj.hideSpinner() }, 200);
    }
    function alertBtnClick() {
        let dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
        let dialogObj1 = document.getElementById('alert_dialog_1').ej2_instances[0];
        dialogObj.hide();
        dialogObj1.hide();
    }
    function commandClick(args) {
        let gridObj = document.getElementById("CompaniesGrid").ej2_instances[0];

        if (args.commandColumn.type == "Edit") {
            isEditingCompany = true;
            let params = args.rowData;

            toggleAreaFormBtn('companiesForm', false);

            setTimeout(function () {
                $('#submitCompanyBtn').val('Update Company');
                toggleAreaFormBtn('companiesForm', true);
            }, 200);

            FillFormByObject(params, $('#companiesForm'));

            let docGrid = $("#CompanyDocumentsGrid")[0].ej2_instances[0];
            let currenciesGrid = $("#CompanyCurrenciesGrid")[0].ej2_instances[0];
            let locationsGrid = $("#CompanyLocationsGrid")[0].ej2_instances[0];
            let printSizesGrid = $("#CompanyPrintSizesGrid")[0].ej2_instances[0];

            $('#companiesLoader').slideDown();
            cERP.appServices.setup.companySetup.company.get(params.id).done(function (data) {
                console.log(data);
                $('#companiesLoader').slideUp();
                curCompanyEditRow = data;

                if (data.companyLogo != null && data.companyLogo != '')
                    $('#CompLogo').attr('src', '/Uploads/' + data.companyLogo);
                else
                    $('#CompLogo').attr('src', '/Uploads/noimage.jpg');

                docGrid.dataSource = data.companyDocuments;
                docGrid.refresh();
                setTimeout(function () { docGrid.hideSpinner() }, 200);
                currenciesGrid.dataSource = data.companyCurrencies;
                currenciesGrid.refresh();
                setTimeout(function () { currenciesGrid.hideSpinner() }, 200);
                locationsGrid.dataSource = data.companyLocations;
                locationsGrid.refresh();
                setTimeout(function () { locationsGrid.hideSpinner() }, 200);
                printSizesGrid.dataSource = data.companyPrintSizes;
                printSizesGrid.refresh();
                setTimeout(function () { printSizesGrid.hideSpinner() }, 200);
            });
        }
        else if (args.commandColumn.type == "Copy") {
            this.copy(false);
        }

        setTimeout(function () { gridObj.hideSpinner() }, 200);
    }
    function companyActionComplete(args) {
        let gridObj = document.getElementById("CompaniesGrid").ej2_instances[0];
        setTimeout(function () { gridObj.hideSpinner() }, 200)
    }
    function companyActionBegin(args) {
        if (args.requestType == "delete") {
            let gridObj = document.getElementById("CompaniesGrid").ej2_instances[0];
            Swal.showLoading();

            let formData = new FormData();
            formData.append("companies", JSON.stringify(args.data));
            let xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
            formData.append("__RequestVerificationToken", xhrToken);

            $.ajax({
                url: '?handler=Company',
                async: true,
                type: "DELETE",
                data: formData,
                contentType: false,
                processData: false,
                success: function (data) {
                    gridObj.hideSpinner();
                    swal.fire("Success", "Company has successfully been deleted", "success");

                    if ($('#companiesForm').css('display') !== 'none') {
                        $('#companiesForm').slideUp();
                    }
                },
                error: function (err) {
                    gridObj.hideSpinner();
                    swal.fire("Failed", "Company couldn't be deleted, please fix all errors and try again.", "error");

                    console.log(err);
                }
            });
            setTimeout(function () { gridObj.hideSpinner() }, 200);
        }
    }

    function companyDocsActionBegin(args) {
        let docsGrid = $('#CompanyDocumentsGrid')[0].ej2_instances[0];
        //if (args.requestType == "delete") {

        //}
        setTimeout(function () { docsGrid.hideSpinner() }, 200)
    }
    function companyDocsCommandClick(args) {
        let docsGrid = $('#CompanyDocumentsGrid')[0].ej2_instances[0];
        if (args.commandColumn.type == "View") {
            console.log(args);
            let data = args.rowData.document;
            let re = /(?:\.([^.]+))?$/;
            let ext = re.exec(data.fileName)[1];   // "txt"
            let html = ``;
            html += `<hr class='m-t-0 p-t-0'/>`
            if (ext == "jpg" || ext == "jpeg" || ext == "png" || ext == "ico") {
                html += `<div style="margin: 0px; padding: 0px;height:auto;width:100%;">
                           <img src="/Uploads/${data.fileName}" style="height: 100%; width: 100%;" />
                        </div>`
            }
            else {
                html += `<div style="margin: 0px; padding: 0px;height:auto;width:100%;">
                           <p>The selected document isn't supported for preview. <br/> You may download it and view it locally</p>
                        </div>`
            }
            html += `<hr class='m-b-0 p-b-0'/>`
            Swal.fire({
                title: `<strong>${data.name}</strong>`,
                html: html,
                showCloseButton: true,
                showCancelButton: true,
                focusConfirm: false,
                confirmButtonText:
                    `<a style="text-decoration: none; color: white;" id="downlod" download="Document.${ext}" href='/Uploads/${data.fileName}' ><i class="zmdi zmdi-download m-r-5"></i> Download</a>`,
                confirmButtonAriaLabel: 'Download Document',
                cancelButtonText:
                    'Close',
                cancelButtonAriaLabel: 'Close'
            }).then((result) => {
                if (result.value) {
                    //e.preventDefault();  //stop the browser from following
                    //top.location.href = `/Uploads/${data.fileName}`;
                    Swal.fire(
                        'Downloaded',
                        'Your file has been downloaded.',
                        'success'
                    )
                }
            });
        }
        else if (args.commandColumn.type == "Copy") {
            this.copy(false);
        }
        setTimeout(function () { docsGrid.hideSpinner() }, 200)
    }
    function companyDocsToolbarClick(args) {
        let gridObj = document.getElementById("CompanyDocumentsGrid").ej2_instances[0];

        if (args.item.id === 'CompanyDocumentsGrid_pdfexport') {
            gridObj.pdfExport();
        }
        if (args.item.id === 'CompanyDocumentsGrid_excelexport') {
            gridObj.excelExport();
        }
        if (args.item.id === 'CompanyDocumentsGrid_csvexport') {
            gridObj.csvExport();
        }
        if (this.getSelectedRecords().length > 0) {
            let withHeader = false;
            if (args.item.id === 'copyHeader') {
                withHeader = true;
            }
            this.copy(withHeader);
        }
        else {
            if (args.item.id === 'copyHeader') {
                let dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                dialogObj.show();
            }
            else if (args.item.id === 'copy') {
                let dialogObj = document.getElementById('alert_dialog_1').ej2_instances[0];
                dialogObj.show();
            }
        }
        if (args.item.id === 'showActions') {
            gridObj.toolbar = [{ text: "Hide Actions", tooltipText: "Actions", prefixIcon: "e-custom-hide-actions", id: "hideActions" }, { text: "Toggle Grouping", tooltipText: "Grouping", prefixIcon: "e-custom-group-toggle", id: "toggleGrouping" }, { text: "Toggle Detailed", tooltipText: "Toggle Detailed", prefixIcon: "e-toggledetailed", id: "toggleDetailed" }, "ExcelExport", "PdfExport", "CsvExport", "Print", "Search", { text: "Copy", tooltipText: "Copy", prefixIcon: "e-copy", id: "copy" }, { text: "Copy With Header", tooltipText: "Copy With Header", prefixIcon: "e-copy", id: "copyHeader" }, "ColumnChooser"];
            gridObj.refresh();
        }
        if (args.item.id === 'hideActions') {
            gridObj.toolbar = [{ text: "Show Actions", tooltipText: "Actions", prefixIcon: "e-custom-show-actions", id: "showActions" }, "Search", "ColumnChooser"];
            gridObj.showColumnChooser = true;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleGrouping') {
            gridObj.allowGrouping = !gridObj.allowGrouping;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleDetailed') {
            let visCount = 0;
            for (let i = 0; i < gridObj.columns.length; i++) {
                if (gridObj.columns[i].visible) visCount++;
            }
            if (visCount == gridObj.columns.length) {
                for (let i = 0; i < gridObj.columns.length; i++) {
                    let col = gridObj.columns[i];
                    if (typeof col.customAttributes != 'undefined' && typeof col.customAttributes.id != 'undefined' && col.customAttributes.id == 'detailed')
                        gridObj.showHider.hide(col.headerText, 'headerText');
                    else if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
            else {
                for (let i = 0; i < gridObj.columns.length; i++) {
                    let col = gridObj.columns[i];
                    if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
        }
        if (args.item.id === 'toggleaudittrail') {

        }
        setTimeout(function () { gridObj.hideSpinner() }, 200);
    }

    function companyCurrenciesActionBegin(args) {
        let grid = $('#CompanyCurrenciesGrid')[0].ej2_instances[0];
        //if (args.requestType == "delete") {

        //}
        setTimeout(function () { grid.hideSpinner() }, 200)
    }
    function companyCurrenciesActionComplete(args) {
        let grid = $('#CompanyCurrenciesGrid')[0].ej2_instances[0];
        //if (args.requestType == "delete") {

        //}
        setTimeout(function () { grid.hideSpinner() }, 200)
    }
    function companyCurrenciesCommandClick(args) {
        let grid = $('#CompanyCurrenciesGrid')[0].ej2_instances[0];
        if (args.commandColumn.type == "Copy") {
            this.copy(false);
        }
        grid.hideSpinner();
    }

    function companyLocationsActionBegin(args) {
        let grid = $('#CompanyCurrenciesGrid')[0].ej2_instances[0];
        //if (args.requestType == "delete") {

        //}
        setTimeout(function () { grid.hideSpinner() }, 200)
    }
    function companyLocationsActionComplete(args) {
        let grid = $('#CompanyCurrenciesGrid')[0].ej2_instances[0];
        //if (args.requestType == "delete") {

        //}
        setTimeout(function () { grid.hideSpinner() }, 200)
    }
    function companyLocationsCommandClick(args) {
        let grid = $('#CompanyCurrenciesGrid')[0].ej2_instances[0];
        if (args.commandColumn.type == "Copy") {
            this.copy(false);
        }
        grid.hideSpinner();
    }

    function companyPrintSizesCommandClick(args) {
        let grid = $('#CompanyPrintSizesGrid')[0].ej2_instances[0];
        if (args.commandColumn.type == "Copy") {
            this.copy(false);
        }
        grid.hideSpinner();
    }

    function removeImage(e) {
        $('#imageUpload').val('');
        $('#imageCancel').hide();
        $('#remove').hide();

        $('#CompLogo').attr('src', '/images/noimage.jpg');
        $('#CompLogo').hide();
        $('#CompLogo').fadeIn(650);

    }

    function showpreview(input) {
        if (input.files && input.files[0]) {

            var reader = new FileReader();
            reader.onload = function (e) {
                $('#imageCancel').show();
                $('#imageCancel').css('display', '');
                $('#remove').show();

                $('#CompLogo').attr('src', e.target.result);
                $('#CompLogo').hide();
                $('#CompLogo').fadeIn(650);
            }
            //reader.onload = function (e) {
            //    $('#EmpPhoto').css('visibility', 'visible');
            //    $('#EmpPhoto').attr('src', e.target.result);
            //}
            reader.readAsDataURL(input.files[0]);
        }

    }
</script>

