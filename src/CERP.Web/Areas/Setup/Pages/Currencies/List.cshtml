@page "/Setup/Currencies"
@using CERP.Localization;
@using Microsoft.AspNetCore.Mvc.Localization;
@using CERP.App;
@using CERP;
@inject IHtmlLocalizer<CERPResource> L
@model CERP.Web.Areas.Setup.Pages.Currencies.ListModel;
@using CERP.App.Helpers;
@{
    ViewData["Title"] = L["Currencies"].Name;
    ViewData["IconClass"] = "fas fa-money-bill-wave m-l-15";
    ViewData["HeaderTitle"] = L["Currencies"].Name.ToUpper();
    ViewData["SubTitle"] = $"{L["ListOf"]} {L["Currencies"]}";
    ViewData["Area"] = "Setup";

    ViewData["IsList"] = false;
    ViewData["IsCreate"] = false;
    string cNT = $"{L["Add"].Name} {L["Currency"].Name}";

    var alertanimation = new Syncfusion.EJ2.Popups.DialogAnimationSettings { Effect = Syncfusion.EJ2.Popups.DialogEffect.None };

    var initialToolBar = new List<object>() { new { text = "Show Actions", tooltipText = "Actions", prefixIcon = "e-custom-show-actions", id = "showActions" }, "Search", "ColumnChooser" };
    var fullToolBar = new List<object>() { new { text = "Hide Actions", tooltipText = "Actions", prefixIcon = "e-custom-hide-actions", id = "hideActions" }, new { text = "Toggle Grouping", tooltipText = "Grouping", prefixIcon = "zmdi-chevron-up", id = "toggleGrouping" }, new { text = "Audit Trail", tooltipText = "View Audit Trail", prefixIcon = "e-toggleaudittrail", id = "toggleaudittrail" }, new { text = "Toggle Detailed", tooltipText = "Toggle Detailed", prefixIcon = "e-toggledetailed", id = "toggleDetailed" }, "ExcelExport", "CsvExport", "Print", "Search", new { text = "Copy", tooltipText = "Copy", prefixIcon = "e-copy", id = "copy" }, new { text = "Copy With Header", tooltipText = "Copy With Header", prefixIcon = "e-copy", id = "copyHeader" }, "ColumnChooser" };

    List<object> currenciesCommands = new List<object>();
    currenciesCommands.Add(new { type = "Edit", buttonOption = new { iconCss = "e-icons e-edit", cssClass = "e-flat" } });
    currenciesCommands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "e-flat" } });
    currenciesCommands.Add(new { type = "Cancel", buttonOption = new { iconCss = "e-icons e-cancel-icon", cssClass = "e-flat" }});
    
    List<CERP.Setup.CurrencyStatus> currencyStatuses = Enum.GetValues(typeof(CERP.Setup.CurrencyStatus)).Cast<CERP.Setup.CurrencyStatus>().ToList();
}
@section styles {

}

@section scripts {
    <script>
        isEditingCurrencies = false;
        isEditingCurrenciesLoaded = false;
        let curCurrenciesEditRow;
        
        $(document).ready(function () {
            let grid = $("#AllCurrenciesGrid")[0].ej2_instances[0];

            grid.showSpinner();
            cERP.appServices.setup.currencySetup.currency.getList({}).done(function (data) {
                grid.dataSource = data.items;
                grid.refresh();
                setTimeout(grid.hideSpinner(), 100);
            });

            $('#addCurrenciesBtn').on('click', function () {
                isEditingCurrencies = false;

                $('#submitCurrencyBtn').val('Create Currency');

                $('#currencyName').val('');
                $('#currencyNameLocal').val('');
                $('#currencyCode').val('');
            });
            $('#currenciesForm').on('submit', function (e) {
                e.preventDefault();
                if (ValidateForm('currencySpecificForm')) {
                    grid.showSpinner();
                    Swal.showLoading();

                    let form = [];
                    let currencyDetails = $('#currenciesForm').find("textarea, input, select").serializeArray();
                    form = form.concat(currencyDetails);
                    let params = objectifyForm(form);

                    params.id = -1;
                    params.isEditing = isEditingCurrencies;

                    if (isEditingCurrencies) {
                        params.id = curCurrenciesEditRow.id;

                        //cERP.appServices.hR.leaveRequestTemplates.update()
                    }
                    else {

                        //cERP.appServices.hR.leaveRequestTemplates.update()
                    }

                    let formData = new FormData();
                    formData.append("info", JSON.stringify(params));
                    let xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
                    formData.append("__RequestVerificationToken", xhrToken);

                    $.ajax({
                        url: "?handler=Currency",
                        async: true,
                        type: "POST",
                        data: formData,
                        contentType: false,
                        processData: false,
                        success: function (data) {
                            Swal.hideLoading();
                            if (isEditingCurrencies) {
                                grid.refresh(); // refresh the Grid.

                                swal.fire("Success", "Currency has successfully been updated", "success");

                                for (let i = 0; i < grid.dataSource.length; i++) {
                                    if (grid.dataSource[i].id == data.id) {
                                        grid.dataSource[i] = data;
                                    }
                                }
                                grid.refresh();
                            }
                            else {
                                grid.dataSource.push(data);
                                grid.refresh(); // refresh the Grid.

                                swal.fire("Success", "Currency has successfully been added", "success");
                            }
                            setTimeout(grid.hideSpinner(), 100);
                        },
                        error: function (err) {
                            Swal.hideLoading();
                            if (isEditingCurrencies)
                                swal.fire("Failed", "Currency couldn't be updated, please fix all errors and try again.", "error");
                            else
                                swal.fire("Failed", "Currency couldn't be added, please fix all errors and try again.", "error");

                            console.log(err);
                            grid.hideSpinner();
                        }
                    });
                }
                else {
                    Swal.close();
                    Swal.hideLoading();
                }
            });
        });
    </script>
}
<partial name="_DefaultPageHeader" />
<div class="site-content customContentArea">
    <div class="panel-body p-t-0" style="padding-bottom:0;">
        <div class="areaHeader" style="display:flex;">
            <div id="currenciesLoader" class="pull-left loader-inline" style="display:none"></div>
            <div class="areaHeaderTitle">
                <span id="areHeadertitle" class="areaHeaderTitleNode menu-text">Current Currencies</span>
                @*<span id="" class="areaHeaderTitleInNode menu-text"> > </span>*@
                @*<span id="subTitle" class="menu-text" style="padding-left:15px; font-size: 28px; font-family:Roboto; font-weight:200;">@ViewData["SubTitle"]</span>*@
            </div>
            @*<h3 class="control-label" style="flex-grow: 1; margin:0">Approval Route</h3>*@
            <div class="pull-right text-right p-r-20 areaHeaderBtnSec">
                @*<div class="clearfix margin-15"></div>*@
                <a id="addCurrenciesBtn" onclick="areaHeaderBtnClick(event); isEditingCurrencies = false;" class="btn btn-outline-dark areaHeaderBtn"><i class="fa fa-plus fa-fw"></i> Add New</a>
            </div>
        </div>
        <form id="currenciesForm" class="row areaForm" method="post" data-toggle="validator" style="display: none; margin:0; padding:20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05), 0 0px 10px 0px rgba(0, 0, 0, 0.05);">
            <div id="currencySpecificForm">
                <div class="row">
                    <div class="col-lg-4 col-md-4 col-sm-4 col-12">
                        <div class="col-sm-6" style="padding-right:0">
                            <div class="form-group">
                                <label class="control-label m-b-5 ">Name:</label>
                                <input type="text" id="currencyName" name="CurrencyName" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control " required>
                            </div>
                        </div>
                        <div class="col-sm-6" style="padding-left:0">
                            <div class="form-group">
                                <label class="control-label m-b-5 ">(In Arabic):</label>
                                <input type="text" id="currencyNameLocal" name="CurrencyNameLocal" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control rtl" required>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-4 col-md-4 col-sm-4 col-12">
                        <div class="form-group">
                            <label class="control-label m-b-5 ">Code:</label>
                            <input type="text" id="currencyCode" name="CurrencyCode" @* value = "@(empInfo!=null? empInfo.EMAIL : "")"*@ class="form-control " required>
                        </div>
                    </div>
                    <div class="col-lg-4 col-md-4 col-sm-4 col-12">
                        <div class="form-group">
                            <label class="margin-bottom-5 control-label">Currency Status:</label>
                            <select id="currencyStatus" name="Status" class="form-control" required>
                                @for (int i = 0; i < currencyStatuses.Count; i++)
                                {
                                    <option value="@currencyStatuses[i]">@EnumExtensions.GetDescription(currencyStatuses[i])</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row m-t-20">
                <div class="col-lg-12">
                    <input id="submitCurrencyBtn" type="submit" class="btn btn-success btn-block" value="Create Currency"/>
                </div>
            </div>
        </form>
        <div id="currenciesCS" class="control-section">
            <ejs-grid id="AllCurrenciesGrid" enableAutoFill="true" dataBound="dataBoundResponsive" commandClick="currenciesCommandClick" actionBegin="currenciesActionBegin"
                      allowExcelExport="true" height="100%" allowPdfExport="true"
                      hierarchyPrintMode="Expanded" allowSelection="true" allowFiltering="true"
                      allowSorting="true" allowMultiSorting="true" gridLines="Both"
                      toolbarClick="currenciesToolbarClick" showColumnChooser="true" toolbar="@initialToolBar"
                      allowPaging="true" allowResizing="true">

                <e-grid-columns>
                    <e-grid-column field="id" headerText="Id" isPrimaryKey="true" textAlign="Center" visible="false" showInColumnChooser="false"></e-grid-column>
                    <e-grid-column headerText="Currency" textAlign="Center" columns='new List<Syncfusion.EJ2.Grids.GridColumn>() {
                                               new Syncfusion.EJ2.Grids.GridColumn(){ Field = "currencyName", HeaderText="Name", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center },
                                               new Syncfusion.EJ2.Grids.GridColumn(){ Field = "currencyNameLocal", HeaderText="Local", TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center }
                                           }'></e-grid-column>
                     <e-grid-column field="statusDescription" headerText="Status" textAlign="Center"></e-grid-column>
                    <e-grid-column headerText="Actions" textAlign="Center" autoFit="true" commands="currenciesCommands"></e-grid-column>
                </e-grid-columns>

                <e-grid-filterSettings type="CheckBox">
                </e-grid-filterSettings>
                <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="false"></e-grid-editSettings>
                <e-grid-selectionsettings type="Multiple">
                </e-grid-selectionsettings>
                <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
            </ejs-grid>
            
        </div>
    </div>
</div>
<script>
    function currenciesToolbarClick(args) {
        let gridObj = document.getElementById("AllCurrenciesGrid").ej2_instances[0];

        if (args.item.id === 'AllCurrenciesGrid_pdfexport') {
            gridObj.pdfExport();
        }
        if (args.item.id === 'AllCurrenciesGrid_excelexport') {
            gridObj.excelExport();
        }
        if (args.item.id === 'AllCurrenciesGrid_csvexport') {
            gridObj.csvExport();
        }
        if (this.getSelectedRecords().length > 0) {
            let withHeader = false;
            if (args.item.id === 'copyHeader') {
                withHeader = true;
            }
            this.copy(withHeader);
        }
        else {
            if (args.item.id === 'copyHeader') {
                let dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                dialogObj.show();
            }
            else if (args.item.id === 'copy') {
                let dialogObj = document.getElementById('alert_dialog_1').ej2_instances[0];
                dialogObj.show();
            }
        }
        if (args.item.id === 'showActions') {
            gridObj.toolbar = [{ text: "Hide Actions", tooltipText: "Actions", prefixIcon: "e-custom-hide-actions", id: "hideActions" }, { text: "Toggle Grouping", tooltipText: "Grouping", prefixIcon: "e-custom-group-toggle", id: "toggleGrouping" }, { text: "Toggle Detailed", tooltipText: "Toggle Detailed", prefixIcon: "e-toggledetailed", id: "toggleDetailed" }, "ExcelExport", "PdfExport", "CsvExport", "Print", "Search", { text: "Copy", tooltipText: "Copy", prefixIcon: "e-copy", id: "copy" }, { text: "Copy With Header", tooltipText: "Copy With Header", prefixIcon: "e-copy", id: "copyHeader" }, "ColumnChooser"];
            gridObj.refresh();
        }
        if (args.item.id === 'hideActions') {
            gridObj.toolbar = [{ text: "Show Actions", tooltipText: "Actions", prefixIcon: "e-custom-show-actions", id: "showActions" }, "Search", "ColumnChooser"];
            gridObj.showColumnChooser = true;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleGrouping') {
            gridObj.allowGrouping = !gridObj.allowGrouping;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleDetailed') {
            let visCount = 0;
            for (let i = 0; i < gridObj.columns.length; i++) {
                if (gridObj.columns[i].visible) visCount++;
            }
            if (visCount == gridObj.columns.length) {
                for (let i = 0; i < gridObj.columns.length; i++) {
                    let col = gridObj.columns[i];
                    if (typeof col.customAttributes != 'undefined' && typeof col.customAttributes.id != 'undefined' && col.customAttributes.id == 'detailed')
                        gridObj.showHider.hide(col.headerText, 'headerText');
                    else if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
            else {
                for (let i = 0; i < gridObj.columns.length; i++) {
                    let col = gridObj.columns[i];
                    if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
        }
        if (args.item.id === 'toggleaudittrail') {

        }

        gridObj.hideSpinner();
    }
    function currenciesActionBegin(args) {
        if (args.requestType == "delete") {
            Swal.showLoading();

            let formData = new FormData();
            formData.append("currencies", JSON.stringify(args.data));
            let xhrToken = $('input:hidden[name="__RequestVerificationToken"]').val();
            formData.append("__RequestVerificationToken", xhrToken);

            $.ajax({
                url: '?handler=Currency',
                async: true,
                type: "DELETE",
                data: formData,
                contentType: false,
                processData: false,
                success: function (data) {
                    $('#AllCurrenciesGrid')[0].ej2_instances[0].hideSpinner();
                    swal.fire("Success", "Currency has successfully been deleted", "success");

                    if ($('#currenciesForm').css('display') !== 'none') {
                        $('#currenciesForm').slideUp();
                    }
                },
                error: function (err) {
                    $('#AllCurrenciesGrid')[0].ej2_instances[0].hideSpinner();
                    swal.fire("Failed", "Currency couldn't be deleted, please fix all errors and try again.", "error");

                    console.log(err);
                }
            });
        }

    }
    function currenciesCommandClick(args) {
        if (args.commandColumn == null) return;

        if (args.commandColumn.type == "Edit") {
            isEditingCurrencies = true;
            let params = args.rowData;
            curCurrenciesEditRow = params;

            toggleAreaFormBtn('currenciesForm', false);

            setTimeout(function () {
                $('#submitCurrencyBtn').val('Update Currency');
                toggleAreaFormBtn('currenciesForm', true);
            }, 200);

            $('#currencyName').val(params.currencyName);
            $('#currencyNameLocal').val(params.currencyNameLocal);
            $('#currencyCode').val(params.currencyCode);
            $('#currencyStatus').val(params.statusDescription);

            let adGrid = $('#AllAddressesGrid')[0].ej2_instances[0];
            adGrid.dataSource = params.extraProperties.addresses;
            adGrid.refresh();
        }
        else if (args.commandColumn.type == "Copy") {
            this.copy(false);
        }
    }
    function alertBtnClick() {
        let dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
        let dialogObj1 = document.getElementById('alert_dialog_1').ej2_instances[0];
        dialogObj.hide();
        dialogObj1.hide();
    }

    function addressesToolbarClick(args) {
        let gridObj = document.getElementById("AllAddressesGrid").ej2_instances[0];

        if (args.item.id === 'AllAddressesGrid_pdfexport') {
            gridObj.pdfExport();
        }
        if (args.item.id === 'AllAddressesGrid_excelexport') {
            gridObj.excelExport();
        }
        if (args.item.id === 'AllAddressesGrid_csvexport') {
            gridObj.csvExport();
        }
        if (this.getSelectedRecords().length > 0) {
            let withHeader = false;
            if (args.item.id === 'copyHeader') {
                withHeader = true;
            }
            this.copy(withHeader);
        }
        else {
            if (args.item.id === 'copyHeader') {
                let dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                dialogObj.show();
            }
            else if (args.item.id === 'copy') {
                let dialogObj = document.getElementById('alert_dialog_1').ej2_instances[0];
                dialogObj.show();
            }
        }
        if (args.item.id === 'showActions') {
            gridObj.toolbar = [{ text: "Hide Actions", tooltipText: "Actions", prefixIcon: "e-custom-hide-actions", id: "hideActions" }, { text: "Toggle Grouping", tooltipText: "Grouping", prefixIcon: "e-custom-group-toggle", id: "toggleGrouping" }, { text: "Toggle Detailed", tooltipText: "Toggle Detailed", prefixIcon: "e-toggledetailed", id: "toggleDetailed" }, "ExcelExport", "PdfExport", "CsvExport", "Print", "Search", { text: "Copy", tooltipText: "Copy", prefixIcon: "e-copy", id: "copy" }, { text: "Copy With Header", tooltipText: "Copy With Header", prefixIcon: "e-copy", id: "copyHeader" }, "ColumnChooser"];
            gridObj.refresh();
        }
        if (args.item.id === 'hideActions') {
            gridObj.toolbar = [{ text: "Show Actions", tooltipText: "Actions", prefixIcon: "e-custom-show-actions", id: "showActions" }, "Search", "ColumnChooser"];
            gridObj.showColumnChooser = true;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleGrouping') {
            gridObj.allowGrouping = !gridObj.allowGrouping;
            gridObj.refresh();
        }
        if (args.item.id === 'toggleDetailed') {
            let visCount = 0;
            for (let i = 0; i < gridObj.columns.length; i++) {
                if (gridObj.columns[i].visible) visCount++;
            }
            if (visCount == gridObj.columns.length) {
                for (let i = 0; i < gridObj.columns.length; i++) {
                    let col = gridObj.columns[i];
                    if (typeof col.customAttributes != 'undefined' && typeof col.customAttributes.id != 'undefined' && col.customAttributes.id == 'detailed')
                        gridObj.showHider.hide(col.headerText, 'headerText');
                    else if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
            else {
                for (let i = 0; i < gridObj.columns.length; i++) {
                    let col = gridObj.columns[i];
                    if (col.showInColumnChooser)
                        gridObj.showHider.show(col.headerText, 'headerText');
                }
            }
        }
        if (args.item.id === 'toggleaudittrail') {

        }

        gridObj.hideSpinner();
    }
    function addressesActionBegin(args) {
        var grid = $('#AllAddressesGrid')[0].ej2_instances[0];
        //if (args.requestType == "delete") {

        //}
        setTimeout(function () { grid.hideSpinner() }, 100)
    }
    function addressesActionComplete(args) {
        var grid = $('#AllAddressesGrid')[0].ej2_instances[0];
        //if (args.requestType == "delete") {

        //}
        setTimeout(function () { grid.hideSpinner() }, 100)
    }
    function addressesCommandClick(args) {
        var grid = $('#AllAddressesGrid')[0].ej2_instances[0];
        if (args.commandColumn.type == "Copy") {
            this.copy(false);
        }
        grid.hideSpinner();
    }
</script>

