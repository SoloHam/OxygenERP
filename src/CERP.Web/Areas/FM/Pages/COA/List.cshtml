@page
@addTagHelper *, Syncfusion.EJ2
@model CERP.Web.Areas.FM.COA.ListModel
@{
    ViewData["Title"] = "Chart of Accounts";
    ViewData["HeaderTitle"] = "Chart of Accounts";
    ViewData["SubTitle"] = "List of Accounts";
    var alertanimation = new Syncfusion.EJ2.Popups.DialogAnimationSettings { Effect = Syncfusion.EJ2.Popups.DialogEffect.None };

    List<object> commands = new List<object>();
    commands.Add(new { type = "Copy", buttonOption = new { iconCss = "e-icons e-copy", cssClass = "e-flat" } });
    commands.Add(new { type = "Edit", buttonOption = new { iconCss = "e-icons e-edit", cssClass = "e-flat" } });
    commands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "e-flat" } });
    commands.Add(new { type = "Save", buttonOption = new { iconCss = "e-icons e-update", cssClass = "e-flat" } });
    commands.Add(new { type = "Cancel", buttonOption = new { iconCss = "e-icons e-cancel-icon", cssClass = "e-flat" } });
}

@*<script>
        var old = ejs.grids.Data.prototype.generateQuery;
        ej.grids.Data.prototype.generateQuery = function () {
            var query = old.call(this, true);
            this.pageQuery(query);
            return query;
        };
</script>*@
@section styles {
    <link href="~/libs/syncfusion/ej2-grid/styles/fabric.css" rel="stylesheet" />
    @*<link rel="stylesheet" href="~/styles/fabricUI/fabric.min.css" />*@
    @*<link rel="stylesheet" href="~/styles/fabricUI/fabric-11.0.0.scoped.min.css" />*@
}
@section scripts {
    <!-- Syncfusion Essential JS 2 Scripts -->
    <script src="~/libs/syncfusion/ej2-grid/scripts/ej2.min.js"></script>
    <ejs-scripts></ejs-scripts>
}
<div class="site-content" style="padding:0; background-color: rgb(253,253,253);">
    <partial name="_DefaultPageHeader" />
</div>
<div class="site-content" style="padding-top:0; background-color: rgb(253,253,253);">

    <div class="control-section">
        <ejs-grid id="Grid" dataSource="@ViewData["COAs_DS"]" dataBound="dataBound" commandClick="commandClick" allowExcelExport="true" allowGrouping="true" allowPdfExport="true" hierarchyPrintMode="All" allowSelection="true" allowFiltering="true" allowSorting="true" allowMultiSorting="true" gridLines="Both" toolbarClick="toolbarClick" toolbar="@(new List<object>() {"ExcelExport", "PdfExport", "CsvExport", "Print", "Search", "Delete", new { text = "Copy", tooltipText = "Copy", prefixIcon = "e-copy", id = "copy" }, new { text = "Copy With Header", tooltipText = "Copy With Header", prefixIcon = "e-copy", id = "copyHeader" } })" contextMenuItems="@(new List<object>() { "AutoFit", "AutoFitAll", "SortAscending", "SortDescending","Copy", "Edit", "Delete", "Save", "Cancel","PdfExport", "ExcelExport", "CsvExport", "FirstPage", "PrevPage","LastPage", "NextPage"})" allowPaging="true" allowResizing="true">
            <e-grid-editSettings showDeleteConfirmDialog="true" showConfirmDialog="true" allowAdding="true" allowDeleting="true" allowEditing="false"></e-grid-editSettings>
            <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
            <e-grid-pagesettings pageCount="5" pageSizes="@(new string[] { "5", "10" , "20", "All" })"></e-grid-pagesettings>
            <e-grid-columns>
                <e-grid-column headerText="Account" textAlign="Center" columns="@Model.GetAccountColumns()">
                </e-grid-column>
                <e-grid-column allowEditing="true" headerText="Classification" textAlign="Center" columns="@Model.GetClassificationColumns(); ">
                </e-grid-column>
                <e-grid-column allowEditing="true" headerText="Attributes" textAlign="Center" columns="@Model.GetAttributesColumns(); ">
                </e-grid-column>
                <e-grid-column headerText="Sub Ledgers" textAlign="Center" columns="@Model.GetSubLedgersColumns(); ">
                </e-grid-column>
                <e-grid-column headerText="Manage Records" width="100" commands="commands"></e-grid-column>
            </e-grid-columns>
        </ejs-grid>
    </div>
</div>

<ejs-dialog id="alert_dialog" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy with Header" content="Atleast one row should be selected to copy with header">
    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
    </e-dialog-buttons>
</ejs-dialog>
<ejs-dialog id="alert_dialog_1" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Copy" content="Atleast one row should be selected to copy">
    <e-dialog-buttons>
        <e-dialog-dialogbutton buttonModel="@ViewData["alertbutton"]" click="alertBtnClick"></e-dialog-dialogbutton>
    </e-dialog-buttons>
</ejs-dialog>

<script>

    function toolbarClick(args) {
        var gridObj = document.getElementById("Grid").ej2_instances[0];
        if (args.item.id === 'Grid_pdfexport') {
            gridObj.pdfExport();
        }
        if (args.item.id === 'Grid_excelexport') {
            gridObj.excelExport();
        }
        if (args.item.id === 'Grid_csvexport') {
            gridObj.csvExport();
        }
        if (this.getSelectedRecords().length > 0) {
            var withHeader = false;
            if (args.item.id === 'copyHeader') {
                withHeader = true;
            }
            this.copy(withHeader);
        } else {
            if (args.item.id === 'copyHeader') {
                var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                dialogObj.show();
            }
            else if (args.item.id === 'copy') {
                var dialogObj = document.getElementById('alert_dialog_1').ej2_instances[0];
                dialogObj.show();
            }
        }
    }
    function alertBtnClick() {
        var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
        var dialogObj1 = document.getElementById('alert_dialog_1').ej2_instances[0];
        dialogObj.hide();
        dialogObj1.hide();
    }
    var initial = true;
    function dataBound(args) {
        this.autoFitColumns();
        //if (initial == true) {
        //    this.groupModule.collapseAll();
        //    initial = false;
        //}
        console.log(args);
    }

    function commandClick(args) {
        console.log(args);
        if (args.commandColumn.type == "Edit") {
            alert(JSON.stringify(args.rowData));  // display row data
        }
        else if (args.commandColumn.type == "Copy") {
            this.copy(false);
        }
    }
</script>